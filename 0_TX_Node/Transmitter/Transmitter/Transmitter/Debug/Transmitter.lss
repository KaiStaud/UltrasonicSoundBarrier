
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001038  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ddc  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005cc  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000650  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000210  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	38 d0       	rcall	.+112    	; 0x166 <main>
  f6:	66 c0       	rjmp	.+204    	; 0x1c4 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <I2C_init>:
	
}
/* Send Stop Bit */
void I2C_stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 100:	08 95       	ret

00000102 <I2C_start>:
 102:	84 ea       	ldi	r24, 0xA4	; 164
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <I2C_start+0xa>
 112:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 116:	08 95       	ret

00000118 <I2C_send>:
}
/* Send Data */
unsigned char I2C_send(unsigned char byte)
{
	/*TWDR contains byte to send*/
	TWDR = byte;
 118:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	/*send content of TWDR*/
	TWCR = (1<<TWINT) | (1<<TWEN);
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	/*wait, until byte has been sent --> ACK*/
	while (!(TWCR & (1<<TWINT)));
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <I2C_send+0xe>
	return TWSR;	
 12c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
}
 130:	08 95       	ret

00000132 <I2C_send_Address>:

/* Address */
unsigned char I2C_send_Address(unsigned char I2C_address, unsigned char rw)
{	
	unsigned char addr_byte = 0;
	addr_byte = I2C_address << 1;
 132:	88 0f       	add	r24, r24
	/*set RW-Bit, if necessary*/
	addr_byte |= rw;
	addr_byte |= 0b01000000;
	
	I2C_send(addr_byte);
 134:	60 64       	ori	r22, 0x40	; 64
 136:	86 2b       	or	r24, r22
 138:	ef df       	rcall	.-34     	; 0x118 <I2C_send>
	return TWSR;
 13a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
}
 13e:	08 95       	ret

00000140 <I2C_write>:

/* Transmit Data to Slave */
void I2C_write(unsigned char I2C_address, unsigned char data)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	d8 2f       	mov	r29, r24
 146:	c6 2f       	mov	r28, r22

/* Initialize I2C */
void I2C_init()
{
	/* Set SCL Speed to 100kHz*/
	TWBR = 0x10;
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>

/* Transmit Data to Slave */
void I2C_write(unsigned char I2C_address, unsigned char data)
{
	I2C_init();
	I2C_start();
 14e:	d9 df       	rcall	.-78     	; 0x102 <I2C_start>
	I2C_send_Address(I2C_address,0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	8d 2f       	mov	r24, r29
 154:	ee df       	rcall	.-36     	; 0x132 <I2C_send_Address>
	I2C_send(data);
 156:	8c 2f       	mov	r24, r28
 158:	df df       	rcall	.-66     	; 0x118 <I2C_send>
 15a:	84 e9       	ldi	r24, 0x94	; 148
	
}
/* Send Stop Bit */
void I2C_stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 160:	df 91       	pop	r29
	I2C_init();
	I2C_start();
	I2C_send_Address(I2C_address,0);
	I2C_send(data);
	I2C_stop();
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <main>:
 166:	c9 df       	rcall	.-110    	; 0xfa <I2C_init>
//#include "Globals.h"

int main(void)
{	/* Initialization Procedure*/
	I2C_init();
	SPI_init(MASTER_MODE);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	18 d0       	rcall	.+48     	; 0x19c <SPI_init>
	/* End init */
	
	
 for(int i=0; i<257; i++)
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 {
	I2C_write(PCF8574_ADDR,i);
 170:	6c 2f       	mov	r22, r28
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	e5 df       	rcall	.-54     	; 0x140 <I2C_write>
	SPI_write(CS_0_PORT,CS_0_PIN,i);
 176:	84 b1       	in	r24, 0x04	; 4
 178:	4c 2f       	mov	r20, r28
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	1e d0       	rcall	.+60     	; 0x1ba <SPI_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	89 e6       	ldi	r24, 0x69	; 105
 182:	98 e1       	ldi	r25, 0x18	; 24
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x1e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x28>
 18e:	00 00       	nop
	I2C_init();
	SPI_init(MASTER_MODE);
	/* End init */
	
	
 for(int i=0; i<257; i++)
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	c1 30       	cpi	r28, 0x01	; 1
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	d2 07       	cpc	r29, r18
 198:	59 f7       	brne	.-42     	; 0x170 <main+0xa>
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0x34>

0000019c <SPI_init>:
/*AD8400 Data gets transferred at rising_edge(sck) -> CPOL = 0 */


/* Initialize SPI Comunication */
void SPI_init(uint8_t SPI_MODE)
{	SPI_PORT |=(1<<SCK)|(1<<MISO)|(1<<MOSI);
 19c:	94 b1       	in	r25, 0x04	; 4
 19e:	9e 60       	ori	r25, 0x0E	; 14
 1a0:	94 b9       	out	0x04, r25	; 4
	CS_0_PORT|=(1<<CS_0_PIN);
 1a2:	20 9a       	sbi	0x04, 0	; 4
	/* Run @ max Speed 4Mhz*/
	SPCR |=(SPI_MODE<<MSTR);
 1a4:	2c b5       	in	r18, 0x2c	; 44
 1a6:	30 e1       	ldi	r19, 0x10	; 16
 1a8:	83 9f       	mul	r24, r19
 1aa:	c0 01       	movw	r24, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	82 2b       	or	r24, r18
 1b0:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPIE)|(1<<SPE)|(MSBFIRST<<DORD)|(0<<CPOL)|(0<<CPHA);
 1b2:	8c b5       	in	r24, 0x2c	; 44
 1b4:	80 6c       	ori	r24, 0xC0	; 192
 1b6:	8c bd       	out	0x2c, r24	; 44
 1b8:	08 95       	ret

000001ba <SPI_write>:

/* Write Data to Slave */
void SPI_write(uint8_t CS_Port, uint8_t CS_Pin,uint8_t data)
{/* CS is active when low */
 CS_Port &=~ (1<<CS_Pin);
 SPDR = data;
 1ba:	4e bd       	out	0x2e, r20	; 46
 /* wait for transmission to complete*/
 while(!(SPSR & (1<<SPIF)));
 1bc:	0d b4       	in	r0, 0x2d	; 45
 1be:	07 fe       	sbrs	r0, 7
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <SPI_write+0x2>
 CS_Port |=(1<<CS_Pin);
}
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
