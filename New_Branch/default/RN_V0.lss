
RN_V0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000250  00800100  00002ffe  00003092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  00800350  00800350  000032e2  2**0
                  ALLOC
  3 .stab         000018fc  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000058a  00000000  00000000  00004be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000368  00000000  00000000  0000516a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b96  00000000  00000000  000054d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d2e  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023cd  00000000  00000000  0000ad96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000042be  00000000  00000000  0000d163  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008d0  00000000  00000000  00011424  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f2a  00000000  00000000  00011cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002250  00000000  00000000  00012c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000008dc  00000000  00000000  00014e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000100  00000000  00000000  0001574a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_4>
      14:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_5>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_10>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_21>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_24>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <wdt_init>:

	//wdt_init();
}

void wdt_init(void)
{
      74:	14 be       	out	0x34, r1	; 52
	MCUSR = 0;
	wdt_disable();
      76:	88 e1       	ldi	r24, 0x18	; 24
      78:	0f b6       	in	r0, 0x3f	; 63
      7a:	f8 94       	cli
      7c:	80 93 60 00 	sts	0x0060, r24
      80:	10 92 60 00 	sts	0x0060, r1
      84:	0f be       	out	0x3f, r0	; 63

00000086 <__do_copy_data>:
      86:	13 e0       	ldi	r17, 0x03	; 3
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	ee ef       	ldi	r30, 0xFE	; 254
      8e:	ff e2       	ldi	r31, 0x2F	; 47
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	a0 35       	cpi	r26, 0x50	; 80
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	14 e0       	ldi	r17, 0x04	; 4
      9e:	a0 e5       	ldi	r26, 0x50	; 80
      a0:	b3 e0       	ldi	r27, 0x03	; 3
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a1 36       	cpi	r26, 0x61	; 97
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
      b0:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
extern char d;

int main(void)
{
char c = 'a'; 
	app_init();
      b8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <app_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      bc:	8f ef       	ldi	r24, 0xFF	; 255
      be:	99 e6       	ldi	r25, 0x69	; 105
      c0:	a8 e1       	ldi	r26, 0x18	; 24
      c2:	81 50       	subi	r24, 0x01	; 1
      c4:	90 40       	sbci	r25, 0x00	; 0
      c6:	a0 40       	sbci	r26, 0x00	; 0
      c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0xa>
      ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x14>
      cc:	00 00       	nop

extern char d;

int main(void)
{
char c = 'a'; 
      ce:	81 e6       	ldi	r24, 0x61	; 97
	app_init();
	_delay_ms(500);  
	//printf("Hello from AVR STUDIO 4.19");
    while(1)
	{
        if (!(UCSR0A & (1<<RXC0)))
      d0:	90 91 c0 00 	lds	r25, 0x00C0
      d4:	97 fd       	sbrc	r25, 7
      d6:	29 c0       	rjmp	.+82     	; 0x12a <main+0x72>
		{
		switch(c) 
      d8:	84 36       	cpi	r24, 0x64	; 100
      da:	c9 f0       	breq	.+50     	; 0x10e <main+0x56>
      dc:	85 36       	cpi	r24, 0x65	; 101
      de:	38 f4       	brcc	.+14     	; 0xee <main+0x36>
      e0:	82 36       	cpi	r24, 0x62	; 98
      e2:	79 f0       	breq	.+30     	; 0x102 <main+0x4a>
      e4:	83 36       	cpi	r24, 0x63	; 99
      e6:	80 f4       	brcc	.+32     	; 0x108 <main+0x50>
      e8:	81 36       	cpi	r24, 0x61	; 97
      ea:	e1 f4       	brne	.+56     	; 0x124 <main+0x6c>
      ec:	07 c0       	rjmp	.+14     	; 0xfc <main+0x44>
      ee:	86 36       	cpi	r24, 0x66	; 102
      f0:	a1 f0       	breq	.+40     	; 0x11a <main+0x62>
      f2:	86 36       	cpi	r24, 0x66	; 102
      f4:	78 f0       	brcs	.+30     	; 0x114 <main+0x5c>
      f6:	87 36       	cpi	r24, 0x67	; 103
      f8:	a9 f4       	brne	.+42     	; 0x124 <main+0x6c>
      fa:	12 c0       	rjmp	.+36     	; 0x120 <main+0x68>
		{
			/* Continue operation */
			case 'a': op_normal(); break;
      fc:	0e 94 a5 04 	call	0x94a	; 0x94a <op_normal>
     100:	11 c0       	rjmp	.+34     	; 0x124 <main+0x6c>

			/* stop operation */
			case 'b' : op_stop(); break;
     102:	0e 94 c0 03 	call	0x780	; 0x780 <op_stop>
     106:	0e c0       	rjmp	.+28     	; 0x124 <main+0x6c>

			/*Enter Power- Down mode */
			case 'c' : op_sleep(); break;
     108:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <op_sleep>
     10c:	0b c0       	rjmp	.+22     	; 0x124 <main+0x6c>

			/* Can't be reached : Button Input */
			case 'd' : op_button(); break;
     10e:	0e 94 4d 04 	call	0x89a	; 0x89a <op_button>
     112:	08 c0       	rjmp	.+16     	; 0x124 <main+0x6c>

			/* Mute System */
			case 'e': op_mute(); break;
     114:	0e 94 50 04 	call	0x8a0	; 0x8a0 <op_mute>
     118:	05 c0       	rjmp	.+10     	; 0x124 <main+0x6c>

			/* Reset Module */
			case 'f' :app_reset();break;
     11a:	0e 94 97 03 	call	0x72e	; 0x72e <app_reset>
     11e:	02 c0       	rjmp	.+4      	; 0x124 <main+0x6c>

			case 'g' :app_config();break;
     120:	0e 94 ae 03 	call	0x75c	; 0x75c <app_config>
			default: break;
		}
		c= 'a';
		//printf("D Value = %c\n",d);
		/* Combinatory Logic: assign next state depending on interrupt and current state */
		c = d;
     124:	80 91 37 01 	lds	r24, 0x0137
     128:	d3 cf       	rjmp	.-90     	; 0xd0 <main+0x18>
	} 
 
    else
		c = UDR0;
     12a:	80 91 c6 00 	lds	r24, 0x00C6
     12e:	d0 cf       	rjmp	.-96     	; 0xd0 <main+0x18>

00000130 <uart_init>:

#define Baudrate 9600UL
#define Baudvalue (((F_CPU / (16*Baudrate))) - 1)

void uart_init(void)
{	stdout = &mystdout;
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	90 93 5e 04 	sts	0x045E, r25
     138:	80 93 5d 04 	sts	0x045D, r24
	/* Set Baudrate to 9600 Baud/s*/
	UBRR0H =(Baudvalue>>8);
     13c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = Baudvalue;
     140:	87 e6       	ldi	r24, 0x67	; 103
     142:	80 93 c4 00 	sts	0x00C4, r24

	/* Enable RX and TX Functionality */
	UCSR0B = (1<<RXEN0) |(1<<TXEN0);//|(1<<RXCIE0);
     146:	88 e1       	ldi	r24, 0x18	; 24
     148:	80 93 c1 00 	sts	0x00C1, r24

	/* Set UART and 8 Bits */
	UCSR0C = (1<<UCSZ00) |(1<<UCSZ01);
     14c:	86 e0       	ldi	r24, 0x06	; 6
     14e:	80 93 c2 00 	sts	0x00C2, r24
}
     152:	08 95       	ret

00000154 <usart_tx>:

void usart_tx(char data) {
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1<<UDRE0)));
     154:	90 91 c0 00 	lds	r25, 0x00C0
     158:	95 ff       	sbrs	r25, 5
     15a:	fc cf       	rjmp	.-8      	; 0x154 <usart_tx>
    // Start transmission
    UDR0 = data; 
     15c:	80 93 c6 00 	sts	0x00C6, r24
}
     160:	08 95       	ret

00000162 <usart_putchar_printf>:
 
// this function is called by printf as a stream handler
int usart_putchar_printf(char var, FILE *stream) {
     162:	1f 93       	push	r17
     164:	18 2f       	mov	r17, r24
    // translate \n to \r for br@y++ terminal
    if (var == '\n') usart_tx('\r');
     166:	8a 30       	cpi	r24, 0x0A	; 10
     168:	19 f4       	brne	.+6      	; 0x170 <usart_putchar_printf+0xe>
     16a:	8d e0       	ldi	r24, 0x0D	; 13
     16c:	0e 94 aa 00 	call	0x154	; 0x154 <usart_tx>
    usart_tx(var);
     170:	81 2f       	mov	r24, r17
     172:	0e 94 aa 00 	call	0x154	; 0x154 <usart_tx>
    return 0;
}
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	1f 91       	pop	r17
     17c:	08 95       	ret

0000017e <sonar_init>:
volatile uint32_t timer_ticks =0;
double time_sec = 0;
uint16_t offset =0;

void sonar_init(void)
{	DDRB |= (1<<SonarPin);
     17e:	21 9a       	sbi	0x04, 1	; 4
	/* Rising Edge ,CLK Prescaler 8 */
	TCCR1B = (1<<ICES1)|(1<<CS11);
     180:	82 e4       	ldi	r24, 0x42	; 66
     182:	80 93 81 00 	sts	0x0081, r24
	/* Enable Input Capture Interupt */
	TIMSK1 = (1<<ICIE1);
     186:	80 e2       	ldi	r24, 0x20	; 32
     188:	80 93 6f 00 	sts	0x006F, r24
}
     18c:	08 95       	ret

0000018e <send_pulse>:
void send_pulse(void) /* Simulate One Pulse Mode*/
{
	SonarPort  |=  (1<<SonarPin);
     18e:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     190:	85 e3       	ldi	r24, 0x35	; 53
     192:	8a 95       	dec	r24
     194:	f1 f7       	brne	.-4      	; 0x192 <send_pulse+0x4>
     196:	00 00       	nop
	_delay_us(10);
	SonarPort  ^= (1<<SonarPin);
     198:	85 b1       	in	r24, 0x05	; 5
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	89 27       	eor	r24, r25
     19e:	85 b9       	out	0x05, r24	; 5
}
     1a0:	08 95       	ret

000001a2 <get_time>:

void get_time(void)
{
	time_sec =  timer_ticks * tau;
     1a2:	60 91 50 03 	lds	r22, 0x0350
     1a6:	70 91 51 03 	lds	r23, 0x0351
     1aa:	80 91 52 03 	lds	r24, 0x0352
     1ae:	90 91 53 03 	lds	r25, 0x0353
     1b2:	0e 94 9f 11 	call	0x233e	; 0x233e <__floatunsisf>
     1b6:	2d eb       	ldi	r18, 0xBD	; 189
     1b8:	37 e3       	ldi	r19, 0x37	; 55
     1ba:	46 e0       	ldi	r20, 0x06	; 6
     1bc:	55 e3       	ldi	r21, 0x35	; 53
     1be:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     1c2:	60 93 54 03 	sts	0x0354, r22
     1c6:	70 93 55 03 	sts	0x0355, r23
     1ca:	80 93 56 03 	sts	0x0356, r24
     1ce:	90 93 57 03 	sts	0x0357, r25
}
     1d2:	08 95       	ret

000001d4 <set_offset>:

void set_offset(void)
{
}
     1d4:	08 95       	ret

000001d6 <get_offset>:

uint8_t get_offset(void)
{
uint8_t int_offset=0;
return int_offset;
}
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	08 95       	ret

000001da <calc_distance>:


/* final method to calculate distance in cm */
uint16_t calc_distance(float theta_a)
{	
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
	double v_sonic = 331.5 * sqrt((theta_a +273.15)/273.15);
     1e2:	23 e3       	ldi	r18, 0x33	; 51
     1e4:	33 e9       	ldi	r19, 0x93	; 147
     1e6:	48 e8       	ldi	r20, 0x88	; 136
     1e8:	53 e4       	ldi	r21, 0x43	; 67
     1ea:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__addsf3>
     1ee:	23 e3       	ldi	r18, 0x33	; 51
     1f0:	33 e9       	ldi	r19, 0x93	; 147
     1f2:	48 e8       	ldi	r20, 0x88	; 136
     1f4:	53 e4       	ldi	r21, 0x43	; 67
     1f6:	0e 94 6f 10 	call	0x20de	; 0x20de <__divsf3>
     1fa:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <sqrt>
     1fe:	7b 01       	movw	r14, r22
     200:	8c 01       	movw	r16, r24
	double distance = 0;
	
	/* get updated time of flight */
	get_time();
     202:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <get_time>


/* final method to calculate distance in cm */
uint16_t calc_distance(float theta_a)
{	
	double v_sonic = 331.5 * sqrt((theta_a +273.15)/273.15);
     206:	c8 01       	movw	r24, r16
     208:	b7 01       	movw	r22, r14
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 ec       	ldi	r19, 0xC0	; 192
     20e:	45 ea       	ldi	r20, 0xA5	; 165
     210:	53 e4       	ldi	r21, 0x43	; 67
     212:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
	double distance = 0;
	
	/* get updated time of flight */
	get_time();

	distance = (time_sec*v_sonic)/2*100 - offset;
     216:	20 91 54 03 	lds	r18, 0x0354
     21a:	30 91 55 03 	lds	r19, 0x0355
     21e:	40 91 56 03 	lds	r20, 0x0356
     222:	50 91 57 03 	lds	r21, 0x0357
     226:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	5f e3       	ldi	r21, 0x3F	; 63
     232:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	48 ec       	ldi	r20, 0xC8	; 200
     23c:	52 e4       	ldi	r21, 0x42	; 66
     23e:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__mulsf3>
     242:	7b 01       	movw	r14, r22
     244:	8c 01       	movw	r16, r24
     246:	60 91 58 03 	lds	r22, 0x0358
     24a:	70 91 59 03 	lds	r23, 0x0359
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 9f 11 	call	0x233e	; 0x233e <__floatunsisf>
     256:	9b 01       	movw	r18, r22
     258:	ac 01       	movw	r20, r24
     25a:	c8 01       	movw	r24, r16
     25c:	b7 01       	movw	r22, r14
     25e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__subsf3>
	
	return distance;
     262:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__fixunssfsi>
}
     266:	cb 01       	movw	r24, r22
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	08 95       	ret

00000272 <__vector_10>:

/* Input Capture Interruptroutine : get TOF */
ISR(TIMER1_CAPT_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	8f 93       	push	r24
     27e:	9f 93       	push	r25
     280:	af 93       	push	r26
     282:	bf 93       	push	r27

/* Switch the Selected Edge*/
TCCR1B ^= (1<<ICES1);
     284:	80 91 81 00 	lds	r24, 0x0081
     288:	90 e4       	ldi	r25, 0x40	; 64
     28a:	89 27       	eor	r24, r25
     28c:	80 93 81 00 	sts	0x0081, r24

/* detect rising edge */
if(!(TCCR1B & TCCR1B_ICES1))
     290:	80 91 81 00 	lds	r24, 0x0081
     294:	86 fd       	sbrc	r24, 6
     296:	05 c0       	rjmp	.+10     	; 0x2a2 <__vector_10+0x30>
{
TCNT1 = 0;
     298:	10 92 85 00 	sts	0x0085, r1
     29c:	10 92 84 00 	sts	0x0084, r1
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <__vector_10+0x4c>
}

/*detect falling edge */
else
{
timer_ticks = ICR1;
     2a2:	80 91 86 00 	lds	r24, 0x0086
     2a6:	90 91 87 00 	lds	r25, 0x0087
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	80 93 50 03 	sts	0x0350, r24
     2b2:	90 93 51 03 	sts	0x0351, r25
     2b6:	a0 93 52 03 	sts	0x0352, r26
     2ba:	b0 93 53 03 	sts	0x0353, r27
//TOF = TCNT1;
//PORTB ^=(1<<4);

}

}
     2be:	bf 91       	pop	r27
     2c0:	af 91       	pop	r26
     2c2:	9f 91       	pop	r25
     2c4:	8f 91       	pop	r24
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	18 95       	reti

000002d0 <adc_init>:
float temperature = 0;

/* Initialize ADCs */
void adc_init(void)
{	/*Select 5V Reference */
	ADMUX = (1<<REFS0);
     2d0:	80 e4       	ldi	r24, 0x40	; 64
     2d2:	80 93 7c 00 	sts	0x007C, r24
	/* ADC Input Frequency = F_CPU / 1028 */
	ADCSRA = (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
     2d6:	ea e7       	ldi	r30, 0x7A	; 122
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	87 e0       	ldi	r24, 0x07	; 7
     2dc:	80 83       	st	Z, r24
	/* Enable ADC and ADC Interupt */
	ADCSRA |=(1<<ADEN)|(1<<ADIE);
     2de:	80 81       	ld	r24, Z
     2e0:	88 68       	ori	r24, 0x88	; 136
     2e2:	80 83       	st	Z, r24
	/* Start ADC in Freerunning Mode */
	ADCSRA |=(1<<ADSC);
     2e4:	80 81       	ld	r24, Z
     2e6:	80 64       	ori	r24, 0x40	; 64
     2e8:	80 83       	st	Z, r24
}
     2ea:	08 95       	ret

000002ec <change_channel>:

void change_channel(uint8_t channel)
{
	/* Halt the ADC */
	ADCSRA ^=(1<<ADEN);
     2ec:	90 91 7a 00 	lds	r25, 0x007A
     2f0:	90 58       	subi	r25, 0x80	; 128
     2f2:	90 93 7a 00 	sts	0x007A, r25
	ADMUX&=~0xFF; 
     2f6:	90 91 7c 00 	lds	r25, 0x007C
     2fa:	10 92 7c 00 	sts	0x007C, r1
	
	/* Measure the voltage on LM35 ADJ Pin */
	if(channel ==CHANNEL_LM35_ADJ)
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	21 f4       	brne	.+8      	; 0x30a <change_channel+0x1e>
		ADMUX |= (1<<REFS0)|(1<<MUX0);
     302:	80 91 7c 00 	lds	r24, 0x007C
     306:	81 64       	ori	r24, 0x41	; 65
     308:	0b c0       	rjmp	.+22     	; 0x320 <change_channel+0x34>
	
	/* measure main battery voltage */
	else if(channel ==CHANNEL_MAIN_SUPPLY)
     30a:	88 23       	and	r24, r24
     30c:	21 f4       	brne	.+8      	; 0x316 <change_channel+0x2a>
		ADMUX |= (1<<REFS0);
     30e:	80 91 7c 00 	lds	r24, 0x007C
     312:	80 64       	ori	r24, 0x40	; 64
     314:	05 c0       	rjmp	.+10     	; 0x320 <change_channel+0x34>
	
	/* RTC backup battery measurement */
	else if (channel ==CHANNEL_BACKUP_SUPPLY)
     316:	83 30       	cpi	r24, 0x03	; 3
     318:	29 f4       	brne	.+10     	; 0x324 <change_channel+0x38>
		ADMUX |= (1<<REFS0)|(1<<MUX0)|(1<<MUX1);
     31a:	80 91 7c 00 	lds	r24, 0x007C
     31e:	83 64       	ori	r24, 0x43	; 67
     320:	80 93 7c 00 	sts	0x007C, r24
	
 	/* Enable ADC again */
	ADCSRA ^=(1<<ADEN);
     324:	80 91 7a 00 	lds	r24, 0x007A
     328:	80 58       	subi	r24, 0x80	; 128
     32a:	80 93 7a 00 	sts	0x007A, r24
}
     32e:	08 95       	ret

00000330 <single_conversion>:

uint16_t single_conversion(uint8_t channel)
{
	change_channel(channel);
     330:	0e 94 76 01 	call	0x2ec	; 0x2ec <change_channel>
	ADCSRA |=  (1<<ADSC);
     334:	80 91 7a 00 	lds	r24, 0x007A
     338:	80 64       	ori	r24, 0x40	; 64
     33a:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & (1<<ADSC));
     33e:	80 91 7a 00 	lds	r24, 0x007A
     342:	86 fd       	sbrc	r24, 6
     344:	fc cf       	rjmp	.-8      	; 0x33e <single_conversion+0xe>
	return ADC;
     346:	20 91 78 00 	lds	r18, 0x0078
     34a:	30 91 79 00 	lds	r19, 0x0079
}
     34e:	c9 01       	movw	r24, r18
     350:	08 95       	ret

00000352 <get_temp>:

float get_temp(void)
{
	temperature = (temperature_buff*50)/1024;
     352:	20 91 5e 03 	lds	r18, 0x035E
     356:	30 91 5f 03 	lds	r19, 0x035F
     35a:	82 e3       	ldi	r24, 0x32	; 50
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	28 9f       	mul	r18, r24
     360:	b0 01       	movw	r22, r0
     362:	29 9f       	mul	r18, r25
     364:	70 0d       	add	r23, r0
     366:	38 9f       	mul	r19, r24
     368:	70 0d       	add	r23, r0
     36a:	11 24       	eor	r1, r1
     36c:	67 2f       	mov	r22, r23
     36e:	77 27       	eor	r23, r23
     370:	66 95       	lsr	r22
     372:	66 95       	lsr	r22
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 9f 11 	call	0x233e	; 0x233e <__floatunsisf>
     37c:	26 2f       	mov	r18, r22
     37e:	37 2f       	mov	r19, r23
     380:	48 2f       	mov	r20, r24
     382:	59 2f       	mov	r21, r25
     384:	20 93 60 03 	sts	0x0360, r18
     388:	30 93 61 03 	sts	0x0361, r19
     38c:	40 93 62 03 	sts	0x0362, r20
     390:	50 93 63 03 	sts	0x0363, r21
	return temperature;
}
     394:	08 95       	ret

00000396 <get_raw_data>:

void get_raw_data(uint16_t* carriage)
{
     396:	fc 01       	movw	r30, r24
	carriage[0] = battery_voltage[0];
     398:	80 91 5a 03 	lds	r24, 0x035A
     39c:	90 91 5b 03 	lds	r25, 0x035B
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
	carriage[1] = battery_voltage[1];
     3a4:	80 91 5c 03 	lds	r24, 0x035C
     3a8:	90 91 5d 03 	lds	r25, 0x035D
     3ac:	93 83       	std	Z+3, r25	; 0x03
     3ae:	82 83       	std	Z+2, r24	; 0x02
	carriage[2] = temperature_buff;
     3b0:	80 91 5e 03 	lds	r24, 0x035E
     3b4:	90 91 5f 03 	lds	r25, 0x035F
     3b8:	95 83       	std	Z+5, r25	; 0x05
     3ba:	84 83       	std	Z+4, r24	; 0x04
}
     3bc:	08 95       	ret

000003be <__vector_21>:

ISR(ADC_vect)
{
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	2f 93       	push	r18
     3ca:	3f 93       	push	r19
     3cc:	4f 93       	push	r20
     3ce:	5f 93       	push	r21
     3d0:	6f 93       	push	r22
     3d2:	7f 93       	push	r23
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
     3d8:	af 93       	push	r26
     3da:	bf 93       	push	r27
     3dc:	ef 93       	push	r30
     3de:	ff 93       	push	r31
/* Check the channel  and write Data to buffer*/

if((ADMUX & 0x0F) ==CHANNEL_LM35_ADJ)
     3e0:	80 91 7c 00 	lds	r24, 0x007C
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	51 f4       	brne	.+20     	; 0x3fe <__vector_21+0x40>
	{
		temperature_buff = ADC;
     3ea:	80 91 78 00 	lds	r24, 0x0078
     3ee:	90 91 79 00 	lds	r25, 0x0079
     3f2:	90 93 5f 03 	sts	0x035F, r25
     3f6:	80 93 5e 03 	sts	0x035E, r24
		change_channel(CHANNEL_MAIN_SUPPLY);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	1f c0       	rjmp	.+62     	; 0x43c <__vector_21+0x7e>
	}

else if((ADMUX & 0x0F) == CHANNEL_MAIN_SUPPLY)
     3fe:	80 91 7c 00 	lds	r24, 0x007C
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	8f 70       	andi	r24, 0x0F	; 15
     406:	90 70       	andi	r25, 0x00	; 0
     408:	00 97       	sbiw	r24, 0x00	; 0
     40a:	51 f4       	brne	.+20     	; 0x420 <__vector_21+0x62>
	{
		battery_voltage[1] = ADC;
     40c:	80 91 78 00 	lds	r24, 0x0078
     410:	90 91 79 00 	lds	r25, 0x0079
     414:	90 93 5d 03 	sts	0x035D, r25
     418:	80 93 5c 03 	sts	0x035C, r24
		change_channel(CHANNEL_BACKUP_SUPPLY);
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	0e c0       	rjmp	.+28     	; 0x43c <__vector_21+0x7e>
	}
/* Channel  */
else if((ADMUX & 0x0F) == CHANNEL_BACKUP_SUPPLY)
     420:	80 91 7c 00 	lds	r24, 0x007C
     424:	8f 70       	andi	r24, 0x0F	; 15
     426:	83 30       	cpi	r24, 0x03	; 3
     428:	59 f4       	brne	.+22     	; 0x440 <__vector_21+0x82>
	{
		battery_voltage[0] = ADC;
     42a:	80 91 78 00 	lds	r24, 0x0078
     42e:	90 91 79 00 	lds	r25, 0x0079
     432:	90 93 5b 03 	sts	0x035B, r25
     436:	80 93 5a 03 	sts	0x035A, r24
		change_channel(CHANNEL_LM35_ADJ);
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 76 01 	call	0x2ec	; 0x2ec <change_channel>
	}
	ADCSRA |= (1<<ADSC);
     440:	80 91 7a 00 	lds	r24, 0x007A
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 93 7a 00 	sts	0x007A, r24

}
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	bf 91       	pop	r27
     450:	af 91       	pop	r26
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	7f 91       	pop	r23
     458:	6f 91       	pop	r22
     45a:	5f 91       	pop	r21
     45c:	4f 91       	pop	r20
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <EEPROM_write>:

}
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE));
     46c:	f9 99       	sbic	0x1f, 1	; 31
     46e:	fe cf       	rjmp	.-4      	; 0x46c <EEPROM_write>
/* Set up address and Data Registers */
EEAR = uiAddress;
     470:	92 bd       	out	0x22, r25	; 34
     472:	81 bd       	out	0x21, r24	; 33
EEDR = ucData;
     474:	60 bd       	out	0x20, r22	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
     476:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
     478:	f9 9a       	sbi	0x1f, 1	; 31
}
     47a:	08 95       	ret

0000047c <save_timestamp>:
/* private macros */

/* private functions */

void save_timestamp(uint8_t h, uint8_t m, uint8_t s, uint8_t alarm_num)
{
     47c:	1f 93       	push	r17
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	0f 92       	push	r0
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	38 2f       	mov	r19, r24
     48a:	16 2f       	mov	r17, r22
	/* Save it to EEPROM */
	if(alarm_num == 1)
     48c:	21 30       	cpi	r18, 0x01	; 1
     48e:	81 f4       	brne	.+32     	; 0x4b0 <save_timestamp+0x34>
	{
	EEPROM_write(0x07,h);
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	63 2f       	mov	r22, r19
     496:	49 83       	std	Y+1, r20	; 0x01
     498:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_write>
	EEPROM_write(0x08,m);
     49c:	88 e0       	ldi	r24, 0x08	; 8
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	61 2f       	mov	r22, r17
     4a2:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_write>
	EEPROM_write(0x09,s);
     4a6:	89 e0       	ldi	r24, 0x09	; 9
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	49 81       	ldd	r20, Y+1	; 0x01
     4ac:	64 2f       	mov	r22, r20
     4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <save_timestamp+0x44>
	}
	else
	{
	EEPROM_write(0x0A,h);
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	63 2f       	mov	r22, r19
     4b6:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_write>
	EEPROM_write(0x0B,m);
     4ba:	8b e0       	ldi	r24, 0x0B	; 11
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	61 2f       	mov	r22, r17
     4c0:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_write>
	}
}
     4c4:	0f 90       	pop	r0
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	1f 91       	pop	r17
     4cc:	08 95       	ret

000004ce <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE));
     4ce:	f9 99       	sbic	0x1f, 1	; 31
     4d0:	fe cf       	rjmp	.-4      	; 0x4ce <EEPROM_read>
/* Set up address register */
EEAR = uiAddress;
     4d2:	92 bd       	out	0x22, r25	; 34
     4d4:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     4d6:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
     4d8:	80 b5       	in	r24, 0x20	; 32
}
     4da:	08 95       	ret

000004dc <load_timestamps>:
	EEPROM_write(0x0B,m);
	}
}

void load_timestamps(uint8_t* alarms)
{	
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	08 2f       	mov	r16, r24
     4e6:	19 2f       	mov	r17, r25
     4e8:	c0 e0       	ldi	r28, 0x00	; 0
     4ea:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t address=0x07;
	uint8_t i;
	/* Read back eeprom */
	for(i=0;i<5;i++)
	{
	alarms[i]= (uint8_t)EEPROM_read(address);
     4ec:	ce 01       	movw	r24, r28
     4ee:	07 96       	adiw	r24, 0x07	; 7
     4f0:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_read>
     4f4:	f8 01       	movw	r30, r16
     4f6:	81 93       	st	Z+, r24
     4f8:	8f 01       	movw	r16, r30
     4fa:	21 96       	adiw	r28, 0x01	; 1
void load_timestamps(uint8_t* alarms)
{	
	uint8_t address=0x07;
	uint8_t i;
	/* Read back eeprom */
	for(i=0;i<5;i++)
     4fc:	c5 30       	cpi	r28, 0x05	; 5
     4fe:	d1 05       	cpc	r29, r1
     500:	a9 f7       	brne	.-22     	; 0x4ec <load_timestamps+0x10>
	{
	alarms[i]= (uint8_t)EEPROM_read(address);
	address++;
	}

}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	08 95       	ret

0000050c <transfer_timestamp>:
	printf("Alarm 1: %i:%i:%i\n",saved_alarms[0],saved_alarms[1],saved_alarms[2]);
	printf("Alarm 2: %i:%i",saved_alarms[3],saved_alarms[4]);
}

void transfer_timestamp(void)
{
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	00 d0       	rcall	.+0      	; 0x512 <transfer_timestamp+0x6>
     512:	00 d0       	rcall	.+0      	; 0x514 <transfer_timestamp+0x8>
     514:	00 d0       	rcall	.+0      	; 0x516 <transfer_timestamp+0xa>
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
	uint8_t alarms2transfer[6];
	/* Call timestamp */
	load_timestamps(alarms2transfer);
     51a:	ce 01       	movw	r24, r28
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <load_timestamps>
	/* Send it over to RTC */
	rtc_set_alarm_s(alarms2transfer[0],alarms2transfer[1],alarms2transfer[2],1);
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	6a 81       	ldd	r22, Y+2	; 0x02
     526:	4b 81       	ldd	r20, Y+3	; 0x03
     528:	21 e0       	ldi	r18, 0x01	; 1
     52a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <rtc_set_alarm_s>
	rtc_set_alarm_s(alarms2transfer[3],alarms2transfer[4],alarms2transfer[5],2);
     52e:	8c 81       	ldd	r24, Y+4	; 0x04
     530:	6d 81       	ldd	r22, Y+5	; 0x05
     532:	4e 81       	ldd	r20, Y+6	; 0x06
     534:	22 e0       	ldi	r18, 0x02	; 2
     536:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <rtc_set_alarm_s>

}
     53a:	26 96       	adiw	r28, 0x06	; 6
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <return_eeprom>:
	for(i=0;i<0x0C;i++)
	EEPROM_write(i,0xFF);
}

void return_eeprom(void)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	00 d0       	rcall	.+0      	; 0x552 <return_eeprom+0x6>
     552:	00 d0       	rcall	.+0      	; 0x554 <return_eeprom+0x8>
     554:	0f 92       	push	r0
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	uint8_t saved_alarms[5];
	load_timestamps(saved_alarms);
     55a:	ce 01       	movw	r24, r28
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <load_timestamps>
	printf("Alarm 1: %i:%i:%i\n",saved_alarms[0],saved_alarms[1],saved_alarms[2]);
     562:	8d b7       	in	r24, 0x3d	; 61
     564:	9e b7       	in	r25, 0x3e	; 62
     566:	08 97       	sbiw	r24, 0x08	; 8
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	9e bf       	out	0x3e, r25	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	8d bf       	out	0x3d, r24	; 61
     572:	ed b7       	in	r30, 0x3d	; 61
     574:	fe b7       	in	r31, 0x3e	; 62
     576:	31 96       	adiw	r30, 0x01	; 1
     578:	8e e0       	ldi	r24, 0x0E	; 14
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	ad b7       	in	r26, 0x3d	; 61
     57e:	be b7       	in	r27, 0x3e	; 62
     580:	12 96       	adiw	r26, 0x02	; 2
     582:	9c 93       	st	X, r25
     584:	8e 93       	st	-X, r24
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	82 83       	std	Z+2, r24	; 0x02
     58c:	13 82       	std	Z+3, r1	; 0x03
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	84 83       	std	Z+4, r24	; 0x04
     592:	15 82       	std	Z+5, r1	; 0x05
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	86 83       	std	Z+6, r24	; 0x06
     598:	17 82       	std	Z+7, r1	; 0x07
     59a:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
	printf("Alarm 2: %i:%i",saved_alarms[3],saved_alarms[4]);
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	ed b7       	in	r30, 0x3d	; 61
     5a4:	fe b7       	in	r31, 0x3e	; 62
     5a6:	31 96       	adiw	r30, 0x01	; 1
     5a8:	81 e2       	ldi	r24, 0x21	; 33
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	ad b7       	in	r26, 0x3d	; 61
     5ae:	be b7       	in	r27, 0x3e	; 62
     5b0:	12 96       	adiw	r26, 0x02	; 2
     5b2:	9c 93       	st	X, r25
     5b4:	8e 93       	st	-X, r24
     5b6:	11 97       	sbiw	r26, 0x01	; 1
     5b8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ba:	82 83       	std	Z+2, r24	; 0x02
     5bc:	13 82       	std	Z+3, r1	; 0x03
     5be:	8d 81       	ldd	r24, Y+5	; 0x05
     5c0:	84 83       	std	Z+4, r24	; 0x04
     5c2:	15 82       	std	Z+5, r1	; 0x05
     5c4:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     5c8:	8d b7       	in	r24, 0x3d	; 61
     5ca:	9e b7       	in	r25, 0x3e	; 62
     5cc:	06 96       	adiw	r24, 0x06	; 6
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	9e bf       	out	0x3e, r25	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	8d bf       	out	0x3d, r24	; 61
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <clear_eeprom>:
	}

}

void clear_eeprom(void)
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
unsigned int i=0;
return_eeprom();
     5ec:	0e 94 a6 02 	call	0x54c	; 0x54c <return_eeprom>
	for(i=0;i<0x0C;i++)
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
     5f2:	d0 e0       	ldi	r29, 0x00	; 0
	EEPROM_write(i,0xFF);
     5f4:	ce 01       	movw	r24, r28
     5f6:	6f ef       	ldi	r22, 0xFF	; 255
     5f8:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_write>

void clear_eeprom(void)
{
unsigned int i=0;
return_eeprom();
	for(i=0;i<0x0C;i++)
     5fc:	21 96       	adiw	r28, 0x01	; 1
     5fe:	cc 30       	cpi	r28, 0x0C	; 12
     600:	d1 05       	cpc	r29, r1
     602:	c1 f7       	brne	.-16     	; 0x5f4 <clear_eeprom+0xc>
	EEPROM_write(i,0xFF);
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <wakeups_init>:
char d = 'a';

void wakeups_init(void)
{
	/* Setup Interrupts */
	PCICR  =(1<<PCIE1)|(1<<PCIE2);
     60a:	86 e0       	ldi	r24, 0x06	; 6
     60c:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 =(1<<PCINT10);
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	80 93 6c 00 	sts	0x006C, r24
	PCMSK2 =(1<<PCINT16)|(1<<PCINT18);
     616:	85 e0       	ldi	r24, 0x05	; 5
     618:	80 93 6d 00 	sts	0x006D, r24

	//wdt_init();
}
     61c:	08 95       	ret

0000061e <__vector_4>:
	return;
}

/* RTC  ~INT- Pin ISR */
ISR(PCINT1_vect)
{
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	4f 93       	push	r20
     62e:	5f 93       	push	r21
     630:	6f 93       	push	r22
     632:	7f 93       	push	r23
     634:	8f 93       	push	r24
     636:	9f 93       	push	r25
     638:	af 93       	push	r26
     63a:	bf 93       	push	r27
     63c:	ef 93       	push	r30
     63e:	ff 93       	push	r31
alarm_count++;
     640:	80 91 64 03 	lds	r24, 0x0364
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 64 03 	sts	0x0364, r24
printf("Alarm!\n");
     64a:	80 e3       	ldi	r24, 0x30	; 48
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 ab 14 	call	0x2956	; 0x2956 <puts>
/* extern Flag doesn't get recognized by MCU */
	if (alarm_count==4) // After the forth event, let MCU stay in Run Mode
     652:	80 91 64 03 	lds	r24, 0x0364
     656:	84 30       	cpi	r24, 0x04	; 4
     658:	21 f4       	brne	.+8      	; 0x662 <__vector_4+0x44>
	{
	alarm_count=0; //reset counter
     65a:	10 92 64 03 	sts	0x0364, r1
	d = 'a';
     65e:	81 e6       	ldi	r24, 0x61	; 97
     660:	01 c0       	rjmp	.+2      	; 0x664 <__vector_4+0x46>
	}
	else
	d = 'c'; // Always put mcu back to sleep
     662:	83 e6       	ldi	r24, 0x63	; 99
     664:	80 93 37 01 	sts	0x0137, r24
	//printf("%c",c);
}
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_5>:

/* User Button ISR */
ISR(PCINT2_vect)
{
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	8f 93       	push	r24
/* Button Interrupt */
if(!(PIND & (1<<2)))
     696:	89 b1       	in	r24, 0x09	; 9
	// Doesn't work : c = 'd';
	//app_reset();
}
/* UART Interrupt -> only for waking up  MCU */
else ;
}
     698:	8f 91       	pop	r24
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <app_init>:

uint16_t data_carriage[3] = {0,0,0};

void app_init(void)
{
	wdt_reset();
     6a4:	a8 95       	wdr
	wdt_disable();
     6a6:	88 e1       	ldi	r24, 0x18	; 24
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	80 93 60 00 	sts	0x0060, r24
     6b0:	10 92 60 00 	sts	0x0060, r1
     6b4:	0f be       	out	0x3f, r0	; 63

	/* Clear all Interupts */
	cli();
     6b6:	f8 94       	cli
	DDRC = 0x00;
     6b8:	17 b8       	out	0x07, r1	; 7
	RTCPort |=(1<<RTCPin);
     6ba:	42 9a       	sbi	0x08, 2	; 8

	PCICR  =(1<<PCIE1)|(1<<PCIE2);
     6bc:	86 e0       	ldi	r24, 0x06	; 6
     6be:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 =(1<<PCINT11);
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	80 93 6c 00 	sts	0x006C, r24
	PCMSK2 =(1<<PCINT18);
     6c8:	84 e0       	ldi	r24, 0x04	; 4
     6ca:	80 93 6d 00 	sts	0x006D, r24


	/* Initialize Core  and Peripherals */
	uart_init();
     6ce:	0e 94 98 00 	call	0x130	; 0x130 <uart_init>
	adc_init();
     6d2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <adc_init>
	wakeups_init();
     6d6:	0e 94 05 03 	call	0x60a	; 0x60a <wakeups_init>
	sonar_init();
     6da:	0e 94 bf 00 	call	0x17e	; 0x17e <sonar_init>
	uart_init();
     6de:	0e 94 98 00 	call	0x130	; 0x130 <uart_init>
	sei();
     6e2:	78 94       	sei
	twi_init_master();
     6e4:	0e 94 69 05 	call	0xad2	; 0xad2 <twi_init_master>
	rtc_reset_alarm();
     6e8:	0e 94 b7 0b 	call	0x176e	; 0x176e <rtc_reset_alarm>
	rtc_init();
     6ec:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <rtc_init>
	/* If RTC is not configured ask for Initialization */
	if(eeprom_read_byte((uint8_t*)0x06)== 0xFF)
     6f0:	86 e0       	ldi	r24, 0x06	; 6
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 09 17 	call	0x2e12	; 0x2e12 <__eerd_byte_m328p>
     6f8:	8f 3f       	cpi	r24, 0xFF	; 255
     6fa:	49 f4       	brne	.+18     	; 0x70e <app_init+0x6a>
	{
		/* Set the initial time and first two Alarms */
		init_time();
     6fc:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <init_time>
		/* Set initial Alarms  */
		init_alarms();
     700:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <init_alarms>
		/* Update configuration byte in EEPROM */
		eeprom_update_byte((uint8_t*)0x06,0x01);
     704:	86 e0       	ldi	r24, 0x06	; 6
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__eeupd_byte_m328p>
	}
	/* If already configured do nothing */ 
	rtc_write_byte(~0b00000011, 0x0f);
     70e:	8c ef       	ldi	r24, 0xFC	; 252
     710:	6f e0       	ldi	r22, 0x0F	; 15
     712:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
	printf("Init finished");
     716:	00 d0       	rcall	.+0      	; 0x718 <app_init+0x74>
     718:	88 e3       	ldi	r24, 0x38	; 56
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	ed b7       	in	r30, 0x3d	; 61
     71e:	fe b7       	in	r31, 0x3e	; 62
     720:	92 83       	std	Z+2, r25	; 0x02
     722:	81 83       	std	Z+1, r24	; 0x01
     724:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
}
     72c:	08 95       	ret

0000072e <app_reset>:

void app_reset(void)
{
	/* Soft RTC Reset */
	/* Dump EEPROM */
	clear_eeprom();
     72e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <clear_eeprom>
	/* Force an Hardware Reset */
	wdt_enable(WDTO_2S);
     732:	2f e0       	ldi	r18, 0x0F	; 15
     734:	88 e1       	ldi	r24, 0x18	; 24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	a8 95       	wdr
     73e:	80 93 60 00 	sts	0x0060, r24
     742:	0f be       	out	0x3f, r0	; 63
     744:	20 93 60 00 	sts	0x0060, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	9b e7       	ldi	r25, 0x7B	; 123
     74c:	a2 e9       	ldi	r26, 0x92	; 146
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	90 40       	sbci	r25, 0x00	; 0
     752:	a0 40       	sbci	r26, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <app_reset+0x20>
     756:	00 c0       	rjmp	.+0      	; 0x758 <app_reset+0x2a>
     758:	00 00       	nop
	_delay_ms(3000);
}
     75a:	08 95       	ret

0000075c <app_config>:

/* Configure Alarms over UART */
void app_config(void)
{	/* Read Time */
	init_time();
     75c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <init_time>
	/* Read Alarms */
	return_eeprom(); // Already stored Alarms 
     760:	0e 94 a6 02 	call	0x54c	; 0x54c <return_eeprom>
	init_alarms();
     764:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <init_alarms>
	printf("Leaving Configuration menue");
     768:	00 d0       	rcall	.+0      	; 0x76a <app_config+0xe>
     76a:	86 e4       	ldi	r24, 0x46	; 70
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	ed b7       	in	r30, 0x3d	; 61
     770:	fe b7       	in	r31, 0x3e	; 62
     772:	92 83       	std	Z+2, r25	; 0x02
     774:	81 83       	std	Z+1, r24	; 0x01
     776:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
}
     77e:	08 95       	ret

00000780 <op_stop>:
	rtc_write_byte(~0b00000011, 0x0f);
}

/*Enter Idle Mode */
void op_stop(void)
{	rtc_write_byte(~0b00000011, 0x0f);
     780:	8c ef       	ldi	r24, 0xFC	; 252
     782:	6f e0       	ldi	r22, 0x0F	; 15
     784:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
	printf("Idling MCU");
     788:	00 d0       	rcall	.+0      	; 0x78a <op_stop+0xa>
     78a:	82 e6       	ldi	r24, 0x62	; 98
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	ed b7       	in	r30, 0x3d	; 61
     790:	fe b7       	in	r31, 0x3e	; 62
     792:	92 83       	std	Z+2, r25	; 0x02
     794:	81 83       	std	Z+1, r24	; 0x01
     796:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
	set_sleep_mode(SLEEP_MODE_IDLE);  
     79a:	83 b7       	in	r24, 0x33	; 51
     79c:	81 7f       	andi	r24, 0xF1	; 241
     79e:	83 bf       	out	0x33, r24	; 51
	sleep_enable();  
     7a0:	83 b7       	in	r24, 0x33	; 51
     7a2:	81 60       	ori	r24, 0x01	; 1
     7a4:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     7a6:	85 b7       	in	r24, 0x35	; 53
     7a8:	80 66       	ori	r24, 0x60	; 96
     7aa:	85 bf       	out	0x35, r24	; 53
     7ac:	8f 7d       	andi	r24, 0xDF	; 223
     7ae:	85 bf       	out	0x35, r24	; 53
  	sleep_mode(); 
     7b0:	83 b7       	in	r24, 0x33	; 51
     7b2:	81 60       	ori	r24, 0x01	; 1
     7b4:	83 bf       	out	0x33, r24	; 51
     7b6:	88 95       	sleep
     7b8:	83 b7       	in	r24, 0x33	; 51
     7ba:	8e 7f       	andi	r24, 0xFE	; 254
     7bc:	83 bf       	out	0x33, r24	; 51
	/* Leave Sleep Mode */
	sleep_disable();
     7be:	83 b7       	in	r24, 0x33	; 51
     7c0:	8e 7f       	andi	r24, 0xFE	; 254
     7c2:	83 bf       	out	0x33, r24	; 51
	/* Clear alarm on RTC */
	rtc_write_byte(~0b00000011, 0x0f);  
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	8c ef       	ldi	r24, 0xFC	; 252
     7ca:	6f e0       	ldi	r22, 0x0F	; 15
     7cc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
	printf("Back to standard run mode");
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <op_stop+0x52>
     7d2:	8d e6       	ldi	r24, 0x6D	; 109
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	ed b7       	in	r30, 0x3d	; 61
     7d8:	fe b7       	in	r31, 0x3e	; 62
     7da:	92 83       	std	Z+2, r25	; 0x02
     7dc:	81 83       	std	Z+1, r24	; 0x01
     7de:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
}
     7e6:	08 95       	ret

000007e8 <op_sleep>:

/*Enter Deep Sleep*/
void op_sleep(void)
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
rtc_write_byte(~0b00000011, 0x0f);
     7ec:	8c ef       	ldi	r24, 0xFC	; 252
     7ee:	6f e0       	ldi	r22, 0x0F	; 15
     7f0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
printf("entering sleep mode");
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <op_sleep+0xe>
     7f6:	87 e8       	ldi	r24, 0x87	; 135
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	ad b7       	in	r26, 0x3d	; 61
     7fc:	be b7       	in	r27, 0x3e	; 62
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	9c 93       	st	X, r25
     802:	8e 93       	st	-X, r24
     804:	11 97       	sbiw	r26, 0x01	; 1
     806:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
/* Set All Pins to Inputs */ 
	PORTB = 0x00;
     80a:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
     80c:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
     80e:	1b b8       	out	0x0b, r1	; 11
		
	DDRB |= 0x00;
     810:	84 b1       	in	r24, 0x04	; 4
     812:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x00;
     814:	87 b1       	in	r24, 0x07	; 7
     816:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0x00;
     818:	84 b1       	in	r24, 0x04	; 4
     81a:	84 b9       	out	0x04, r24	; 4
	/* Disable the ADC */	
	ADCSRA &=~ (1<<7);
     81c:	ca e7       	ldi	r28, 0x7A	; 122
     81e:	d0 e0       	ldi	r29, 0x00	; 0
     820:	88 81       	ld	r24, Y
     822:	8f 77       	andi	r24, 0x7F	; 127
     824:	88 83       	st	Y, r24
	SMCR |=(1<<2); // Power down mode
     826:	83 b7       	in	r24, 0x33	; 51
     828:	84 60       	ori	r24, 0x04	; 4
     82a:	83 bf       	out	0x33, r24	; 51
	SMCR |=1; // enable sleep instructions
     82c:	83 b7       	in	r24, 0x33	; 51
     82e:	81 60       	ori	r24, 0x01	; 1
     830:	83 bf       	out	0x33, r24	; 51
	MCUCR |= (3<<5); //set BODSE and BODS at the same time 
     832:	85 b7       	in	r24, 0x35	; 53
     834:	80 66       	ori	r24, 0x60	; 96
     836:	85 bf       	out	0x35, r24	; 53
	MCUCR = (MCUCR&~(1<<5))|(1<<6);//set BODS clera BODSE at the same time
     838:	85 b7       	in	r24, 0x35	; 53
     83a:	8f 79       	andi	r24, 0x9F	; 159
     83c:	80 64       	ori	r24, 0x40	; 64
     83e:	85 bf       	out	0x35, r24	; 53
	__asm__ __volatile__("sleep");
     840:	88 95       	sleep

	/* Disable BOD and put CPU to Sleep */
	sleep_bod_disable();
     842:	85 b7       	in	r24, 0x35	; 53
     844:	80 66       	ori	r24, 0x60	; 96
     846:	85 bf       	out	0x35, r24	; 53
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	85 bf       	out	0x35, r24	; 53
	/* Leave Sleep Mode */
	sleep_disable();
     84c:	83 b7       	in	r24, 0x33	; 51
     84e:	8e 7f       	andi	r24, 0xFE	; 254
     850:	83 bf       	out	0x33, r24	; 51
	/* Clear alarm on RTC */
	rtc_write_byte(~0b00000011, 0x0f);  
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	8c ef       	ldi	r24, 0xFC	; 252
     858:	6f e0       	ldi	r22, 0x0F	; 15
     85a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
	ADCSRA |= (1<<7);
     85e:	88 81       	ld	r24, Y
     860:	80 68       	ori	r24, 0x80	; 128
     862:	88 83       	st	Y, r24
	/* Regenerate Pinout */
	SonarPort |= (1<<SonarPin);
     864:	29 9a       	sbi	0x05, 1	; 5
	RTCPort |= (1<<RTCPin);
     866:	42 9a       	sbi	0x08, 2	; 8
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	93 ed       	ldi	r25, 0xD3	; 211
     86c:	a0 e3       	ldi	r26, 0x30	; 48
     86e:	81 50       	subi	r24, 0x01	; 1
     870:	90 40       	sbci	r25, 0x00	; 0
     872:	a0 40       	sbci	r26, 0x00	; 0
     874:	e1 f7       	brne	.-8      	; 0x86e <op_sleep+0x86>
     876:	00 c0       	rjmp	.+0      	; 0x878 <op_sleep+0x90>
     878:	00 00       	nop

	_delay_ms(1000);  
	printf("Back up runnning"); 
     87a:	00 d0       	rcall	.+0      	; 0x87c <op_sleep+0x94>
     87c:	8b e9       	ldi	r24, 0x9B	; 155
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	ad b7       	in	r26, 0x3d	; 61
     882:	be b7       	in	r27, 0x3e	; 62
     884:	12 96       	adiw	r26, 0x02	; 2
     886:	9c 93       	st	X, r25
     888:	8e 93       	st	-X, r24
     88a:	11 97       	sbiw	r26, 0x01	; 1
     88c:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0



}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <op_button>:
void op_button(void)
{
	app_reset();
     89a:	0e 94 97 03 	call	0x72e	; 0x72e <app_reset>
}
     89e:	08 95       	ret

000008a0 <op_mute>:

void op_mute(void)
{
	mute = !mute;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 91 6a 03 	lds	r25, 0x036A
     8a6:	91 11       	cpse	r25, r1
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	80 93 6a 03 	sts	0x036A, r24
}
     8ae:	08 95       	ret

000008b0 <debug>:

void debug(uint16_t *data,uint8_t distance)
{
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <debug+0xc>
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	8c 01       	movw	r16, r24
     8c2:	f6 2e       	mov	r15, r22
	uint8_t i,f;
	ds3231_get_temp_int(&i,&f);
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	be 01       	movw	r22, r28
     8ca:	6e 5f       	subi	r22, 0xFE	; 254
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	0e 94 46 0a 	call	0x148c	; 0x148c <ds3231_get_temp_int>
	printf("%i,%i,%i,%i,%i\n",data[2],i,distance,data[0],data[1]);
     8d2:	8d b7       	in	r24, 0x3d	; 61
     8d4:	9e b7       	in	r25, 0x3e	; 62
     8d6:	0c 97       	sbiw	r24, 0x0c	; 12
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	9e bf       	out	0x3e, r25	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	8d bf       	out	0x3d, r24	; 61
     8e2:	ed b7       	in	r30, 0x3d	; 61
     8e4:	fe b7       	in	r31, 0x3e	; 62
     8e6:	31 96       	adiw	r30, 0x01	; 1
     8e8:	8c ea       	ldi	r24, 0xAC	; 172
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	ad b7       	in	r26, 0x3d	; 61
     8ee:	be b7       	in	r27, 0x3e	; 62
     8f0:	12 96       	adiw	r26, 0x02	; 2
     8f2:	9c 93       	st	X, r25
     8f4:	8e 93       	st	-X, r24
     8f6:	11 97       	sbiw	r26, 0x01	; 1
     8f8:	d8 01       	movw	r26, r16
     8fa:	14 96       	adiw	r26, 0x04	; 4
     8fc:	8d 91       	ld	r24, X+
     8fe:	9c 91       	ld	r25, X
     900:	15 97       	sbiw	r26, 0x05	; 5
     902:	93 83       	std	Z+3, r25	; 0x03
     904:	82 83       	std	Z+2, r24	; 0x02
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	84 83       	std	Z+4, r24	; 0x04
     90a:	15 82       	std	Z+5, r1	; 0x05
     90c:	f6 82       	std	Z+6, r15	; 0x06
     90e:	17 82       	std	Z+7, r1	; 0x07
     910:	8d 91       	ld	r24, X+
     912:	9c 91       	ld	r25, X
     914:	11 97       	sbiw	r26, 0x01	; 1
     916:	91 87       	std	Z+9, r25	; 0x09
     918:	80 87       	std	Z+8, r24	; 0x08
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	8d 91       	ld	r24, X+
     91e:	9c 91       	ld	r25, X
     920:	13 97       	sbiw	r26, 0x03	; 3
     922:	93 87       	std	Z+11, r25	; 0x0b
     924:	82 87       	std	Z+10, r24	; 0x0a
     926:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     92a:	8d b7       	in	r24, 0x3d	; 61
     92c:	9e b7       	in	r25, 0x3e	; 62
     92e:	0c 96       	adiw	r24, 0x0c	; 12
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	9e bf       	out	0x3e, r25	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	8d bf       	out	0x3d, r24	; 61
}
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	08 95       	ret

0000094a <op_normal>:
	printf("Leaving Configuration menue");
}

/* Collect continuosly data */
void op_normal(void)
{
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
	get_raw_data(&data_carriage);
     94e:	c0 e7       	ldi	r28, 0x70	; 112
     950:	d3 e0       	ldi	r29, 0x03	; 3
     952:	ce 01       	movw	r24, r28
     954:	0e 94 cb 01 	call	0x396	; 0x396 <get_raw_data>
	//printf("%i %i %i\n",data_carriage[0],data_carriage[1], data_carriage[2]);
	
	/* Measure TOF + Distance */
	send_pulse();
     958:	0e 94 c7 00 	call	0x18e	; 0x18e <send_pulse>
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	9d ee       	ldi	r25, 0xED	; 237
     960:	a2 e0       	ldi	r26, 0x02	; 2
     962:	81 50       	subi	r24, 0x01	; 1
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	a0 40       	sbci	r26, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <op_normal+0x18>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <op_normal+0x22>
     96c:	00 00       	nop
	_delay_ms(60);
	distance = calc_distance(get_temp());
     96e:	0e 94 a9 01 	call	0x352	; 0x352 <get_temp>
     972:	0e 94 ed 00 	call	0x1da	; 0x1da <calc_distance>
     976:	68 2f       	mov	r22, r24
     978:	80 93 69 03 	sts	0x0369, r24
	
	/* Check batteries and give alarm if nec. */
	//send_package(data,distance);
	debug(data_carriage, distance);
     97c:	ce 01       	movw	r24, r28
     97e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <debug>
	t = rtc_get_time();
     982:	0e 94 bb 08 	call	0x1176	; 0x1176 <rtc_get_time>
     986:	90 93 6c 03 	sts	0x036C, r25
     98a:	80 93 6b 03 	sts	0x036B, r24
	rtc_write_byte(~0b00000011, 0x0f);
     98e:	8c ef       	ldi	r24, 0xFC	; 252
     990:	6f e0       	ldi	r22, 0x0F	; 15
     992:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <send_package>:
	ds3231_get_temp_int(&i,&f);
	printf("%i,%i,%i,%i,%i\n",data[2],i,distance,data[0],data[1]);
}

void send_package(uint32_t *batteries, uint8_t distance)
{
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	16 2f       	mov	r17, r22
	int i=0;
	if(mute)
     9a6:	80 91 6a 03 	lds	r24, 0x036A
     9aa:	88 23       	and	r24, r24
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <send_package+0x14>
     9ae:	44 c0       	rjmp	.+136    	; 0xa38 <send_package+0x9c>
	{
	for(i=0; i<2;i++)
		{
			if(batteries[i] < min_voltages[i])
     9b0:	80 91 e9 01 	lds	r24, 0x01E9
     9b4:	90 91 ea 01 	lds	r25, 0x01EA
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	28 81       	ld	r18, Y
     9be:	39 81       	ldd	r19, Y+1	; 0x01
     9c0:	4a 81       	ldd	r20, Y+2	; 0x02
     9c2:	5b 81       	ldd	r21, Y+3	; 0x03
     9c4:	28 17       	cp	r18, r24
     9c6:	39 07       	cpc	r19, r25
     9c8:	4a 07       	cpc	r20, r26
     9ca:	5b 07       	cpc	r21, r27
     9cc:	a0 f4       	brcc	.+40     	; 0x9f6 <send_package+0x5a>
				printf("Low Voltage Alert for Battery %i",i);
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <send_package+0x34>
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <send_package+0x36>
     9d2:	8c eb       	ldi	r24, 0xBC	; 188
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	ad b7       	in	r26, 0x3d	; 61
     9d8:	be b7       	in	r27, 0x3e	; 62
     9da:	12 96       	adiw	r26, 0x02	; 2
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	11 97       	sbiw	r26, 0x01	; 1
     9e2:	14 96       	adiw	r26, 0x04	; 4
     9e4:	1c 92       	st	X, r1
     9e6:	1e 92       	st	-X, r1
     9e8:	13 97       	sbiw	r26, 0x03	; 3
     9ea:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
	int i=0;
	if(mute)
	{
	for(i=0; i<2;i++)
		{
			if(batteries[i] < min_voltages[i])
     9f6:	80 91 eb 01 	lds	r24, 0x01EB
     9fa:	90 91 ec 01 	lds	r25, 0x01EC
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	2c 81       	ldd	r18, Y+4	; 0x04
     a04:	3d 81       	ldd	r19, Y+5	; 0x05
     a06:	4e 81       	ldd	r20, Y+6	; 0x06
     a08:	5f 81       	ldd	r21, Y+7	; 0x07
     a0a:	28 17       	cp	r18, r24
     a0c:	39 07       	cpc	r19, r25
     a0e:	4a 07       	cpc	r20, r26
     a10:	5b 07       	cpc	r21, r27
     a12:	90 f4       	brcc	.+36     	; 0xa38 <send_package+0x9c>
				printf("Low Voltage Alert for Battery %i",i);
     a14:	00 d0       	rcall	.+0      	; 0xa16 <send_package+0x7a>
     a16:	00 d0       	rcall	.+0      	; 0xa18 <send_package+0x7c>
     a18:	8c eb       	ldi	r24, 0xBC	; 188
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	ed b7       	in	r30, 0x3d	; 61
     a1e:	fe b7       	in	r31, 0x3e	; 62
     a20:	92 83       	std	Z+2, r25	; 0x02
     a22:	81 83       	std	Z+1, r24	; 0x01
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	94 83       	std	Z+4, r25	; 0x04
     a2a:	83 83       	std	Z+3, r24	; 0x03
     a2c:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
		}
	}
	printf("Distance:%i",(int)distance);
     a38:	00 d0       	rcall	.+0      	; 0xa3a <send_package+0x9e>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <send_package+0xa0>
     a3c:	ed b7       	in	r30, 0x3d	; 61
     a3e:	fe b7       	in	r31, 0x3e	; 62
     a40:	31 96       	adiw	r30, 0x01	; 1
     a42:	8d ed       	ldi	r24, 0xDD	; 221
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	ad b7       	in	r26, 0x3d	; 61
     a48:	be b7       	in	r27, 0x3e	; 62
     a4a:	12 96       	adiw	r26, 0x02	; 2
     a4c:	9c 93       	st	X, r25
     a4e:	8e 93       	st	-X, r24
     a50:	11 97       	sbiw	r26, 0x01	; 1
     a52:	12 83       	std	Z+2, r17	; 0x02
     a54:	13 82       	std	Z+3, r1	; 0x03
     a56:	0e 94 96 14 	call	0x292c	; 0x292c <printf>
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	08 95       	ret

00000a6a <onReceiveService>:
  return value;
}

// behind the scenes function that is called when data is received
void onReceiveService(uint8_t* inBytes, int numBytes)
{
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	9c 01       	movw	r18, r24
     a70:	cb 01       	movw	r24, r22
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
     a72:	e0 91 2f 04 	lds	r30, 0x042F
     a76:	f0 91 30 04 	lds	r31, 0x0430
     a7a:	30 97       	sbiw	r30, 0x00	; 0
     a7c:	d9 f0       	breq	.+54     	; 0xab4 <onReceiveService+0x4a>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
     a7e:	50 91 76 03 	lds	r21, 0x0376
     a82:	40 91 77 03 	lds	r20, 0x0377
     a86:	54 17       	cp	r21, r20
     a88:	a8 f0       	brcs	.+42     	; 0xab4 <onReceiveService+0x4a>
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <onReceiveService+0x36>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    rxBuffer[i] = inBytes[i];    
     a8e:	da 01       	movw	r26, r20
     a90:	a1 51       	subi	r26, 0x11	; 17
     a92:	bc 4f       	sbci	r27, 0xFC	; 252
     a94:	42 0f       	add	r20, r18
     a96:	53 1f       	adc	r21, r19
     a98:	ea 01       	movw	r28, r20
     a9a:	48 81       	ld	r20, Y
     a9c:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
     aa0:	46 2f       	mov	r20, r22
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	48 17       	cp	r20, r24
     aa6:	59 07       	cpc	r21, r25
     aa8:	94 f3       	brlt	.-28     	; 0xa8e <onReceiveService+0x24>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
     aaa:	10 92 76 03 	sts	0x0376, r1
  rxBufferLength = numBytes;
     aae:	80 93 77 03 	sts	0x0377, r24
  // alert user program
  user_onReceive(numBytes);
     ab2:	09 95       	icall
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <onRequestService>:

// behind the scenes function that is called when data is requested
void onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
     aba:	e0 91 ed 03 	lds	r30, 0x03ED
     abe:	f0 91 ee 03 	lds	r31, 0x03EE
     ac2:	30 97       	sbiw	r30, 0x00	; 0
     ac4:	29 f0       	breq	.+10     	; 0xad0 <onRequestService+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
     ac6:	10 92 79 03 	sts	0x0379, r1
  txBufferLength = 0;
     aca:	10 92 7a 03 	sts	0x037A, r1
  // alert user program
  user_onRequest();
     ace:	09 95       	icall
     ad0:	08 95       	ret

00000ad2 <twi_init_master>:
void onRequestService(void);
void onReceiveService(uint8_t*, int);

void twi_init_master(void)
{
  rxBufferIndex = 0;
     ad2:	10 92 76 03 	sts	0x0376, r1
  rxBufferLength = 0;
     ad6:	10 92 77 03 	sts	0x0377, r1

  txBufferIndex = 0;
     ada:	10 92 79 03 	sts	0x0379, r1
  txBufferLength = 0;
     ade:	10 92 7a 03 	sts	0x037A, r1

  twi_init();
     ae2:	0e 94 21 06 	call	0xc42	; 0xc42 <twi_init>
}
     ae6:	08 95       	ret

00000ae8 <twi_init_slave>:

void twi_init_slave(uint8_t address)
{
  twi_setAddress(address);
     ae8:	0e 94 32 06 	call	0xc64	; 0xc64 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
     aec:	8d e5       	ldi	r24, 0x5D	; 93
     aee:	95 e0       	ldi	r25, 0x05	; 5
     af0:	0e 94 cb 06 	call	0xd96	; 0xd96 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
     af4:	85 e3       	ldi	r24, 0x35	; 53
     af6:	95 e0       	ldi	r25, 0x05	; 5
     af8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <twi_attachSlaveRxEvent>
  twi_init_master();
     afc:	0e 94 69 05 	call	0xad2	; 0xad2 <twi_init_master>
}
     b00:	08 95       	ret

00000b02 <twi_request_from>:

uint8_t twi_request_from(uint8_t address, uint8_t quantity)
{
     b02:	46 2f       	mov	r20, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
     b04:	61 32       	cpi	r22, 0x21	; 33
     b06:	08 f0       	brcs	.+2      	; 0xb0a <twi_request_from+0x8>
     b08:	40 e2       	ldi	r20, 0x20	; 32
     b0a:	6f ee       	ldi	r22, 0xEF	; 239
     b0c:	73 e0       	ldi	r23, 0x03	; 3
     b0e:	0e 94 36 06 	call	0xc6c	; 0xc6c <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     b12:	10 92 76 03 	sts	0x0376, r1
  rxBufferLength = read;
     b16:	80 93 77 03 	sts	0x0377, r24

  return read;
}
     b1a:	08 95       	ret

00000b1c <twi_begin_transmission>:

void twi_begin_transmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	90 93 7b 03 	sts	0x037B, r25
  // set address of targeted slave
  txAddress = address;
     b22:	80 93 78 03 	sts	0x0378, r24
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     b26:	10 92 79 03 	sts	0x0379, r1
  txBufferLength = 0;
     b2a:	10 92 7a 03 	sts	0x037A, r1
}
     b2e:	08 95       	ret

00000b30 <twi_end_transmission>:

uint8_t twi_end_transmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
     b30:	80 91 78 03 	lds	r24, 0x0378
     b34:	6f e0       	ldi	r22, 0x0F	; 15
     b36:	74 e0       	ldi	r23, 0x04	; 4
     b38:	40 91 7a 03 	lds	r20, 0x037A
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     b42:	10 92 79 03 	sts	0x0379, r1
  txBufferLength = 0;
     b46:	10 92 7a 03 	sts	0x037A, r1
  // indicate that we are done transmitting
  transmitting = 0;
     b4a:	10 92 7b 03 	sts	0x037B, r1
  return ret;
}
     b4e:	08 95       	ret

00000b50 <twi_send_byte>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void twi_send_byte(uint8_t data)
{
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	0f 92       	push	r0
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	89 83       	std	Y+1, r24	; 0x01
  if(transmitting){
     b5c:	80 91 7b 03 	lds	r24, 0x037B
     b60:	88 23       	and	r24, r24
     b62:	91 f0       	breq	.+36     	; 0xb88 <twi_send_byte+0x38>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     b64:	80 91 7a 03 	lds	r24, 0x037A
     b68:	80 32       	cpi	r24, 0x20	; 32
     b6a:	98 f4       	brcc	.+38     	; 0xb92 <twi_send_byte+0x42>
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     b6c:	80 91 79 03 	lds	r24, 0x0379
     b70:	e8 2f       	mov	r30, r24
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	e1 5f       	subi	r30, 0xF1	; 241
     b76:	fb 4f       	sbci	r31, 0xFB	; 251
     b78:	99 81       	ldd	r25, Y+1	; 0x01
     b7a:	90 83       	st	Z, r25
    ++txBufferIndex;
     b7c:	8f 5f       	subi	r24, 0xFF	; 255
     b7e:	80 93 79 03 	sts	0x0379, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     b82:	80 93 7a 03 	sts	0x037A, r24
     b86:	05 c0       	rjmp	.+10     	; 0xb92 <twi_send_byte+0x42>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	0e 94 ac 06 	call	0xd58	; 0xd58 <twi_transmit>
  }
}
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <twi_send>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void twi_send(uint8_t* data, uint8_t quantity)
{
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	1f 93       	push	r17
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	0f 92       	push	r0
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	18 2f       	mov	r17, r24
  if(transmitting){
     bac:	80 91 7b 03 	lds	r24, 0x037B
     bb0:	88 23       	and	r24, r24
     bb2:	81 f0       	breq	.+32     	; 0xbd4 <twi_send+0x3a>
     bb4:	e1 2f       	mov	r30, r17
     bb6:	f9 2f       	mov	r31, r25
     bb8:	7f 01       	movw	r14, r30
     bba:	07 c0       	rjmp	.+14     	; 0xbca <twi_send+0x30>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
     twi_send_byte(data[i]);
     bbc:	f7 01       	movw	r30, r14
     bbe:	81 91       	ld	r24, Z+
     bc0:	7f 01       	movw	r14, r30
     bc2:	69 83       	std	Y+1, r22	; 0x01
     bc4:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
     bc8:	69 81       	ldd	r22, Y+1	; 0x01
// or after beginTransmission(address)
void twi_send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
     bca:	8e 2d       	mov	r24, r14
     bcc:	81 1b       	sub	r24, r17
     bce:	86 17       	cp	r24, r22
     bd0:	a8 f3       	brcs	.-22     	; 0xbbc <twi_send+0x22>
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <twi_send+0x40>
     twi_send_byte(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     bd4:	81 2f       	mov	r24, r17
     bd6:	0e 94 ac 06 	call	0xd58	; 0xd58 <twi_transmit>
  }
}
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	1f 91       	pop	r17
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	08 95       	ret

00000be8 <twi_send_char>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void twi_send_char(char* data)
{
  twi_send((uint8_t*)data, strlen(data));
     be8:	dc 01       	movw	r26, r24
     bea:	0d 90       	ld	r0, X+
     bec:	00 20       	and	r0, r0
     bee:	e9 f7       	brne	.-6      	; 0xbea <twi_send_char+0x2>
     bf0:	bd 01       	movw	r22, r26
     bf2:	61 50       	subi	r22, 0x01	; 1
     bf4:	70 40       	sbci	r23, 0x00	; 0
     bf6:	68 1b       	sub	r22, r24
     bf8:	79 0b       	sbc	r23, r25
     bfa:	0e 94 cd 05 	call	0xb9a	; 0xb9a <twi_send>
}
     bfe:	08 95       	ret

00000c00 <twi_available>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t twi_available(void)
{
  return rxBufferLength - rxBufferIndex;
     c00:	80 91 77 03 	lds	r24, 0x0377
     c04:	90 91 76 03 	lds	r25, 0x0376
}
     c08:	89 1b       	sub	r24, r25
     c0a:	08 95       	ret

00000c0c <twi_receive>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     c0c:	90 91 76 03 	lds	r25, 0x0376
     c10:	80 91 77 03 	lds	r24, 0x0377
     c14:	98 17       	cp	r25, r24
     c16:	48 f4       	brcc	.+18     	; 0xc2a <twi_receive+0x1e>
    value = rxBuffer[rxBufferIndex];
     c18:	e9 2f       	mov	r30, r25
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	e1 51       	subi	r30, 0x11	; 17
     c1e:	fc 4f       	sbci	r31, 0xFC	; 252
     c20:	80 81       	ld	r24, Z
    ++rxBufferIndex;
     c22:	9f 5f       	subi	r25, 0xFF	; 255
     c24:	90 93 76 03 	sts	0x0376, r25
     c28:	08 95       	ret
// or after requestFrom(address, numBytes)
uint8_t twi_receive(void)
{
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
     c2a:	80 e0       	ldi	r24, 0x00	; 0
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     c2c:	08 95       	ret

00000c2e <twi_set_on_receive>:
}

// sets function called on slave write
void twi_set_on_receive( void (*function)(int) )
{
  user_onReceive = function;
     c2e:	90 93 30 04 	sts	0x0430, r25
     c32:	80 93 2f 04 	sts	0x042F, r24
}
     c36:	08 95       	ret

00000c38 <twi_set_on_request>:

// sets function called on slave read
void twi_set_on_request( void (*function)(void) )
{
  user_onRequest = function;
     c38:	90 93 ee 03 	sts	0x03EE, r25
     c3c:	80 93 ed 03 	sts	0x03ED, r24
}
     c40:	08 95       	ret

00000c42 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     c42:	10 92 a0 03 	sts	0x03A0, r1
    //sbi(PORTD, 0);
    //sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     c46:	e9 eb       	ldi	r30, 0xB9	; 185
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     c50:	80 81       	ld	r24, Z
     c52:	8d 7f       	andi	r24, 0xFD	; 253
     c54:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
     c56:	88 e4       	ldi	r24, 0x48	; 72
     c58:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     c5c:	85 e4       	ldi	r24, 0x45	; 69
     c5e:	80 93 bc 00 	sts	0x00BC, r24
}
     c62:	08 95       	ret

00000c64 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     c64:	88 0f       	add	r24, r24
     c66:	80 93 ba 00 	sts	0x00BA, r24
}
     c6a:	08 95       	ret

00000c6c <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     c6c:	41 32       	cpi	r20, 0x21	; 33
     c6e:	88 f5       	brcc	.+98     	; 0xcd2 <twi_readFrom+0x66>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     c70:	90 91 a0 03 	lds	r25, 0x03A0
     c74:	99 23       	and	r25, r25
     c76:	e1 f7       	brne	.-8      	; 0xc70 <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	90 93 a0 03 	sts	0x03A0, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	90 93 9f 03 	sts	0x039F, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     c84:	10 92 7d 03 	sts	0x037D, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     c88:	94 2f       	mov	r25, r20
     c8a:	91 50       	subi	r25, 0x01	; 1
     c8c:	90 93 7e 03 	sts	0x037E, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
     c90:	88 0f       	add	r24, r24
     c92:	81 60       	ori	r24, 0x01	; 1
     c94:	80 93 7c 03 	sts	0x037C, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     c98:	85 ee       	ldi	r24, 0xE5	; 229
     c9a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     c9e:	80 91 a0 03 	lds	r24, 0x03A0
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	e1 f3       	breq	.-8      	; 0xc9e <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
     ca6:	80 91 7d 03 	lds	r24, 0x037D
     caa:	84 17       	cp	r24, r20
     cac:	10 f4       	brcc	.+4      	; 0xcb2 <twi_readFrom+0x46>
    length = twi_masterBufferIndex;
     cae:	40 91 7d 03 	lds	r20, 0x037D
     cb2:	ef e7       	ldi	r30, 0x7F	; 127
     cb4:	f3 e0       	ldi	r31, 0x03	; 3
     cb6:	26 2f       	mov	r18, r22
     cb8:	37 2f       	mov	r19, r23
     cba:	d9 01       	movw	r26, r18
 * Input    address: 7bit i2c device address
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
     cbc:	24 2f       	mov	r18, r20
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	2e 0f       	add	r18, r30
     cc2:	3f 1f       	adc	r19, r31

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <twi_readFrom+0x5e>
    data[i] = twi_masterBuffer[i];
     cc6:	81 91       	ld	r24, Z+
     cc8:	8d 93       	st	X+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     cca:	e2 17       	cp	r30, r18
     ccc:	f3 07       	cpc	r31, r19
     cce:	d9 f7       	brne	.-10     	; 0xcc6 <twi_readFrom+0x5a>
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <twi_readFrom+0x68>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
     cd2:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     cd4:	84 2f       	mov	r24, r20
     cd6:	08 95       	ret

00000cd8 <twi_writeTo>:
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     cd8:	41 32       	cpi	r20, 0x21	; 33
     cda:	b0 f5       	brcc	.+108    	; 0xd48 <twi_writeTo+0x70>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     cdc:	90 91 a0 03 	lds	r25, 0x03A0
     ce0:	99 23       	and	r25, r25
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <twi_writeTo+0x4>
    continue;
  }
  twi_state = TWI_MTX;
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	90 93 a0 03 	sts	0x03A0, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	90 93 9f 03 	sts	0x039F, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     cf0:	10 92 7d 03 	sts	0x037D, r1
  twi_masterBufferLength = length;
     cf4:	40 93 7e 03 	sts	0x037E, r20
     cf8:	db 01       	movw	r26, r22
     cfa:	ef e7       	ldi	r30, 0x7F	; 127
     cfc:	f3 e0       	ldi	r31, 0x03	; 3
 *          1 .. length to long for buffer
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	4e 0f       	add	r20, r30
     d02:	5f 1f       	adc	r21, r31
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <twi_writeTo+0x32>
    twi_masterBuffer[i] = data[i];
     d06:	9d 91       	ld	r25, X+
     d08:	91 93       	st	Z+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     d0a:	e4 17       	cp	r30, r20
     d0c:	f5 07       	cpc	r31, r21
     d0e:	d9 f7       	brne	.-10     	; 0xd06 <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	80 93 7c 03 	sts	0x037C, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     d1a:	85 ee       	ldi	r24, 0xE5	; 229
     d1c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     d20:	22 23       	and	r18, r18
     d22:	21 f0       	breq	.+8      	; 0xd2c <twi_writeTo+0x54>
     d24:	80 91 a0 03 	lds	r24, 0x03A0
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	e1 f3       	breq	.-8      	; 0xd24 <twi_writeTo+0x4c>
    continue;
  }
  
  if (twi_error == 0xFF)
     d2c:	80 91 9f 03 	lds	r24, 0x039F
     d30:	8f 3f       	cpi	r24, 0xFF	; 255
     d32:	61 f0       	breq	.+24     	; 0xd4c <twi_writeTo+0x74>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     d34:	80 91 9f 03 	lds	r24, 0x039F
     d38:	80 32       	cpi	r24, 0x20	; 32
     d3a:	51 f0       	breq	.+20     	; 0xd50 <twi_writeTo+0x78>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     d3c:	80 91 9f 03 	lds	r24, 0x039F
     d40:	80 33       	cpi	r24, 0x30	; 48
     d42:	41 f4       	brne	.+16     	; 0xd54 <twi_writeTo+0x7c>
    return 3;	// error: data send, nack received
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	08 95       	ret
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	08 95       	ret
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	08 95       	ret
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
     d54:	84 e0       	ldi	r24, 0x04	; 4
}
     d56:	08 95       	ret

00000d58 <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     d58:	61 32       	cpi	r22, 0x21	; 33
     d5a:	a0 f4       	brcc	.+40     	; 0xd84 <twi_transmit+0x2c>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     d5c:	20 91 a0 03 	lds	r18, 0x03A0
     d60:	24 30       	cpi	r18, 0x04	; 4
     d62:	91 f4       	brne	.+36     	; 0xd88 <twi_transmit+0x30>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     d64:	60 93 c5 03 	sts	0x03C5, r22
     d68:	dc 01       	movw	r26, r24
     d6a:	e8 ec       	ldi	r30, 0xC8	; 200
     d6c:	f3 e0       	ldi	r31, 0x03	; 3
 *          length: number of bytes in array
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(uint8_t* data, uint8_t length)
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	6e 0f       	add	r22, r30
     d72:	7f 1f       	adc	r23, r31
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <twi_transmit+0x22>
    twi_txBuffer[i] = data[i];
     d76:	8d 91       	ld	r24, X+
     d78:	81 93       	st	Z+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     d7a:	e6 17       	cp	r30, r22
     d7c:	f7 07       	cpc	r31, r23
     d7e:	d9 f7       	brne	.-10     	; 0xd76 <twi_transmit+0x1e>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
     d88:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     d8a:	08 95       	ret

00000d8c <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     d8c:	90 93 c3 03 	sts	0x03C3, r25
     d90:	80 93 c2 03 	sts	0x03C2, r24
}
     d94:	08 95       	ret

00000d96 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     d96:	90 93 c7 03 	sts	0x03C7, r25
     d9a:	80 93 c6 03 	sts	0x03C6, r24
}
     d9e:	08 95       	ret

00000da0 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     da0:	88 23       	and	r24, r24
     da2:	11 f0       	breq	.+4      	; 0xda8 <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     da4:	85 ec       	ldi	r24, 0xC5	; 197
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <twi_reply+0xa>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     da8:	85 e8       	ldi	r24, 0x85	; 133
     daa:	80 93 bc 00 	sts	0x00BC, r24
     dae:	08 95       	ret

00000db0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     db0:	85 ed       	ldi	r24, 0xD5	; 213
     db2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     db6:	80 91 bc 00 	lds	r24, 0x00BC
     dba:	84 fd       	sbrc	r24, 4
     dbc:	fc cf       	rjmp	.-8      	; 0xdb6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     dbe:	10 92 a0 03 	sts	0x03A0, r1
}
     dc2:	08 95       	ret

00000dc4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     dc4:	85 ec       	ldi	r24, 0xC5	; 197
     dc6:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     dca:	10 92 a0 03 	sts	0x03A0, r1
}
     dce:	08 95       	ret

00000dd0 <__vector_24>:

SIGNAL(TWI_vect)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	2f 93       	push	r18
     ddc:	3f 93       	push	r19
     dde:	4f 93       	push	r20
     de0:	5f 93       	push	r21
     de2:	6f 93       	push	r22
     de4:	7f 93       	push	r23
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
     dea:	af 93       	push	r26
     dec:	bf 93       	push	r27
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
  switch(TW_STATUS){
     df2:	80 91 b9 00 	lds	r24, 0x00B9
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	88 7f       	andi	r24, 0xF8	; 248
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	80 36       	cpi	r24, 0x60	; 96
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <__vector_24+0x34>
     e02:	c2 c0       	rjmp	.+388    	; 0xf88 <__vector_24+0x1b8>
     e04:	81 36       	cpi	r24, 0x61	; 97
     e06:	91 05       	cpc	r25, r1
     e08:	e4 f5       	brge	.+120    	; 0xe82 <__vector_24+0xb2>
     e0a:	88 32       	cpi	r24, 0x28	; 40
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <__vector_24+0x42>
     e10:	7e c0       	rjmp	.+252    	; 0xf0e <__vector_24+0x13e>
     e12:	89 32       	cpi	r24, 0x29	; 41
     e14:	91 05       	cpc	r25, r1
     e16:	c4 f4       	brge	.+48     	; 0xe48 <__vector_24+0x78>
     e18:	80 31       	cpi	r24, 0x10	; 16
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <__vector_24+0x50>
     e1e:	72 c0       	rjmp	.+228    	; 0xf04 <__vector_24+0x134>
     e20:	81 31       	cpi	r24, 0x11	; 17
     e22:	91 05       	cpc	r25, r1
     e24:	44 f4       	brge	.+16     	; 0xe36 <__vector_24+0x66>
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	09 f4       	brne	.+2      	; 0xe2c <__vector_24+0x5c>
     e2a:	13 c1       	rjmp	.+550    	; 0x1052 <__vector_24+0x282>
     e2c:	88 30       	cpi	r24, 0x08	; 8
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f0       	breq	.+2      	; 0xe34 <__vector_24+0x64>
     e32:	13 c1       	rjmp	.+550    	; 0x105a <__vector_24+0x28a>
     e34:	67 c0       	rjmp	.+206    	; 0xf04 <__vector_24+0x134>
     e36:	88 31       	cpi	r24, 0x18	; 24
     e38:	91 05       	cpc	r25, r1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <__vector_24+0x6e>
     e3c:	68 c0       	rjmp	.+208    	; 0xf0e <__vector_24+0x13e>
     e3e:	80 32       	cpi	r24, 0x20	; 32
     e40:	91 05       	cpc	r25, r1
     e42:	09 f0       	breq	.+2      	; 0xe46 <__vector_24+0x76>
     e44:	0a c1       	rjmp	.+532    	; 0x105a <__vector_24+0x28a>
     e46:	78 c0       	rjmp	.+240    	; 0xf38 <__vector_24+0x168>
     e48:	80 34       	cpi	r24, 0x40	; 64
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <__vector_24+0x80>
     e4e:	8a c0       	rjmp	.+276    	; 0xf64 <__vector_24+0x194>
     e50:	81 34       	cpi	r24, 0x41	; 65
     e52:	91 05       	cpc	r25, r1
     e54:	4c f4       	brge	.+18     	; 0xe68 <__vector_24+0x98>
     e56:	80 33       	cpi	r24, 0x30	; 48
     e58:	91 05       	cpc	r25, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <__vector_24+0x8e>
     e5c:	6f c0       	rjmp	.+222    	; 0xf3c <__vector_24+0x16c>
     e5e:	88 33       	cpi	r24, 0x38	; 56
     e60:	91 05       	cpc	r25, r1
     e62:	09 f0       	breq	.+2      	; 0xe66 <__vector_24+0x96>
     e64:	fa c0       	rjmp	.+500    	; 0x105a <__vector_24+0x28a>
     e66:	6e c0       	rjmp	.+220    	; 0xf44 <__vector_24+0x174>
     e68:	80 35       	cpi	r24, 0x50	; 80
     e6a:	91 05       	cpc	r25, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <__vector_24+0xa0>
     e6e:	6e c0       	rjmp	.+220    	; 0xf4c <__vector_24+0x17c>
     e70:	88 35       	cpi	r24, 0x58	; 88
     e72:	91 05       	cpc	r25, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <__vector_24+0xa8>
     e76:	7b c0       	rjmp	.+246    	; 0xf6e <__vector_24+0x19e>
     e78:	88 34       	cpi	r24, 0x48	; 72
     e7a:	91 05       	cpc	r25, r1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_24+0xb0>
     e7e:	ed c0       	rjmp	.+474    	; 0x105a <__vector_24+0x28a>
     e80:	ea c0       	rjmp	.+468    	; 0x1056 <__vector_24+0x286>
     e82:	88 39       	cpi	r24, 0x98	; 152
     e84:	91 05       	cpc	r25, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <__vector_24+0xba>
     e88:	da c0       	rjmp	.+436    	; 0x103e <__vector_24+0x26e>
     e8a:	89 39       	cpi	r24, 0x99	; 153
     e8c:	91 05       	cpc	r25, r1
     e8e:	ec f4       	brge	.+58     	; 0xeca <__vector_24+0xfa>
     e90:	88 37       	cpi	r24, 0x78	; 120
     e92:	91 05       	cpc	r25, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <__vector_24+0xc8>
     e96:	78 c0       	rjmp	.+240    	; 0xf88 <__vector_24+0x1b8>
     e98:	89 37       	cpi	r24, 0x79	; 121
     e9a:	91 05       	cpc	r25, r1
     e9c:	4c f4       	brge	.+18     	; 0xeb0 <__vector_24+0xe0>
     e9e:	88 36       	cpi	r24, 0x68	; 104
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <__vector_24+0xd6>
     ea4:	71 c0       	rjmp	.+226    	; 0xf88 <__vector_24+0x1b8>
     ea6:	80 37       	cpi	r24, 0x70	; 112
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f0       	breq	.+2      	; 0xeae <__vector_24+0xde>
     eac:	d6 c0       	rjmp	.+428    	; 0x105a <__vector_24+0x28a>
     eae:	6c c0       	rjmp	.+216    	; 0xf88 <__vector_24+0x1b8>
     eb0:	88 38       	cpi	r24, 0x88	; 136
     eb2:	91 05       	cpc	r25, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <__vector_24+0xe8>
     eb6:	c3 c0       	rjmp	.+390    	; 0x103e <__vector_24+0x26e>
     eb8:	80 39       	cpi	r24, 0x90	; 144
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <__vector_24+0xf0>
     ebe:	6a c0       	rjmp	.+212    	; 0xf94 <__vector_24+0x1c4>
     ec0:	80 38       	cpi	r24, 0x80	; 128
     ec2:	91 05       	cpc	r25, r1
     ec4:	09 f0       	breq	.+2      	; 0xec8 <__vector_24+0xf8>
     ec6:	c9 c0       	rjmp	.+402    	; 0x105a <__vector_24+0x28a>
     ec8:	65 c0       	rjmp	.+202    	; 0xf94 <__vector_24+0x1c4>
     eca:	80 3b       	cpi	r24, 0xB0	; 176
     ecc:	91 05       	cpc	r25, r1
     ece:	09 f4       	brne	.+2      	; 0xed2 <__vector_24+0x102>
     ed0:	8e c0       	rjmp	.+284    	; 0xfee <__vector_24+0x21e>
     ed2:	81 3b       	cpi	r24, 0xB1	; 177
     ed4:	91 05       	cpc	r25, r1
     ed6:	4c f4       	brge	.+18     	; 0xeea <__vector_24+0x11a>
     ed8:	80 3a       	cpi	r24, 0xA0	; 160
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <__vector_24+0x110>
     ede:	6c c0       	rjmp	.+216    	; 0xfb8 <__vector_24+0x1e8>
     ee0:	88 3a       	cpi	r24, 0xA8	; 168
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f0       	breq	.+2      	; 0xee8 <__vector_24+0x118>
     ee6:	b9 c0       	rjmp	.+370    	; 0x105a <__vector_24+0x28a>
     ee8:	82 c0       	rjmp	.+260    	; 0xfee <__vector_24+0x21e>
     eea:	80 3c       	cpi	r24, 0xC0	; 192
     eec:	91 05       	cpc	r25, r1
     eee:	09 f4       	brne	.+2      	; 0xef2 <__vector_24+0x122>
     ef0:	aa c0       	rjmp	.+340    	; 0x1046 <__vector_24+0x276>
     ef2:	88 3c       	cpi	r24, 0xC8	; 200
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <__vector_24+0x12a>
     ef8:	a6 c0       	rjmp	.+332    	; 0x1046 <__vector_24+0x276>
     efa:	88 3b       	cpi	r24, 0xB8	; 184
     efc:	91 05       	cpc	r25, r1
     efe:	09 f0       	breq	.+2      	; 0xf02 <__vector_24+0x132>
     f00:	ac c0       	rjmp	.+344    	; 0x105a <__vector_24+0x28a>
     f02:	8a c0       	rjmp	.+276    	; 0x1018 <__vector_24+0x248>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     f04:	80 91 7c 03 	lds	r24, 0x037C
     f08:	80 93 bb 00 	sts	0x00BB, r24
     f0c:	13 c0       	rjmp	.+38     	; 0xf34 <__vector_24+0x164>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     f0e:	90 91 7d 03 	lds	r25, 0x037D
     f12:	80 91 7e 03 	lds	r24, 0x037E
     f16:	98 17       	cp	r25, r24
     f18:	08 f0       	brcs	.+2      	; 0xf1c <__vector_24+0x14c>
     f1a:	9d c0       	rjmp	.+314    	; 0x1056 <__vector_24+0x286>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     f1c:	80 91 7d 03 	lds	r24, 0x037D
     f20:	e8 2f       	mov	r30, r24
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	e1 58       	subi	r30, 0x81	; 129
     f26:	fc 4f       	sbci	r31, 0xFC	; 252
     f28:	90 81       	ld	r25, Z
     f2a:	90 93 bb 00 	sts	0x00BB, r25
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 93 7d 03 	sts	0x037D, r24
        twi_reply(1);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	84 c0       	rjmp	.+264    	; 0x1040 <__vector_24+0x270>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     f38:	80 e2       	ldi	r24, 0x20	; 32
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <__vector_24+0x16e>
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	80 93 9f 03 	sts	0x039F, r24
     f42:	89 c0       	rjmp	.+274    	; 0x1056 <__vector_24+0x286>
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     f44:	88 e3       	ldi	r24, 0x38	; 56
     f46:	80 93 9f 03 	sts	0x039F, r24
     f4a:	4e c0       	rjmp	.+156    	; 0xfe8 <__vector_24+0x218>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     f4c:	80 91 7d 03 	lds	r24, 0x037D
     f50:	90 91 bb 00 	lds	r25, 0x00BB
     f54:	e8 2f       	mov	r30, r24
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	e1 58       	subi	r30, 0x81	; 129
     f5a:	fc 4f       	sbci	r31, 0xFC	; 252
     f5c:	90 83       	st	Z, r25
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	80 93 7d 03 	sts	0x037D, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     f64:	90 91 7d 03 	lds	r25, 0x037D
     f68:	80 91 7e 03 	lds	r24, 0x037E
     f6c:	65 c0       	rjmp	.+202    	; 0x1038 <__vector_24+0x268>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     f6e:	80 91 7d 03 	lds	r24, 0x037D
     f72:	90 91 bb 00 	lds	r25, 0x00BB
     f76:	e8 2f       	mov	r30, r24
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	e1 58       	subi	r30, 0x81	; 129
     f7c:	fc 4f       	sbci	r31, 0xFC	; 252
     f7e:	90 83       	st	Z, r25
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 7d 03 	sts	0x037D, r24
     f86:	67 c0       	rjmp	.+206    	; 0x1056 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	80 93 a0 03 	sts	0x03A0, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     f8e:	10 92 a1 03 	sts	0x03A1, r1
     f92:	d0 cf       	rjmp	.-96     	; 0xf34 <__vector_24+0x164>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     f94:	80 91 a1 03 	lds	r24, 0x03A1
     f98:	80 32       	cpi	r24, 0x20	; 32
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <__vector_24+0x1ce>
     f9c:	50 c0       	rjmp	.+160    	; 0x103e <__vector_24+0x26e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     f9e:	80 91 a1 03 	lds	r24, 0x03A1
     fa2:	90 91 bb 00 	lds	r25, 0x00BB
     fa6:	e8 2f       	mov	r30, r24
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	ee 55       	subi	r30, 0x5E	; 94
     fac:	fc 4f       	sbci	r31, 0xFC	; 252
     fae:	90 83       	st	Z, r25
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 a1 03 	sts	0x03A1, r24
     fb6:	be cf       	rjmp	.-132    	; 0xf34 <__vector_24+0x164>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     fb8:	80 91 a1 03 	lds	r24, 0x03A1
     fbc:	80 32       	cpi	r24, 0x20	; 32
     fbe:	30 f4       	brcc	.+12     	; 0xfcc <__vector_24+0x1fc>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     fc0:	e0 91 a1 03 	lds	r30, 0x03A1
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	ee 55       	subi	r30, 0x5E	; 94
     fc8:	fc 4f       	sbci	r31, 0xFC	; 252
     fca:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     fcc:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     fd0:	60 91 a1 03 	lds	r22, 0x03A1
     fd4:	e0 91 c2 03 	lds	r30, 0x03C2
     fd8:	f0 91 c3 03 	lds	r31, 0x03C3
     fdc:	82 ea       	ldi	r24, 0xA2	; 162
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     fe4:	10 92 a1 03 	sts	0x03A1, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     fe8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <twi_releaseBus>
      break;
     fec:	36 c0       	rjmp	.+108    	; 0x105a <__vector_24+0x28a>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	80 93 a0 03 	sts	0x03A0, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     ff4:	10 92 c4 03 	sts	0x03C4, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     ff8:	10 92 c5 03 	sts	0x03C5, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     ffc:	e0 91 c6 03 	lds	r30, 0x03C6
    1000:	f0 91 c7 03 	lds	r31, 0x03C7
    1004:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1006:	80 91 c5 03 	lds	r24, 0x03C5
    100a:	88 23       	and	r24, r24
    100c:	29 f4       	brne	.+10     	; 0x1018 <__vector_24+0x248>
        twi_txBufferLength = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 c5 03 	sts	0x03C5, r24
        twi_txBuffer[0] = 0x00;
    1014:	10 92 c8 03 	sts	0x03C8, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1018:	80 91 c4 03 	lds	r24, 0x03C4
    101c:	e8 2f       	mov	r30, r24
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	e8 53       	subi	r30, 0x38	; 56
    1022:	fc 4f       	sbci	r31, 0xFC	; 252
    1024:	90 81       	ld	r25, Z
    1026:	90 93 bb 00 	sts	0x00BB, r25
    102a:	8f 5f       	subi	r24, 0xFF	; 255
    102c:	80 93 c4 03 	sts	0x03C4, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1030:	90 91 c4 03 	lds	r25, 0x03C4
    1034:	80 91 c5 03 	lds	r24, 0x03C5
    1038:	98 17       	cp	r25, r24
    103a:	08 f4       	brcc	.+2      	; 0x103e <__vector_24+0x26e>
    103c:	7b cf       	rjmp	.-266    	; 0xf34 <__vector_24+0x164>
        twi_reply(1);
      }else{
        twi_reply(0);
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 d0 06 	call	0xda0	; 0xda0 <twi_reply>
    1044:	0a c0       	rjmp	.+20     	; 0x105a <__vector_24+0x28a>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 d0 06 	call	0xda0	; 0xda0 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    104c:	10 92 a0 03 	sts	0x03A0, r1
      break;
    1050:	04 c0       	rjmp	.+8      	; 0x105a <__vector_24+0x28a>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1052:	10 92 9f 03 	sts	0x039F, r1
      twi_stop();
    1056:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <twi_stop>
      break;
  }
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <dec2bcd>:
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodqi4>
    1082:	82 95       	swap	r24
    1084:	80 7f       	andi	r24, 0xF0	; 240
}
    1086:	89 0f       	add	r24, r25
    1088:	08 95       	ret

0000108a <bcd2dec>:

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
    108a:	98 2f       	mov	r25, r24
    108c:	92 95       	swap	r25
    108e:	9f 70       	andi	r25, 0x0F	; 15
    1090:	99 0f       	add	r25, r25
    1092:	29 2f       	mov	r18, r25
    1094:	22 0f       	add	r18, r18
    1096:	22 0f       	add	r18, r18
    1098:	29 0f       	add	r18, r25
    109a:	8f 70       	andi	r24, 0x0F	; 15
}
    109c:	82 0f       	add	r24, r18
    109e:	08 95       	ret

000010a0 <rtc_read_byte>:

uint8_t rtc_read_byte(uint8_t offset)
{
    10a0:	1f 93       	push	r17
    10a2:	18 2f       	mov	r17, r24
	twi_begin_transmission(RTC_ADDR);
    10a4:	88 e6       	ldi	r24, 0x68	; 104
    10a6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(offset);
    10aa:	81 2f       	mov	r24, r17
    10ac:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    10b0:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	twi_request_from(RTC_ADDR, 1);
    10b4:	88 e6       	ldi	r24, 0x68	; 104
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
	return twi_receive();
    10bc:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
}
    10c0:	1f 91       	pop	r17
    10c2:	08 95       	ret

000010c4 <rtc_write_byte>:

void rtc_write_byte(uint8_t b, uint8_t offset)
{
    10c4:	1f 93       	push	r17
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	18 2f       	mov	r17, r24
	twi_begin_transmission(RTC_ADDR);
    10d2:	88 e6       	ldi	r24, 0x68	; 104
    10d4:	69 83       	std	Y+1, r22	; 0x01
    10d6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(offset);
    10da:	69 81       	ldd	r22, Y+1	; 0x01
    10dc:	86 2f       	mov	r24, r22
    10de:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(b);
    10e2:	81 2f       	mov	r24, r17
    10e4:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    10e8:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
}
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	1f 91       	pop	r17
    10f4:	08 95       	ret

000010f6 <rtc_init>:

static bool s_is_ds1307 = false;
static bool s_is_ds3231 = false;

void rtc_init(void)
{
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
	// 2) Write a value to temperature register
	// 3) Read back the value
	//   equal to the one written: DS1307, write back saved value and return
	//   different from written:   DS3231
	
	uint8_t temp1 = rtc_read_byte(0x11);
    10fa:	81 e1       	ldi	r24, 0x11	; 17
    10fc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
    1100:	08 2f       	mov	r16, r24
	uint8_t temp2 = rtc_read_byte(0x12);
    1102:	82 e1       	ldi	r24, 0x12	; 18
    1104:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
    1108:	18 2f       	mov	r17, r24
	
	rtc_write_byte(0xee, 0x11);
    110a:	8e ee       	ldi	r24, 0xEE	; 238
    110c:	61 e1       	ldi	r22, 0x11	; 17
    110e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
	rtc_write_byte(0xdd, 0x12);
    1112:	8d ed       	ldi	r24, 0xDD	; 221
    1114:	62 e1       	ldi	r22, 0x12	; 18
    1116:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>

	if (rtc_read_byte(0x11) == 0xee && rtc_read_byte(0x12) == 0xdd) {
    111a:	81 e1       	ldi	r24, 0x11	; 17
    111c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
    1120:	8e 3e       	cpi	r24, 0xEE	; 238
    1122:	89 f4       	brne	.+34     	; 0x1146 <rtc_init+0x50>
    1124:	82 e1       	ldi	r24, 0x12	; 18
    1126:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
    112a:	8d 3d       	cpi	r24, 0xDD	; 221
    112c:	61 f4       	brne	.+24     	; 0x1146 <rtc_init+0x50>
		s_is_ds1307 = true;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 e8 03 	sts	0x03E8, r24
		// restore values
		rtc_write_byte(temp1, 0x11);
    1134:	80 2f       	mov	r24, r16
    1136:	61 e1       	ldi	r22, 0x11	; 17
    1138:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(temp2, 0x12);
    113c:	81 2f       	mov	r24, r17
    113e:	62 e1       	ldi	r22, 0x12	; 18
    1140:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
    1144:	03 c0       	rjmp	.+6      	; 0x114c <rtc_init+0x56>
	}
	else {
		s_is_ds3231 = true;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 e9 03 	sts	0x03E9, r24
	}
}
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <rtc_is_ds1307>:

// Autodetection
bool rtc_is_ds1307(void) { return s_is_ds1307; }
    1152:	80 91 e8 03 	lds	r24, 0x03E8
    1156:	08 95       	ret

00001158 <rtc_is_ds3231>:
bool rtc_is_ds3231(void) { return s_is_ds3231; }
    1158:	80 91 e9 03 	lds	r24, 0x03E9
    115c:	08 95       	ret

0000115e <rtc_set_ds1307>:

// Autodetection override
void rtc_set_ds1307(void) { s_is_ds1307 = true;   s_is_ds3231 = false; }
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 e8 03 	sts	0x03E8, r24
    1164:	10 92 e9 03 	sts	0x03E9, r1
    1168:	08 95       	ret

0000116a <rtc_set_ds3231>:
void rtc_set_ds3231(void) { s_is_ds1307 = false;  s_is_ds3231 = true;  }
    116a:	10 92 e8 03 	sts	0x03E8, r1
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 e9 03 	sts	0x03E9, r24
    1174:	08 95       	ret

00001176 <rtc_get_time>:

struct tm* rtc_get_time(void)
{
    1176:	df 92       	push	r13
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	29 97       	sbiw	r28, 0x09	; 9
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
	uint8_t rtc[9];
	uint8_t century = 0;

	// read 7 bytes starting from register 0
	// sec, min, hour, day-of-week, date, month, year
	twi_begin_transmission(RTC_ADDR);
    1194:	88 e6       	ldi	r24, 0x68	; 104
    1196:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0);
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    11a0:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	twi_request_from(RTC_ADDR, 7);
    11a4:	88 e6       	ldi	r24, 0x68	; 104
    11a6:	67 e0       	ldi	r22, 0x07	; 7
    11a8:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
    11ac:	8e 01       	movw	r16, r28
    11ae:	0f 5f       	subi	r16, 0xFF	; 255
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255

// Autodetection override
void rtc_set_ds1307(void) { s_is_ds1307 = true;   s_is_ds3231 = false; }
void rtc_set_ds3231(void) { s_is_ds1307 = false;  s_is_ds3231 = true;  }

struct tm* rtc_get_time(void)
    11b2:	28 e0       	ldi	r18, 0x08	; 8
    11b4:	e2 2e       	mov	r14, r18
    11b6:	f1 2c       	mov	r15, r1
    11b8:	ec 0e       	add	r14, r28
    11ba:	fd 1e       	adc	r15, r29
	twi_end_transmission();

	twi_request_from(RTC_ADDR, 7);

	for (uint8_t i = 0; i < 7; i++) {
		rtc[i] = twi_receive();
    11bc:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
    11c0:	f8 01       	movw	r30, r16
    11c2:	81 93       	st	Z+, r24
    11c4:	8f 01       	movw	r16, r30
	twi_send_byte(0x0);
	twi_end_transmission();

	twi_request_from(RTC_ADDR, 7);

	for (uint8_t i = 0; i < 7; i++) {
    11c6:	ee 15       	cp	r30, r14
    11c8:	ff 05       	cpc	r31, r15
    11ca:	c1 f7       	brne	.-16     	; 0x11bc <rtc_get_time+0x46>
		rtc[i] = twi_receive();
	}

	twi_end_transmission();
    11cc:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	// Clear clock halt bit from read data
	// This starts the clock for a DS1307, and has no effect for a DS3231
	rtc[0] &= ~(_BV(CH_BIT)); // clear bit
    11d0:	89 81       	ldd	r24, Y+1	; 0x01

	_tm.sec = bcd2dec(rtc[0]);
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    11d8:	80 93 31 04 	sts	0x0431, r24
    11dc:	10 92 32 04 	sts	0x0432, r1
	_tm.min = bcd2dec(rtc[1]);
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    11e6:	93 e3       	ldi	r25, 0x33	; 51
    11e8:	e9 2e       	mov	r14, r25
    11ea:	94 e0       	ldi	r25, 0x04	; 4
    11ec:	f9 2e       	mov	r15, r25
    11ee:	80 93 33 04 	sts	0x0433, r24
    11f2:	f7 01       	movw	r30, r14
    11f4:	11 82       	std	Z+1, r1	; 0x01
	_tm.hour = bcd2dec(rtc[2]);
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    11fc:	08 2f       	mov	r16, r24
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	10 93 36 04 	sts	0x0436, r17
    1204:	00 93 35 04 	sts	0x0435, r16
	_tm.mday = bcd2dec(rtc[4]);
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    120e:	80 93 37 04 	sts	0x0437, r24
    1212:	f7 01       	movw	r30, r14
    1214:	15 82       	std	Z+5, r1	; 0x05
	_tm.mon = bcd2dec(rtc[5] & 0x1F); // returns 1-12
    1216:	de 80       	ldd	r13, Y+6	; 0x06
    1218:	8d 2d       	mov	r24, r13
    121a:	8f 71       	andi	r24, 0x1F	; 31
    121c:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    1220:	80 93 39 04 	sts	0x0439, r24
    1224:	f7 01       	movw	r30, r14
    1226:	17 82       	std	Z+7, r1	; 0x07
	century = (rtc[5] & 0x80) >> 7;
	_tm.year = century == 1 ? 2000 + bcd2dec(rtc[6]) : 1900 + bcd2dec(rtc[6]); // year 0-99
    1228:	d7 fe       	sbrs	r13, 7
    122a:	07 c0       	rjmp	.+14     	; 0x123a <rtc_get_time+0xc4>
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	80 53       	subi	r24, 0x30	; 48
    1236:	98 4f       	sbci	r25, 0xF8	; 248
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <rtc_get_time+0xd0>
    123a:	8f 81       	ldd	r24, Y+7	; 0x07
    123c:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	84 59       	subi	r24, 0x94	; 148
    1244:	98 4f       	sbci	r25, 0xF8	; 248
    1246:	90 93 3c 04 	sts	0x043C, r25
    124a:	80 93 3b 04 	sts	0x043B, r24
	_tm.wday = bcd2dec(rtc[3]); // returns 1-7
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    1254:	80 93 3d 04 	sts	0x043D, r24
    1258:	10 92 3e 04 	sts	0x043E, r1

	if (_tm.hour == 0) {
    125c:	01 15       	cp	r16, r1
    125e:	11 05       	cpc	r17, r1
    1260:	29 f4       	brne	.+10     	; 0x126c <rtc_get_time+0xf6>
		_tm.twelveHour = 0;
    1262:	10 92 43 04 	sts	0x0443, r1
    1266:	10 92 42 04 	sts	0x0442, r1
    126a:	07 c0       	rjmp	.+14     	; 0x127a <rtc_get_time+0x104>
		_tm.am = 1;
	} else if (_tm.hour < 12) {
    126c:	0c 30       	cpi	r16, 0x0C	; 12
    126e:	11 05       	cpc	r17, r1
    1270:	44 f4       	brge	.+16     	; 0x1282 <rtc_get_time+0x10c>
		_tm.twelveHour = _tm.hour;
    1272:	10 93 43 04 	sts	0x0443, r17
    1276:	00 93 42 04 	sts	0x0442, r16
		_tm.am = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 41 04 	sts	0x0441, r24
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <rtc_get_time+0x11c>
	} else {
		_tm.twelveHour = _tm.hour - 12;
    1282:	0c 50       	subi	r16, 0x0C	; 12
    1284:	10 40       	sbci	r17, 0x00	; 0
    1286:	10 93 43 04 	sts	0x0443, r17
    128a:	00 93 42 04 	sts	0x0442, r16
		_tm.am = 0;
    128e:	10 92 41 04 	sts	0x0441, r1
	}

	return &_tm;
}
    1292:	81 e3       	ldi	r24, 0x31	; 49
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	29 96       	adiw	r28, 0x09	; 9
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	08 95       	ret

000012b2 <rtc_get_time_s>:

void rtc_get_time_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
{
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	29 97       	sbiw	r28, 0x09	; 9
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	4c 01       	movw	r8, r24
    12dc:	5b 01       	movw	r10, r22
    12de:	8a 01       	movw	r16, r20
	uint8_t rtc[9];

	// read 7 bytes starting from register 0
	// sec, min, hour, day-of-week, date, month, year
	twi_begin_transmission(RTC_ADDR);
    12e0:	88 e6       	ldi	r24, 0x68	; 104
    12e2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0);
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    12ec:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
	
	twi_request_from(RTC_ADDR, 7);
    12f0:	88 e6       	ldi	r24, 0x68	; 104
    12f2:	67 e0       	ldi	r22, 0x07	; 7
    12f4:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
    12f8:	7e 01       	movw	r14, r28
    12fa:	08 94       	sec
    12fc:	e1 1c       	adc	r14, r1
    12fe:	f1 1c       	adc	r15, r1
	}

	return &_tm;
}

void rtc_get_time_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
    1300:	38 e0       	ldi	r19, 0x08	; 8
    1302:	c3 2e       	mov	r12, r19
    1304:	d1 2c       	mov	r13, r1
    1306:	cc 0e       	add	r12, r28
    1308:	dd 1e       	adc	r13, r29
	twi_end_transmission();
	
	twi_request_from(RTC_ADDR, 7);
	
	for(uint8_t i=0; i<7; i++) {
		rtc[i] = twi_receive();
    130a:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
    130e:	f7 01       	movw	r30, r14
    1310:	81 93       	st	Z+, r24
    1312:	7f 01       	movw	r14, r30
	twi_send_byte(0x0);
	twi_end_transmission();
	
	twi_request_from(RTC_ADDR, 7);
	
	for(uint8_t i=0; i<7; i++) {
    1314:	ec 15       	cp	r30, r12
    1316:	fd 05       	cpc	r31, r13
    1318:	c1 f7       	brne	.-16     	; 0x130a <rtc_get_time_s+0x58>
		rtc[i] = twi_receive();
	}
	
	twi_end_transmission();
    131a:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
	
	if (sec)  *sec =  bcd2dec(rtc[0]);
    131e:	01 15       	cp	r16, r1
    1320:	11 05       	cpc	r17, r1
    1322:	29 f0       	breq	.+10     	; 0x132e <rtc_get_time_s+0x7c>
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    132a:	f8 01       	movw	r30, r16
    132c:	80 83       	st	Z, r24
	if (min)  *min =  bcd2dec(rtc[1]);
    132e:	a1 14       	cp	r10, r1
    1330:	b1 04       	cpc	r11, r1
    1332:	29 f0       	breq	.+10     	; 0x133e <rtc_get_time_s+0x8c>
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    133a:	f5 01       	movw	r30, r10
    133c:	80 83       	st	Z, r24
	if (hour) *hour = bcd2dec(rtc[2]);
    133e:	81 14       	cp	r8, r1
    1340:	91 04       	cpc	r9, r1
    1342:	29 f0       	breq	.+10     	; 0x134e <rtc_get_time_s+0x9c>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    134a:	f4 01       	movw	r30, r8
    134c:	80 83       	st	Z, r24
}
    134e:	29 96       	adiw	r28, 0x09	; 9
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	df 90       	pop	r13
    1368:	cf 90       	pop	r12
    136a:	bf 90       	pop	r11
    136c:	af 90       	pop	r10
    136e:	9f 90       	pop	r9
    1370:	8f 90       	pop	r8
    1372:	08 95       	ret

00001374 <rtc_set_time>:

// fixme: support 12-hour mode for setting time
void rtc_set_time(struct tm* tm_)
{
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
	twi_begin_transmission(RTC_ADDR);
    137c:	88 e6       	ldi	r24, 0x68	; 104
    137e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>

	uint8_t century;
	if (tm_->year > 2000) {
    1388:	8a 85       	ldd	r24, Y+10	; 0x0a
    138a:	9b 85       	ldd	r25, Y+11	; 0x0b
    138c:	27 e0       	ldi	r18, 0x07	; 7
    138e:	81 3d       	cpi	r24, 0xD1	; 209
    1390:	92 07       	cpc	r25, r18
    1392:	34 f0       	brlt	.+12     	; 0x13a0 <rtc_set_time+0x2c>
		century = 0x80;
		tm_->year = tm_->year - 2000;
    1394:	80 5d       	subi	r24, 0xD0	; 208
    1396:	97 40       	sbci	r25, 0x07	; 7
    1398:	9b 87       	std	Y+11, r25	; 0x0b
    139a:	8a 87       	std	Y+10, r24	; 0x0a
	twi_begin_transmission(RTC_ADDR);
	twi_send_byte(0x0);

	uint8_t century;
	if (tm_->year > 2000) {
		century = 0x80;
    139c:	10 e8       	ldi	r17, 0x80	; 128
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <rtc_set_time+0x36>
		tm_->year = tm_->year - 2000;
	} else {
		century = 0;
		tm_->year = tm_->year - 1900;
    13a0:	8c 56       	subi	r24, 0x6C	; 108
    13a2:	97 40       	sbci	r25, 0x07	; 7
    13a4:	9b 87       	std	Y+11, r25	; 0x0b
    13a6:	8a 87       	std	Y+10, r24	; 0x0a
	uint8_t century;
	if (tm_->year > 2000) {
		century = 0x80;
		tm_->year = tm_->year - 2000;
	} else {
		century = 0;
    13a8:	10 e0       	ldi	r17, 0x00	; 0
		tm_->year = tm_->year - 1900;
	}

	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
    13aa:	88 81       	ld	r24, Y
    13ac:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    13b0:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->min)); // minutes
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    13ba:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->hour)); // hours
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    13c4:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->wday)); // day of week
    13c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ca:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    13ce:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->mday)); // day
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    13d8:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->mon) + century); // month
    13dc:	88 85       	ldd	r24, Y+8	; 0x08
    13de:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    13e2:	81 0f       	add	r24, r17
    13e4:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->year)); // year
    13e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ea:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    13ee:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>

	twi_end_transmission();
    13f2:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
}
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	08 95       	ret

000013fe <rtc_set_time_s>:

void rtc_set_time_s(uint8_t hour, uint8_t min, uint8_t sec)
{
    13fe:	1f 93       	push	r17
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <rtc_set_time_s+0x8>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	18 2f       	mov	r17, r24
	twi_begin_transmission(RTC_ADDR);
    140c:	88 e6       	ldi	r24, 0x68	; 104
    140e:	49 83       	std	Y+1, r20	; 0x01
    1410:	6a 83       	std	Y+2, r22	; 0x02
    1412:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0);
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>

	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(sec)); // seconds
    141c:	49 81       	ldd	r20, Y+1	; 0x01
    141e:	84 2f       	mov	r24, r20
    1420:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    1424:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(min)); // minutes
    1428:	6a 81       	ldd	r22, Y+2	; 0x02
    142a:	86 2f       	mov	r24, r22
    142c:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    1430:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(dec2bcd(hour)); // hours
    1434:	81 2f       	mov	r24, r17
    1436:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    143a:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	
	twi_end_transmission();
    143e:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	1f 91       	pop	r17
    144c:	08 95       	ret

0000144e <rtc_run_clock>:
// halt/start the clock
// 7th bit of register 0 (second register)
// 0 = clock is running
// 1 = clock is not running
void rtc_run_clock(bool run)
{
    144e:	1f 93       	push	r17
    1450:	18 2f       	mov	r17, r24
  if (s_is_ds3231) return;
    1452:	80 91 e9 03 	lds	r24, 0x03E9
    1456:	88 23       	and	r24, r24
    1458:	51 f4       	brne	.+20     	; 0x146e <rtc_run_clock+0x20>
  
  uint8_t b = rtc_read_byte(0x0);
    145a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>

  if (run)
    145e:	11 23       	and	r17, r17
    1460:	11 f0       	breq	.+4      	; 0x1466 <rtc_run_clock+0x18>
    b &= ~(_BV(CH_BIT)); // clear bit
    1462:	8f 77       	andi	r24, 0x7F	; 127
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <rtc_run_clock+0x1a>
  else
    b |= _BV(CH_BIT); // set bit
    1466:	80 68       	ori	r24, 0x80	; 128
    
    rtc_write_byte(b, 0x0);
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
}
    146e:	1f 91       	pop	r17
    1470:	08 95       	ret

00001472 <rtc_is_clock_running>:
// DS1307 only
// Returns true if the clock is running, false otherwise
// For DS3231, it always returns true
bool rtc_is_clock_running(void)
{
  if (s_is_ds3231) return true;
    1472:	80 91 e9 03 	lds	r24, 0x03E9
    1476:	88 23       	and	r24, r24
    1478:	39 f4       	brne	.+14     	; 0x1488 <rtc_is_clock_running+0x16>
  
  uint8_t b = rtc_read_byte(0x0);
    147a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
}

// DS1307 only
// Returns true if the clock is running, false otherwise
// For DS3231, it always returns true
bool rtc_is_clock_running(void)
    147e:	80 95       	com	r24
    1480:	88 1f       	adc	r24, r24
    1482:	88 27       	eor	r24, r24
    1484:	88 1f       	adc	r24, r24
    1486:	08 95       	ret
{
  if (s_is_ds3231) return true;
    1488:	81 e0       	ldi	r24, 0x01	; 1
  
  uint8_t b = rtc_read_byte(0x0);

  if (b & _BV(CH_BIT)) return false;
  return true;
}
    148a:	08 95       	ret

0000148c <ds3231_get_temp_int>:

void ds3231_get_temp_int(int8_t* i, uint8_t* f)
{
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	8c 01       	movw	r16, r24
    1498:	eb 01       	movw	r28, r22
	uint8_t msb, lsb;
	
	*i = 0;
    149a:	fc 01       	movw	r30, r24
    149c:	10 82       	st	Z, r1
	*f = 0;
    149e:	18 82       	st	Y, r1
	
	if (s_is_ds1307) return; // only valid on DS3231
    14a0:	80 91 e8 03 	lds	r24, 0x03E8
    14a4:	88 23       	and	r24, r24
    14a6:	01 f5       	brne	.+64     	; 0x14e8 <ds3231_get_temp_int+0x5c>

	twi_begin_transmission(RTC_ADDR);
    14a8:	88 e6       	ldi	r24, 0x68	; 104
    14aa:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	// temp registers 0x11 and 0x12
	twi_send_byte(0x11);
    14ae:	81 e1       	ldi	r24, 0x11	; 17
    14b0:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    14b4:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	twi_request_from(RTC_ADDR, 2);
    14b8:	88 e6       	ldi	r24, 0x68	; 104
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>

	if (twi_available()) {
    14c0:	0e 94 00 06 	call	0xc00	; 0xc00 <twi_available>
    14c4:	88 23       	and	r24, r24
    14c6:	81 f0       	breq	.+32     	; 0x14e8 <ds3231_get_temp_int+0x5c>
		msb = twi_receive(); // integer part (in twos complement)
    14c8:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
    14cc:	f8 2e       	mov	r15, r24
		lsb = twi_receive(); // fraction part
    14ce:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
    	
		// integer part in entire byte
		*i = msb;
    14d2:	f8 01       	movw	r30, r16
    14d4:	f0 82       	st	Z, r15
		// fractional part in top two bits (increments of 0.25)
		*f = (lsb >> 6) * 25;
    14d6:	82 95       	swap	r24
    14d8:	86 95       	lsr	r24
    14da:	86 95       	lsr	r24
    14dc:	83 70       	andi	r24, 0x03	; 3
    14de:	99 e1       	ldi	r25, 0x19	; 25
    14e0:	89 9f       	mul	r24, r25
    14e2:	80 2d       	mov	r24, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	88 83       	st	Y, r24

		// float value can be read like so:
		// float temp = ((((short)msb << 8) | (short)lsb) >> 6) / 4.0f;
	}
}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	08 95       	ret

000014f4 <rtc_force_temp_conversion>:

void rtc_force_temp_conversion(uint8_t block)
{
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	18 2f       	mov	r17, r24
	if (s_is_ds1307) return; // only valid on DS3231
    14fa:	80 91 e8 03 	lds	r24, 0x03E8
    14fe:	88 23       	and	r24, r24
    1500:	69 f5       	brne	.+90     	; 0x155c <rtc_force_temp_conversion+0x68>

	// read control register (0x0E)
	twi_begin_transmission(RTC_ADDR);
    1502:	88 e6       	ldi	r24, 0x68	; 104
    1504:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0E);
    1508:	8e e0       	ldi	r24, 0x0E	; 14
    150a:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    150e:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	twi_request_from(RTC_ADDR, 1);
    1512:	88 e6       	ldi	r24, 0x68	; 104
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
	uint8_t ctrl = twi_receive();
    151a:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
    151e:	08 2f       	mov	r16, r24

	ctrl |= 0b00100000; // Set CONV bit

	// write new control register value
	twi_begin_transmission(RTC_ADDR);
    1520:	88 e6       	ldi	r24, 0x68	; 104
    1522:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0E);
    1526:	8e e0       	ldi	r24, 0x0E	; 14
    1528:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(ctrl);
    152c:	80 2f       	mov	r24, r16
    152e:	80 62       	ori	r24, 0x20	; 32
    1530:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    1534:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	if (!block) return;
    1538:	11 23       	and	r17, r17
    153a:	81 f0       	breq	.+32     	; 0x155c <rtc_force_temp_conversion+0x68>
	
	// Temp conversion is ready when control register becomes 0
	do {
		// Block until CONV is 0
		twi_begin_transmission(RTC_ADDR);
    153c:	88 e6       	ldi	r24, 0x68	; 104
    153e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x0E);
    1542:	8e e0       	ldi	r24, 0x0E	; 14
    1544:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_end_transmission();
    1548:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
		twi_request_from(RTC_ADDR, 1);
    154c:	88 e6       	ldi	r24, 0x68	; 104
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
	} while ((twi_receive() & 0b00100000) != 0);
    1554:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
    1558:	85 fd       	sbrc	r24, 5
    155a:	f0 cf       	rjmp	.-32     	; 0x153c <rtc_force_temp_conversion+0x48>
}
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <rtc_get_sram_byte>:
  	for(int i=0;i<56;i++)
		rtc_set_sram_byte(data[i], i);
}

uint8_t rtc_get_sram_byte(uint8_t offset)
{
    1562:	1f 93       	push	r17
    1564:	18 2f       	mov	r17, r24
	twi_begin_transmission(RTC_ADDR);
    1566:	88 e6       	ldi	r24, 0x68	; 104
    1568:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(DS1307_SRAM_ADDR + offset);
    156c:	81 2f       	mov	r24, r17
    156e:	88 5f       	subi	r24, 0xF8	; 248
    1570:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    1574:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	twi_request_from(RTC_ADDR, 1);
    1578:	88 e6       	ldi	r24, 0x68	; 104
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
	return twi_receive();
    1580:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>
}
    1584:	1f 91       	pop	r17
    1586:	08 95       	ret

00001588 <rtc_get_sram>:

#define DS1307_SRAM_ADDR 0x08

// SRAM: 56 bytes from address 0x08 to 0x3f (DS1307-only)
void rtc_get_sram(uint8_t* data)
{
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
	// cannot receive 56 bytes in one go, because of the TWI library buffer limit
	// so just receive one at a time for simplicity
  	for(int i=0;i<56;i++)
    1590:	08 2f       	mov	r16, r24
    1592:	19 2f       	mov	r17, r25
    1594:	c0 e0       	ldi	r28, 0x00	; 0
    1596:	d0 e0       	ldi	r29, 0x00	; 0
		data[i] = rtc_get_sram_byte(i);
    1598:	8c 2f       	mov	r24, r28
    159a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <rtc_get_sram_byte>
    159e:	f8 01       	movw	r30, r16
    15a0:	81 93       	st	Z+, r24
    15a2:	8f 01       	movw	r16, r30
// SRAM: 56 bytes from address 0x08 to 0x3f (DS1307-only)
void rtc_get_sram(uint8_t* data)
{
	// cannot receive 56 bytes in one go, because of the TWI library buffer limit
	// so just receive one at a time for simplicity
  	for(int i=0;i<56;i++)
    15a4:	21 96       	adiw	r28, 0x01	; 1
    15a6:	c8 33       	cpi	r28, 0x38	; 56
    15a8:	d1 05       	cpc	r29, r1
    15aa:	b1 f7       	brne	.-20     	; 0x1598 <rtc_get_sram+0x10>
		data[i] = rtc_get_sram_byte(i);
}
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <rtc_set_sram_byte>:
	twi_request_from(RTC_ADDR, 1);
	return twi_receive();
}

void rtc_set_sram_byte(uint8_t b, uint8_t offset)
{
    15b6:	1f 93       	push	r17
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	18 2f       	mov	r17, r24
	twi_begin_transmission(RTC_ADDR);
    15c4:	88 e6       	ldi	r24, 0x68	; 104
    15c6:	69 83       	std	Y+1, r22	; 0x01
    15c8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(DS1307_SRAM_ADDR + offset);
    15cc:	69 81       	ldd	r22, Y+1	; 0x01
    15ce:	86 2f       	mov	r24, r22
    15d0:	88 5f       	subi	r24, 0xF8	; 248
    15d2:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(b);
    15d6:	81 2f       	mov	r24, r17
    15d8:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    15dc:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
}
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	1f 91       	pop	r17
    15e8:	08 95       	ret

000015ea <rtc_set_sram>:
  	for(int i=0;i<56;i++)
		data[i] = rtc_get_sram_byte(i);
}

void rtc_set_sram(uint8_t *data)
{
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
	// cannot send 56 bytes in one go, because of the TWI library buffer limit
	// so just send one at a time for simplicity
  	for(int i=0;i<56;i++)
    15f2:	08 2f       	mov	r16, r24
    15f4:	19 2f       	mov	r17, r25
    15f6:	c0 e0       	ldi	r28, 0x00	; 0
    15f8:	d0 e0       	ldi	r29, 0x00	; 0
		rtc_set_sram_byte(data[i], i);
    15fa:	f8 01       	movw	r30, r16
    15fc:	81 91       	ld	r24, Z+
    15fe:	8f 01       	movw	r16, r30
    1600:	6c 2f       	mov	r22, r28
    1602:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rtc_set_sram_byte>

void rtc_set_sram(uint8_t *data)
{
	// cannot send 56 bytes in one go, because of the TWI library buffer limit
	// so just send one at a time for simplicity
  	for(int i=0;i<56;i++)
    1606:	21 96       	adiw	r28, 0x01	; 1
    1608:	c8 33       	cpi	r28, 0x38	; 56
    160a:	d1 05       	cpc	r29, r1
    160c:	b1 f7       	brne	.-20     	; 0x15fa <rtc_set_sram+0x10>
		rtc_set_sram_byte(data[i], i);
}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <rtc_SQW_enable>:
	twi_send_byte(b);
	twi_end_transmission();
}

void rtc_SQW_enable(bool enable)
{
    1618:	1f 93       	push	r17
    161a:	18 2f       	mov	r17, r24
	if (s_is_ds1307) {
    161c:	80 91 e8 03 	lds	r24, 0x03E8
    1620:	88 23       	and	r24, r24
    1622:	d1 f0       	breq	.+52     	; 0x1658 <rtc_SQW_enable+0x40>
		twi_begin_transmission(RTC_ADDR);
    1624:	88 e6       	ldi	r24, 0x68	; 104
    1626:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x07);
    162a:	87 e0       	ldi	r24, 0x07	; 7
    162c:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_end_transmission();
    1630:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
		
		// read control
   		twi_request_from(RTC_ADDR, 1);
    1634:	88 e6       	ldi	r24, 0x68	; 104
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
		uint8_t control = twi_receive();
    163c:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>

		if (enable)
    1640:	11 23       	and	r17, r17
    1642:	19 f0       	breq	.+6      	; 0x164a <rtc_SQW_enable+0x32>
			control |=  0b00010000; // set SQWE to 1
    1644:	18 2f       	mov	r17, r24
    1646:	10 61       	ori	r17, 0x10	; 16
    1648:	02 c0       	rjmp	.+4      	; 0x164e <rtc_SQW_enable+0x36>
		else
			control &= ~0b00010000; // set SQWE to 0
    164a:	18 2f       	mov	r17, r24
    164c:	1f 7e       	andi	r17, 0xEF	; 239

		// write control back
		twi_begin_transmission(RTC_ADDR);
    164e:	88 e6       	ldi	r24, 0x68	; 104
    1650:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x07);
    1654:	87 e0       	ldi	r24, 0x07	; 7
    1656:	1a c0       	rjmp	.+52     	; 0x168c <rtc_SQW_enable+0x74>
		twi_send_byte(control);
		twi_end_transmission();

	}
	else { // DS3231
		twi_begin_transmission(RTC_ADDR);
    1658:	88 e6       	ldi	r24, 0x68	; 104
    165a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x0E);
    165e:	8e e0       	ldi	r24, 0x0E	; 14
    1660:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_end_transmission();
    1664:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
		
		// read control
   		twi_request_from(RTC_ADDR, 1);
    1668:	88 e6       	ldi	r24, 0x68	; 104
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
		uint8_t control = twi_receive();
    1670:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>

		if (enable) {
    1674:	11 23       	and	r17, r17
    1676:	21 f0       	breq	.+8      	; 0x1680 <rtc_SQW_enable+0x68>
			control |=  0b01000000; // set BBSQW to 1
    1678:	18 2f       	mov	r17, r24
    167a:	10 64       	ori	r17, 0x40	; 64
			control &= ~0b00000100; // set INTCN to 0
    167c:	1b 7f       	andi	r17, 0xFB	; 251
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <rtc_SQW_enable+0x6c>
		}
		else {
			control &= ~0b01000000; // set BBSQW to 0
    1680:	18 2f       	mov	r17, r24
    1682:	1f 7b       	andi	r17, 0xBF	; 191
		}

		// write control back
		twi_begin_transmission(RTC_ADDR);
    1684:	88 e6       	ldi	r24, 0x68	; 104
    1686:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x0E);
    168a:	8e e0       	ldi	r24, 0x0E	; 14
    168c:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_send_byte(control);
    1690:	81 2f       	mov	r24, r17
    1692:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_end_transmission();
    1696:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
	}
}
    169a:	1f 91       	pop	r17
    169c:	08 95       	ret

0000169e <rtc_SQW_set_freq>:

void rtc_SQW_set_freq(enum RTC_SQW_FREQ freq)
{
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	18 2f       	mov	r17, r24
	if (s_is_ds1307) {
    16a4:	80 91 e8 03 	lds	r24, 0x03E8
    16a8:	88 23       	and	r24, r24
    16aa:	c9 f0       	breq	.+50     	; 0x16de <rtc_SQW_set_freq+0x40>
		twi_begin_transmission(RTC_ADDR);
    16ac:	88 e6       	ldi	r24, 0x68	; 104
    16ae:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x07);
    16b2:	87 e0       	ldi	r24, 0x07	; 7
    16b4:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_end_transmission();
    16b8:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
		
		// read control (uses bits 0 and 1)
   		twi_request_from(RTC_ADDR, 1);
    16bc:	88 e6       	ldi	r24, 0x68	; 104
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
		uint8_t control = twi_receive();
    16c4:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>

		control &= ~0b00000011; // Set to 0
    16c8:	08 2f       	mov	r16, r24
    16ca:	0c 7f       	andi	r16, 0xFC	; 252
		control |= freq; // Set freq bitmask

		// write control back
		twi_begin_transmission(RTC_ADDR);
    16cc:	88 e6       	ldi	r24, 0x68	; 104
    16ce:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x07);
    16d2:	87 e0       	ldi	r24, 0x07	; 7
    16d4:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_send_byte(control);
    16d8:	80 2f       	mov	r24, r16
    16da:	81 2b       	or	r24, r17
    16dc:	19 c0       	rjmp	.+50     	; 0x1710 <rtc_SQW_set_freq+0x72>
		twi_end_transmission();

	}
	else { // DS3231
		twi_begin_transmission(RTC_ADDR);
    16de:	88 e6       	ldi	r24, 0x68	; 104
    16e0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x0E);
    16e4:	8e e0       	ldi	r24, 0x0E	; 14
    16e6:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_end_transmission();
    16ea:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
		
		// read control (uses bits 3 and 4)
   		twi_request_from(RTC_ADDR, 1);
    16ee:	88 e6       	ldi	r24, 0x68	; 104
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
		uint8_t control = twi_receive();
    16f6:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>

		control &= ~0b00011000; // Set to 0
    16fa:	87 7e       	andi	r24, 0xE7	; 231
		control |= (freq << 4); // Set freq bitmask
    16fc:	12 95       	swap	r17
    16fe:	10 7f       	andi	r17, 0xF0	; 240
    1700:	18 2b       	or	r17, r24

		// write control back
		twi_begin_transmission(RTC_ADDR);
    1702:	88 e6       	ldi	r24, 0x68	; 104
    1704:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
		twi_send_byte(0x0E);
    1708:	8e e0       	ldi	r24, 0x0E	; 14
    170a:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_send_byte(control);
    170e:	81 2f       	mov	r24, r17
    1710:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
		twi_end_transmission();
    1714:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
	}
}
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <rtc_osc32kHz_enable>:

void rtc_osc32kHz_enable(bool enable)
{
    171e:	1f 93       	push	r17
    1720:	18 2f       	mov	r17, r24
	if (!s_is_ds3231) return;
    1722:	80 91 e9 03 	lds	r24, 0x03E9
    1726:	88 23       	and	r24, r24
    1728:	01 f1       	breq	.+64     	; 0x176a <rtc_osc32kHz_enable+0x4c>

	twi_begin_transmission(RTC_ADDR);
    172a:	88 e6       	ldi	r24, 0x68	; 104
    172c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0F);
    1730:	8f e0       	ldi	r24, 0x0F	; 15
    1732:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    1736:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>

	// read status
	twi_request_from(RTC_ADDR, 1);
    173a:	88 e6       	ldi	r24, 0x68	; 104
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	0e 94 81 05 	call	0xb02	; 0xb02 <twi_request_from>
	uint8_t status = twi_receive();
    1742:	0e 94 06 06 	call	0xc0c	; 0xc0c <twi_receive>

	if (enable)
    1746:	11 23       	and	r17, r17
    1748:	19 f0       	breq	.+6      	; 0x1750 <rtc_osc32kHz_enable+0x32>
		status |= 0b00001000; // set to 1
    174a:	18 2f       	mov	r17, r24
    174c:	18 60       	ori	r17, 0x08	; 8
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <rtc_osc32kHz_enable+0x36>
	else
		status &= ~0b00001000; // Set to 0
    1750:	18 2f       	mov	r17, r24
    1752:	17 7f       	andi	r17, 0xF7	; 247

	// write status back
	twi_begin_transmission(RTC_ADDR);
    1754:	88 e6       	ldi	r24, 0x68	; 104
    1756:	0e 94 8e 05 	call	0xb1c	; 0xb1c <twi_begin_transmission>
	twi_send_byte(0x0F);
    175a:	8f e0       	ldi	r24, 0x0F	; 15
    175c:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_send_byte(status);
    1760:	81 2f       	mov	r24, r17
    1762:	0e 94 a8 05 	call	0xb50	; 0xb50 <twi_send_byte>
	twi_end_transmission();
    1766:	0e 94 98 05 	call	0xb30	; 0xb30 <twi_end_transmission>
}
    176a:	1f 91       	pop	r17
    176c:	08 95       	ret

0000176e <rtc_reset_alarm>:
// Alarm functionality
// fixme: should decide if "alarm disabled" mode should be available, or if alarm should always be enabled 
// at 00:00:00. Currently, "alarm disabled" only works for ds3231
void rtc_reset_alarm(void)
{
	if (s_is_ds1307)
    176e:	80 91 e8 03 	lds	r24, 0x03E8
    1772:	88 23       	and	r24, r24
    1774:	69 f0       	breq	.+26     	; 0x1790 <rtc_reset_alarm+0x22>
	{
		rtc_set_sram_byte(0, 0); // hour
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rtc_set_sram_byte>
		rtc_set_sram_byte(0, 1); // minute
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rtc_set_sram_byte>
		rtc_set_sram_byte(0, 2); // second
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	62 e0       	ldi	r22, 0x02	; 2
    178a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rtc_set_sram_byte>
    178e:	08 95       	ret
	}
	else 
	{
		// writing 0 to bit 7 of all four alarm 1 registers disables alarm 1
		rtc_write_byte(0, 0x07); // second
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	67 e0       	ldi	r22, 0x07	; 7
    1794:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(0, 0x08); // minute
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	68 e0       	ldi	r22, 0x08	; 8
    179c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(0, 0x09); // hour
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	69 e0       	ldi	r22, 0x09	; 9
    17a4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(0, 0x0a); // day
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	6a e0       	ldi	r22, 0x0A	; 10
    17ac:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		// writing 0 to bit 7 of all four alarm 1 registers disables alarm 2
		rtc_write_byte(0, 0x0B); // minutes
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	6b e0       	ldi	r22, 0x0B	; 11
    17b4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(0, 0x0C); // hour
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	6c e0       	ldi	r22, 0x0C	; 12
    17bc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(0, 0x0D); // date day
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	6d e0       	ldi	r22, 0x0D	; 13
    17c4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
    17c8:	08 95       	ret

000017ca <rtc_set_alarm_s>:
	}
}

// fixme: add an option to set whether or not the INTCN and Interrupt Enable flag is set when setting the alarm
void rtc_set_alarm_s(uint8_t hour, uint8_t min, uint8_t sec,uint8_t type)
{
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	18 2f       	mov	r17, r24
    17da:	06 2f       	mov	r16, r22
	if (hour > 23) return;
    17dc:	88 31       	cpi	r24, 0x18	; 24
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <rtc_set_alarm_s+0x18>
    17e0:	4d c0       	rjmp	.+154    	; 0x187c <rtc_set_alarm_s+0xb2>
	if (min > 59) return;
    17e2:	6c 33       	cpi	r22, 0x3C	; 60
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <rtc_set_alarm_s+0x1e>
    17e6:	4a c0       	rjmp	.+148    	; 0x187c <rtc_set_alarm_s+0xb2>
	if (sec > 59) return;
    17e8:	4c 33       	cpi	r20, 0x3C	; 60
    17ea:	08 f0       	brcs	.+2      	; 0x17ee <rtc_set_alarm_s+0x24>
    17ec:	47 c0       	rjmp	.+142    	; 0x187c <rtc_set_alarm_s+0xb2>

	if (s_is_ds1307) 
    17ee:	80 91 e8 03 	lds	r24, 0x03E8
    17f2:	88 23       	and	r24, r24
    17f4:	79 f0       	breq	.+30     	; 0x1814 <rtc_set_alarm_s+0x4a>
	{
		rtc_set_sram_byte(hour, 0); // hour
    17f6:	81 2f       	mov	r24, r17
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	49 83       	std	Y+1, r20	; 0x01
    17fc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rtc_set_sram_byte>
		rtc_set_sram_byte(min,  1); // minute
    1800:	80 2f       	mov	r24, r16
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rtc_set_sram_byte>
		rtc_set_sram_byte(sec,  2); // second
    1808:	49 81       	ldd	r20, Y+1	; 0x01
    180a:	84 2f       	mov	r24, r20
    180c:	62 e0       	ldi	r22, 0x02	; 2
    180e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rtc_set_sram_byte>
    1812:	34 c0       	rjmp	.+104    	; 0x187c <rtc_set_alarm_s+0xb2>
		 *  09h: A1M3:0  Alarm 1 hour (bit6 is am/pm flag in 12h mode)
		 *  0ah: A1M4:1  Alarm 1 day/date (bit6: 1 for day, 0 for date)
		 *  Sets alarm to fire when hour, minute and second matches
		 */
		/* Alarm 1 */
		if(type ==1)
    1814:	21 30       	cpi	r18, 0x01	; 1
    1816:	a9 f4       	brne	.+42     	; 0x1842 <rtc_set_alarm_s+0x78>
		{
		//printf("Alarm 1 Selected!");
		rtc_write_byte(dec2bcd(sec),  0x07); // second
    1818:	84 2f       	mov	r24, r20
    181a:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    181e:	67 e0       	ldi	r22, 0x07	; 7
    1820:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(dec2bcd(min),  0x08); // minute
    1824:	80 2f       	mov	r24, r16
    1826:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    182a:	68 e0       	ldi	r22, 0x08	; 8
    182c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(dec2bcd(hour), 0x09); // hour
    1830:	81 2f       	mov	r24, r17
    1832:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    1836:	69 e0       	ldi	r22, 0x09	; 9
    1838:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(0b10000001,    0x0a); // day (upper bit must be set)
    183c:	81 e8       	ldi	r24, 0x81	; 129
    183e:	6a e0       	ldi	r22, 0x0A	; 10
    1840:	14 c0       	rjmp	.+40     	; 0x186a <rtc_set_alarm_s+0xa0>
		}
		/* Alarm 2 */
		else if(type ==2)
    1842:	22 30       	cpi	r18, 0x02	; 2
    1844:	a1 f4       	brne	.+40     	; 0x186e <rtc_set_alarm_s+0xa4>
		{
		//printf("Alarm 2 Selected!");
		/* Alarm 2 */
		rtc_write_byte(0x07,  0x0E);
    1846:	87 e0       	ldi	r24, 0x07	; 7
    1848:	6e e0       	ldi	r22, 0x0E	; 14
    184a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(dec2bcd(min),  0x0B); // minute
    184e:	80 2f       	mov	r24, r16
    1850:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    1854:	6b e0       	ldi	r22, 0x0B	; 11
    1856:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(dec2bcd(hour), 0x0C); // hour
    185a:	81 2f       	mov	r24, r17
    185c:	0e 94 3e 08 	call	0x107c	; 0x107c <dec2bcd>
    1860:	6c e0       	ldi	r22, 0x0C	; 12
    1862:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		rtc_write_byte(0b10000001,    0x0D); // day date(upper bit must be set)
    1866:	81 e8       	ldi	r24, 0x81	; 129
    1868:	6d e0       	ldi	r22, 0x0D	; 13
    186a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
		}
		// clear alarm flag
		uint8_t val = rtc_read_byte(0x0f);
    186e:	8f e0       	ldi	r24, 0x0F	; 15
    1870:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
		/* Original */
		//rtc_write_byte(val & ~0b00000001, 0x0f);
		/* Modded */
		rtc_write_byte(val & ~0b00000011, 0x0f);
    1874:	8c 7f       	andi	r24, 0xFC	; 252
    1876:	6f e0       	ldi	r22, 0x0F	; 15
    1878:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
	}
}
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	08 95       	ret

00001888 <rtc_set_alarm>:

void rtc_set_alarm(struct tm* tm_)
{
    1888:	fc 01       	movw	r30, r24
	if (!tm_) return;
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	31 f0       	breq	.+12     	; 0x189a <rtc_set_alarm+0x12>
	rtc_set_alarm_s(tm_->hour, tm_->min, tm_->sec,tm_->type);
    188e:	84 81       	ldd	r24, Z+4	; 0x04
    1890:	62 81       	ldd	r22, Z+2	; 0x02
    1892:	40 81       	ld	r20, Z
    1894:	26 85       	ldd	r18, Z+14	; 0x0e
    1896:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <rtc_set_alarm_s>
    189a:	08 95       	ret

0000189c <rtc_get_alarm_s>:


}

void rtc_get_alarm_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
{
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	ec 01       	movw	r28, r24
    18aa:	8b 01       	movw	r16, r22
    18ac:	7a 01       	movw	r14, r20
	if (s_is_ds1307) {
    18ae:	80 91 e8 03 	lds	r24, 0x03E8
    18b2:	88 23       	and	r24, r24
    18b4:	b9 f0       	breq	.+46     	; 0x18e4 <rtc_get_alarm_s+0x48>
		if (hour) *hour = rtc_get_sram_byte(0);
    18b6:	20 97       	sbiw	r28, 0x00	; 0
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <rtc_get_alarm_s+0x26>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	0e 94 b1 0a 	call	0x1562	; 0x1562 <rtc_get_sram_byte>
    18c0:	88 83       	st	Y, r24
		if (min)  *min  = rtc_get_sram_byte(1);
    18c2:	01 15       	cp	r16, r1
    18c4:	11 05       	cpc	r17, r1
    18c6:	29 f0       	breq	.+10     	; 0x18d2 <rtc_get_alarm_s+0x36>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	0e 94 b1 0a 	call	0x1562	; 0x1562 <rtc_get_sram_byte>
    18ce:	f8 01       	movw	r30, r16
    18d0:	80 83       	st	Z, r24
		if (sec)  *sec  = rtc_get_sram_byte(2);
    18d2:	e1 14       	cp	r14, r1
    18d4:	f1 04       	cpc	r15, r1
    18d6:	e9 f0       	breq	.+58     	; 0x1912 <rtc_get_alarm_s+0x76>
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	0e 94 b1 0a 	call	0x1562	; 0x1562 <rtc_get_sram_byte>
    18de:	f7 01       	movw	r30, r14
    18e0:	80 83       	st	Z, r24
    18e2:	17 c0       	rjmp	.+46     	; 0x1912 <rtc_get_alarm_s+0x76>
	}
	else
	{	
		*sec  = bcd2dec(rtc_read_byte(0x07) & ~0b10000000);
    18e4:	87 e0       	ldi	r24, 0x07	; 7
    18e6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
    18ea:	8f 77       	andi	r24, 0x7F	; 127
    18ec:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    18f0:	f7 01       	movw	r30, r14
    18f2:	80 83       	st	Z, r24
		*min  = bcd2dec(rtc_read_byte(0x08) & ~0b10000000);
    18f4:	88 e0       	ldi	r24, 0x08	; 8
    18f6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
    18fa:	8f 77       	andi	r24, 0x7F	; 127
    18fc:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    1900:	f8 01       	movw	r30, r16
    1902:	80 83       	st	Z, r24
		*hour = bcd2dec(rtc_read_byte(0x09) & ~0b10000000);
    1904:	89 e0       	ldi	r24, 0x09	; 9
    1906:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>
    190a:	8f 77       	andi	r24, 0x7F	; 127
    190c:	0e 94 45 08 	call	0x108a	; 0x108a <bcd2dec>
    1910:	88 83       	st	Y, r24
		//{
		//*min  = bcd2dec(rtc_read_byte(0x0B) & ~0b10000000);
		//*hour = bcd2dec(rtc_read_byte(0x0C) & ~0b10000000);
		//}
	}
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	08 95       	ret

00001920 <rtc_get_alarm>:

struct tm* rtc_get_alarm(void)
{	
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <rtc_get_alarm+0x6>
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
	uint8_t hour, min, sec;

	rtc_get_alarm_s(&hour, &min, &sec);
    192c:	ce 01       	movw	r24, r28
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	be 01       	movw	r22, r28
    1932:	6e 5f       	subi	r22, 0xFE	; 254
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	ae 01       	movw	r20, r28
    1938:	4d 5f       	subi	r20, 0xFD	; 253
    193a:	5f 4f       	sbci	r21, 0xFF	; 255
    193c:	0e 94 4e 0c 	call	0x189c	; 0x189c <rtc_get_alarm_s>
	_tm.hour = hour;
    1940:	85 e3       	ldi	r24, 0x35	; 53
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	29 81       	ldd	r18, Y+1	; 0x01
    1946:	20 93 35 04 	sts	0x0435, r18
    194a:	10 92 36 04 	sts	0x0436, r1
	_tm.min = min;
    194e:	fc 01       	movw	r30, r24
    1950:	32 97       	sbiw	r30, 0x02	; 2
    1952:	2a 81       	ldd	r18, Y+2	; 0x02
    1954:	20 83       	st	Z, r18
    1956:	11 82       	std	Z+1, r1	; 0x01
	_tm.sec = sec;
    1958:	04 97       	sbiw	r24, 0x04	; 4
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
    1960:	11 82       	std	Z+1, r1	; 0x01
	return &_tm;
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <rtc_check_alarm>:

bool rtc_check_alarm(void)
{
    196e:	ff 92       	push	r15
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <rtc_check_alarm+0xc>
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	if (s_is_ds1307) {
    1980:	80 91 e8 03 	lds	r24, 0x03E8
    1984:	88 23       	and	r24, r24
    1986:	09 f1       	breq	.+66     	; 0x19ca <rtc_check_alarm+0x5c>
		uint8_t hour = rtc_get_sram_byte(0);
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <rtc_get_sram_byte>
    198e:	f8 2e       	mov	r15, r24
		uint8_t min  = rtc_get_sram_byte(1);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	0e 94 b1 0a 	call	0x1562	; 0x1562 <rtc_get_sram_byte>
    1996:	08 2f       	mov	r16, r24
		uint8_t sec  = rtc_get_sram_byte(2);
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <rtc_get_sram_byte>
    199e:	18 2f       	mov	r17, r24

		uint8_t cur_hour, cur_min, cur_sec;
		rtc_get_time_s(&cur_hour, &cur_min, &cur_sec);
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	be 01       	movw	r22, r28
    19a6:	6e 5f       	subi	r22, 0xFE	; 254
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	ae 01       	movw	r20, r28
    19ac:	4d 5f       	subi	r20, 0xFD	; 253
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <rtc_get_time_s>
		
		if (cur_hour == hour && cur_min == min && cur_sec == sec)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	8f 15       	cp	r24, r15
    19b8:	c1 f4       	brne	.+48     	; 0x19ea <rtc_check_alarm+0x7c>
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 17       	cp	r24, r16
    19be:	a9 f4       	brne	.+42     	; 0x19ea <rtc_check_alarm+0x7c>
	_tm.min = min;
	_tm.sec = sec;
	return &_tm;
}

bool rtc_check_alarm(void)
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	91 17       	cp	r25, r17
    19c6:	89 f4       	brne	.+34     	; 0x19ea <rtc_check_alarm+0x7c>
    19c8:	11 c0       	rjmp	.+34     	; 0x19ec <rtc_check_alarm+0x7e>
			return true;
		return false;
	}
	else {
		// Alarm 1 flag (A1F) in bit 0
		uint8_t val = rtc_read_byte(0x0f);
    19ca:	8f e0       	ldi	r24, 0x0F	; 15
    19cc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rtc_read_byte>

		// clear flag when set
		if (val & 1)
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	89 01       	movw	r16, r18
    19d6:	01 70       	andi	r16, 0x01	; 1
    19d8:	10 70       	andi	r17, 0x00	; 0
    19da:	80 ff       	sbrs	r24, 0
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <rtc_check_alarm+0x78>
			rtc_write_byte(val & ~0b00000001, 0x0f);
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	6f e0       	ldi	r22, 0x0F	; 15
    19e2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <rtc_write_byte>
			
		return val & 1 ? 1 : 0;
    19e6:	80 2f       	mov	r24, r16
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <rtc_check_alarm+0x7e>
		uint8_t cur_hour, cur_min, cur_sec;
		rtc_get_time_s(&cur_hour, &cur_min, &cur_sec);
		
		if (cur_hour == hour && cur_min == min && cur_sec == sec)
			return true;
		return false;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
		if (val & 1)
			rtc_write_byte(val & ~0b00000001, 0x0f);
			
		return val & 1 ? 1 : 0;
	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	08 95       	ret

000019fe <string_to_int>:
rtc_set_alarm_s(alarms[0],alarms[1],alarms[2],1);
rtc_set_alarm_s(alarms[3],alarms[4],alarms[5],2);
}

void string_to_int(uint8_t* time)
{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	ec 01       	movw	r28, r24
	while(i != 'z')
    1a04:	12 c0       	rjmp	.+36     	; 0x1a2a <string_to_int+0x2c>
	{
		/* Wait for new chars */
		if(!(UCSR0A & (1<<RXC0)));
    1a06:	80 91 c0 00 	lds	r24, 0x00C0
    1a0a:	87 ff       	sbrs	r24, 7
    1a0c:	fc cf       	rjmp	.-8      	; 0x1a06 <string_to_int+0x8>
		
		else
		{
			i =UDR0;
    1a0e:	90 91 c6 00 	lds	r25, 0x00C6
    1a12:	90 93 5a 04 	sts	0x045A, r25
			input[element] = i;
    1a16:	80 91 ea 03 	lds	r24, 0x03EA
    1a1a:	e8 2f       	mov	r30, r24
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	ec 5b       	subi	r30, 0xBC	; 188
    1a20:	fb 4f       	sbci	r31, 0xFB	; 251
    1a22:	90 83       	st	Z, r25
			element++;			
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 93 ea 03 	sts	0x03EA, r24
rtc_set_alarm_s(alarms[3],alarms[4],alarms[5],2);
}

void string_to_int(uint8_t* time)
{
	while(i != 'z')
    1a2a:	80 91 5a 04 	lds	r24, 0x045A
    1a2e:	8a 37       	cpi	r24, 0x7A	; 122
    1a30:	51 f7       	brne	.-44     	; 0x1a06 <string_to_int+0x8>
			input[element] = i;
			element++;			
		}		
	}
	/* Terminate string with a zero */
	input[element-1]= 0;
    1a32:	e0 91 ea 03 	lds	r30, 0x03EA
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	ed 5b       	subi	r30, 0xBD	; 189
    1a3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1a3c:	10 82       	st	Z, r1
	element=0;
    1a3e:	10 92 ea 03 	sts	0x03EA, r1
	/* Split string at delimiter */
	ptr = strtok(input, delimiter);
    1a42:	84 e4       	ldi	r24, 0x44	; 68
    1a44:	94 e0       	ldi	r25, 0x04	; 4
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <string_to_int+0x68>

	while(ptr != 0)
		{
			time[element]= atoi(ptr);
    1a48:	0e 94 44 14 	call	0x2888	; 0x2888 <atoi>
    1a4c:	90 91 ea 03 	lds	r25, 0x03EA
    1a50:	fe 01       	movw	r30, r28
    1a52:	e9 0f       	add	r30, r25
    1a54:	f1 1d       	adc	r31, r1
    1a56:	80 83       	st	Z, r24
			element++;
    1a58:	80 91 ea 03 	lds	r24, 0x03EA
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	80 93 ea 03 	sts	0x03EA, r24
			/* Start over again */
		 	ptr = strtok(0, delimiter);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	66 e4       	ldi	r22, 0x46	; 70
    1a68:	72 e0       	ldi	r23, 0x02	; 2
    1a6a:	0e 94 62 14 	call	0x28c4	; 0x28c4 <strtok>
    1a6e:	90 93 59 04 	sts	0x0459, r25
    1a72:	80 93 58 04 	sts	0x0458, r24
	input[element-1]= 0;
	element=0;
	/* Split string at delimiter */
	ptr = strtok(input, delimiter);

	while(ptr != 0)
    1a76:	80 91 58 04 	lds	r24, 0x0458
    1a7a:	90 91 59 04 	lds	r25, 0x0459
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	19 f7       	brne	.-58     	; 0x1a48 <string_to_int+0x4a>
			element++;
			/* Start over again */
		 	ptr = strtok(0, delimiter);
		}
/* Clear buffers */
i= '0';
    1a82:	80 e3       	ldi	r24, 0x30	; 48
    1a84:	80 93 5a 04 	sts	0x045A, r24
element = 0;
    1a88:	10 92 ea 03 	sts	0x03EA, r1
}
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <init_alarms>:
/* Set new time */
rtc_set_time_s(now[0],now[1] ,now[2]);
}

void init_alarms(void)
{
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <init_alarms+0xa>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <init_alarms+0xc>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <init_alarms+0xe>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
uint8_t alarms[6]={0,0,0,0,0,0};
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	0f 5f       	subi	r16, 0xFF	; 255
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aaa:	86 e0       	ldi	r24, 0x06	; 6
    1aac:	f8 01       	movw	r30, r16
    1aae:	11 92       	st	Z+, r1
    1ab0:	8a 95       	dec	r24
    1ab2:	e9 f7       	brne	.-6      	; 0x1aae <init_alarms+0x1c>
printf("Enter your alarms,terminate by typing'z'\r\n");
    1ab4:	80 ef       	ldi	r24, 0xF0	; 240
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	0e 94 ab 14 	call	0x2956	; 0x2956 <puts>
/* Get the initial input */
string_to_int(alarms);
    1abc:	c8 01       	movw	r24, r16
    1abe:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <string_to_int>
/* Call save timestamp, save alarms to EEPROM */
save_timestamp(alarms[0],alarms[1],alarms[2],1);
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ac6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	0e 94 3e 02 	call	0x47c	; 0x47c <save_timestamp>
save_timestamp(alarms[3],alarms[4],alarms[5],2);
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ad2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ad4:	22 e0       	ldi	r18, 0x02	; 2
    1ad6:	0e 94 3e 02 	call	0x47c	; 0x47c <save_timestamp>

/* Call transfer timestamp, set new alarms */
rtc_set_alarm_s(alarms[0],alarms[1],alarms[2],1);
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	6a 81       	ldd	r22, Y+2	; 0x02
    1ade:	4b 81       	ldd	r20, Y+3	; 0x03
    1ae0:	21 e0       	ldi	r18, 0x01	; 1
    1ae2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <rtc_set_alarm_s>
rtc_set_alarm_s(alarms[3],alarms[4],alarms[5],2);
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	6d 81       	ldd	r22, Y+5	; 0x05
    1aea:	4e 81       	ldd	r20, Y+6	; 0x06
    1aec:	22 e0       	ldi	r18, 0x02	; 2
    1aee:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <rtc_set_alarm_s>
}
    1af2:	26 96       	adiw	r28, 0x06	; 6
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	08 95       	ret

00001b08 <init_time>:
uint8_t element= 0;
char delimiter[] = ",";
char i;

void init_time(void)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <init_time+0x6>
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <init_time+0x8>
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <init_time+0xa>
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
uint8_t now[6]; 
printf("Enter current time,end menue by typing 'z'\r\n");
    1b16:	8a e1       	ldi	r24, 0x1A	; 26
    1b18:	92 e0       	ldi	r25, 0x02	; 2
    1b1a:	0e 94 ab 14 	call	0x2956	; 0x2956 <puts>
string_to_int(now);
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <string_to_int>
/* Set new time */
rtc_set_time_s(now[0],now[1] ,now[2]);
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	6a 81       	ldd	r22, Y+2	; 0x02
    1b2a:	4b 81       	ldd	r20, Y+3	; 0x03
    1b2c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <rtc_set_time_s>
}
    1b30:	26 96       	adiw	r28, 0x06	; 6
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <__fixunssfsi>:
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	7b 01       	movw	r14, r22
    1b4c:	8c 01       	movw	r16, r24
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	5f e4       	ldi	r21, 0x4F	; 79
    1b56:	0e 94 1d 11 	call	0x223a	; 0x223a <__gesf2>
    1b5a:	87 fd       	sbrc	r24, 7
    1b5c:	11 c0       	rjmp	.+34     	; 0x1b80 <__fixunssfsi+0x3e>
    1b5e:	c8 01       	movw	r24, r16
    1b60:	b7 01       	movw	r22, r14
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	5f e4       	ldi	r21, 0x4F	; 79
    1b6a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__subsf3>
    1b6e:	0e 94 4d 11 	call	0x229a	; 0x229a <__fixsfsi>
    1b72:	9b 01       	movw	r18, r22
    1b74:	ac 01       	movw	r20, r24
    1b76:	20 50       	subi	r18, 0x00	; 0
    1b78:	30 40       	sbci	r19, 0x00	; 0
    1b7a:	40 40       	sbci	r20, 0x00	; 0
    1b7c:	50 48       	sbci	r21, 0x80	; 128
    1b7e:	06 c0       	rjmp	.+12     	; 0x1b8c <__fixunssfsi+0x4a>
    1b80:	c8 01       	movw	r24, r16
    1b82:	b7 01       	movw	r22, r14
    1b84:	0e 94 4d 11 	call	0x229a	; 0x229a <__fixsfsi>
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	ca 01       	movw	r24, r20
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	08 95       	ret

00001b9a <_fpadd_parts>:
    1b9a:	a0 e0       	ldi	r26, 0x00	; 0
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1ba0:	fd e0       	ldi	r31, 0x0D	; 13
    1ba2:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__prologue_saves__+0x8>
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	ea 01       	movw	r28, r20
    1baa:	80 81       	ld	r24, Z
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	08 f4       	brcc	.+2      	; 0x1bb2 <_fpadd_parts+0x18>
    1bb0:	38 c1       	rjmp	.+624    	; 0x1e22 <_fpadd_parts+0x288>
    1bb2:	db 01       	movw	r26, r22
    1bb4:	9c 91       	ld	r25, X
    1bb6:	92 30       	cpi	r25, 0x02	; 2
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <_fpadd_parts+0x22>
    1bba:	30 c1       	rjmp	.+608    	; 0x1e1c <_fpadd_parts+0x282>
    1bbc:	84 30       	cpi	r24, 0x04	; 4
    1bbe:	59 f4       	brne	.+22     	; 0x1bd6 <_fpadd_parts+0x3c>
    1bc0:	94 30       	cpi	r25, 0x04	; 4
    1bc2:	09 f0       	breq	.+2      	; 0x1bc6 <_fpadd_parts+0x2c>
    1bc4:	2e c1       	rjmp	.+604    	; 0x1e22 <_fpadd_parts+0x288>
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	8c 91       	ld	r24, X
    1bcc:	11 97       	sbiw	r26, 0x01	; 1
    1bce:	98 17       	cp	r25, r24
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <_fpadd_parts+0x3a>
    1bd2:	21 c1       	rjmp	.+578    	; 0x1e16 <_fpadd_parts+0x27c>
    1bd4:	26 c1       	rjmp	.+588    	; 0x1e22 <_fpadd_parts+0x288>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <_fpadd_parts+0x42>
    1bda:	20 c1       	rjmp	.+576    	; 0x1e1c <_fpadd_parts+0x282>
    1bdc:	92 30       	cpi	r25, 0x02	; 2
    1bde:	b1 f4       	brne	.+44     	; 0x1c0c <_fpadd_parts+0x72>
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <_fpadd_parts+0x4c>
    1be4:	1e c1       	rjmp	.+572    	; 0x1e22 <_fpadd_parts+0x288>
    1be6:	ca 01       	movw	r24, r20
    1be8:	af 01       	movw	r20, r30
    1bea:	28 e0       	ldi	r18, 0x08	; 8
    1bec:	da 01       	movw	r26, r20
    1bee:	0d 90       	ld	r0, X+
    1bf0:	ad 01       	movw	r20, r26
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	0d 92       	st	X+, r0
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	21 50       	subi	r18, 0x01	; 1
    1bfa:	c1 f7       	brne	.-16     	; 0x1bec <_fpadd_parts+0x52>
    1bfc:	db 01       	movw	r26, r22
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	8c 91       	ld	r24, X
    1c02:	11 97       	sbiw	r26, 0x01	; 1
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	89 23       	and	r24, r25
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	0a c1       	rjmp	.+532    	; 0x1e20 <_fpadd_parts+0x286>
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <_fpadd_parts+0x78>
    1c10:	05 c1       	rjmp	.+522    	; 0x1e1c <_fpadd_parts+0x282>
    1c12:	c2 80       	ldd	r12, Z+2	; 0x02
    1c14:	d3 80       	ldd	r13, Z+3	; 0x03
    1c16:	db 01       	movw	r26, r22
    1c18:	12 96       	adiw	r26, 0x02	; 2
    1c1a:	6d 90       	ld	r6, X+
    1c1c:	7c 90       	ld	r7, X
    1c1e:	13 97       	sbiw	r26, 0x03	; 3
    1c20:	24 81       	ldd	r18, Z+4	; 0x04
    1c22:	35 81       	ldd	r19, Z+5	; 0x05
    1c24:	46 81       	ldd	r20, Z+6	; 0x06
    1c26:	57 81       	ldd	r21, Z+7	; 0x07
    1c28:	14 96       	adiw	r26, 0x04	; 4
    1c2a:	ed 90       	ld	r14, X+
    1c2c:	fd 90       	ld	r15, X+
    1c2e:	0d 91       	ld	r16, X+
    1c30:	1c 91       	ld	r17, X
    1c32:	17 97       	sbiw	r26, 0x07	; 7
    1c34:	c6 01       	movw	r24, r12
    1c36:	86 19       	sub	r24, r6
    1c38:	97 09       	sbc	r25, r7
    1c3a:	5c 01       	movw	r10, r24
    1c3c:	97 ff       	sbrs	r25, 7
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <_fpadd_parts+0xae>
    1c40:	aa 24       	eor	r10, r10
    1c42:	bb 24       	eor	r11, r11
    1c44:	a8 1a       	sub	r10, r24
    1c46:	b9 0a       	sbc	r11, r25
    1c48:	b0 e2       	ldi	r27, 0x20	; 32
    1c4a:	ab 16       	cp	r10, r27
    1c4c:	b1 04       	cpc	r11, r1
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <_fpadd_parts+0xb8>
    1c50:	61 c0       	rjmp	.+194    	; 0x1d14 <_fpadd_parts+0x17a>
    1c52:	18 16       	cp	r1, r24
    1c54:	19 06       	cpc	r1, r25
    1c56:	6c f5       	brge	.+90     	; 0x1cb2 <_fpadd_parts+0x118>
    1c58:	37 01       	movw	r6, r14
    1c5a:	48 01       	movw	r8, r16
    1c5c:	0a 2c       	mov	r0, r10
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <_fpadd_parts+0xce>
    1c60:	96 94       	lsr	r9
    1c62:	87 94       	ror	r8
    1c64:	77 94       	ror	r7
    1c66:	67 94       	ror	r6
    1c68:	0a 94       	dec	r0
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <_fpadd_parts+0xc6>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	0a 2c       	mov	r0, r10
    1c76:	04 c0       	rjmp	.+8      	; 0x1c80 <_fpadd_parts+0xe6>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	aa 1f       	adc	r26, r26
    1c7e:	bb 1f       	adc	r27, r27
    1c80:	0a 94       	dec	r0
    1c82:	d2 f7       	brpl	.-12     	; 0x1c78 <_fpadd_parts+0xde>
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	a1 09       	sbc	r26, r1
    1c88:	b1 09       	sbc	r27, r1
    1c8a:	8e 21       	and	r24, r14
    1c8c:	9f 21       	and	r25, r15
    1c8e:	a0 23       	and	r26, r16
    1c90:	b1 23       	and	r27, r17
    1c92:	ee 24       	eor	r14, r14
    1c94:	ff 24       	eor	r15, r15
    1c96:	87 01       	movw	r16, r14
    1c98:	e3 94       	inc	r14
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	a1 05       	cpc	r26, r1
    1c9e:	b1 05       	cpc	r27, r1
    1ca0:	19 f4       	brne	.+6      	; 0x1ca8 <_fpadd_parts+0x10e>
    1ca2:	ee 24       	eor	r14, r14
    1ca4:	ff 24       	eor	r15, r15
    1ca6:	87 01       	movw	r16, r14
    1ca8:	e6 28       	or	r14, r6
    1caa:	f7 28       	or	r15, r7
    1cac:	08 29       	or	r16, r8
    1cae:	19 29       	or	r17, r9
    1cb0:	3c c0       	rjmp	.+120    	; 0x1d2a <_fpadd_parts+0x190>
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	d1 f1       	breq	.+116    	; 0x1d2a <_fpadd_parts+0x190>
    1cb6:	ca 0c       	add	r12, r10
    1cb8:	db 1c       	adc	r13, r11
    1cba:	39 01       	movw	r6, r18
    1cbc:	4a 01       	movw	r8, r20
    1cbe:	0a 2c       	mov	r0, r10
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <_fpadd_parts+0x130>
    1cc2:	96 94       	lsr	r9
    1cc4:	87 94       	ror	r8
    1cc6:	77 94       	ror	r7
    1cc8:	67 94       	ror	r6
    1cca:	0a 94       	dec	r0
    1ccc:	d2 f7       	brpl	.-12     	; 0x1cc2 <_fpadd_parts+0x128>
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e0       	ldi	r26, 0x00	; 0
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	0a 2c       	mov	r0, r10
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <_fpadd_parts+0x148>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	aa 1f       	adc	r26, r26
    1ce0:	bb 1f       	adc	r27, r27
    1ce2:	0a 94       	dec	r0
    1ce4:	d2 f7       	brpl	.-12     	; 0x1cda <_fpadd_parts+0x140>
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	a1 09       	sbc	r26, r1
    1cea:	b1 09       	sbc	r27, r1
    1cec:	82 23       	and	r24, r18
    1cee:	93 23       	and	r25, r19
    1cf0:	a4 23       	and	r26, r20
    1cf2:	b5 23       	and	r27, r21
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	a1 05       	cpc	r26, r1
    1d00:	b1 05       	cpc	r27, r1
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <_fpadd_parts+0x170>
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	a9 01       	movw	r20, r18
    1d0a:	26 29       	or	r18, r6
    1d0c:	37 29       	or	r19, r7
    1d0e:	48 29       	or	r20, r8
    1d10:	59 29       	or	r21, r9
    1d12:	0b c0       	rjmp	.+22     	; 0x1d2a <_fpadd_parts+0x190>
    1d14:	6c 14       	cp	r6, r12
    1d16:	7d 04       	cpc	r7, r13
    1d18:	24 f4       	brge	.+8      	; 0x1d22 <_fpadd_parts+0x188>
    1d1a:	ee 24       	eor	r14, r14
    1d1c:	ff 24       	eor	r15, r15
    1d1e:	87 01       	movw	r16, r14
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <_fpadd_parts+0x190>
    1d22:	63 01       	movw	r12, r6
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	a9 01       	movw	r20, r18
    1d2a:	81 81       	ldd	r24, Z+1	; 0x01
    1d2c:	fb 01       	movw	r30, r22
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	89 17       	cp	r24, r25
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <_fpadd_parts+0x19c>
    1d34:	45 c0       	rjmp	.+138    	; 0x1dc0 <_fpadd_parts+0x226>
    1d36:	88 23       	and	r24, r24
    1d38:	49 f0       	breq	.+18     	; 0x1d4c <_fpadd_parts+0x1b2>
    1d3a:	d8 01       	movw	r26, r16
    1d3c:	c7 01       	movw	r24, r14
    1d3e:	82 1b       	sub	r24, r18
    1d40:	93 0b       	sbc	r25, r19
    1d42:	a4 0b       	sbc	r26, r20
    1d44:	b5 0b       	sbc	r27, r21
    1d46:	9c 01       	movw	r18, r24
    1d48:	ad 01       	movw	r20, r26
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <_fpadd_parts+0x1ba>
    1d4c:	2e 19       	sub	r18, r14
    1d4e:	3f 09       	sbc	r19, r15
    1d50:	40 0b       	sbc	r20, r16
    1d52:	51 0b       	sbc	r21, r17
    1d54:	57 fd       	sbrc	r21, 7
    1d56:	04 c0       	rjmp	.+8      	; 0x1d60 <_fpadd_parts+0x1c6>
    1d58:	19 82       	std	Y+1, r1	; 0x01
    1d5a:	db 82       	std	Y+3, r13	; 0x03
    1d5c:	ca 82       	std	Y+2, r12	; 0x02
    1d5e:	0b c0       	rjmp	.+22     	; 0x1d76 <_fpadd_parts+0x1dc>
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	db 82       	std	Y+3, r13	; 0x03
    1d66:	ca 82       	std	Y+2, r12	; 0x02
    1d68:	50 95       	com	r21
    1d6a:	40 95       	com	r20
    1d6c:	30 95       	com	r19
    1d6e:	21 95       	neg	r18
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	4f 4f       	sbci	r20, 0xFF	; 255
    1d74:	5f 4f       	sbci	r21, 0xFF	; 255
    1d76:	2c 83       	std	Y+4, r18	; 0x04
    1d78:	3d 83       	std	Y+5, r19	; 0x05
    1d7a:	4e 83       	std	Y+6, r20	; 0x06
    1d7c:	5f 83       	std	Y+7, r21	; 0x07
    1d7e:	0d c0       	rjmp	.+26     	; 0x1d9a <_fpadd_parts+0x200>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	aa 1f       	adc	r26, r26
    1d86:	bb 1f       	adc	r27, r27
    1d88:	8c 83       	std	Y+4, r24	; 0x04
    1d8a:	9d 83       	std	Y+5, r25	; 0x05
    1d8c:	ae 83       	std	Y+6, r26	; 0x06
    1d8e:	bf 83       	std	Y+7, r27	; 0x07
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9b 83       	std	Y+3, r25	; 0x03
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	ae 81       	ldd	r26, Y+6	; 0x06
    1da0:	bf 81       	ldd	r27, Y+7	; 0x07
    1da2:	9c 01       	movw	r18, r24
    1da4:	ad 01       	movw	r20, r26
    1da6:	21 50       	subi	r18, 0x01	; 1
    1da8:	30 40       	sbci	r19, 0x00	; 0
    1daa:	40 40       	sbci	r20, 0x00	; 0
    1dac:	50 40       	sbci	r21, 0x00	; 0
    1dae:	2f 3f       	cpi	r18, 0xFF	; 255
    1db0:	ef ef       	ldi	r30, 0xFF	; 255
    1db2:	3e 07       	cpc	r19, r30
    1db4:	ef ef       	ldi	r30, 0xFF	; 255
    1db6:	4e 07       	cpc	r20, r30
    1db8:	ef e3       	ldi	r30, 0x3F	; 63
    1dba:	5e 07       	cpc	r21, r30
    1dbc:	08 f3       	brcs	.-62     	; 0x1d80 <_fpadd_parts+0x1e6>
    1dbe:	0b c0       	rjmp	.+22     	; 0x1dd6 <_fpadd_parts+0x23c>
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	db 82       	std	Y+3, r13	; 0x03
    1dc4:	ca 82       	std	Y+2, r12	; 0x02
    1dc6:	2e 0d       	add	r18, r14
    1dc8:	3f 1d       	adc	r19, r15
    1dca:	40 1f       	adc	r20, r16
    1dcc:	51 1f       	adc	r21, r17
    1dce:	2c 83       	std	Y+4, r18	; 0x04
    1dd0:	3d 83       	std	Y+5, r19	; 0x05
    1dd2:	4e 83       	std	Y+6, r20	; 0x06
    1dd4:	5f 83       	std	Y+7, r21	; 0x07
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	88 83       	st	Y, r24
    1dda:	2c 81       	ldd	r18, Y+4	; 0x04
    1ddc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dde:	4e 81       	ldd	r20, Y+6	; 0x06
    1de0:	5f 81       	ldd	r21, Y+7	; 0x07
    1de2:	57 ff       	sbrs	r21, 7
    1de4:	1d c0       	rjmp	.+58     	; 0x1e20 <_fpadd_parts+0x286>
    1de6:	da 01       	movw	r26, r20
    1de8:	c9 01       	movw	r24, r18
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	90 70       	andi	r25, 0x00	; 0
    1dee:	a0 70       	andi	r26, 0x00	; 0
    1df0:	b0 70       	andi	r27, 0x00	; 0
    1df2:	56 95       	lsr	r21
    1df4:	47 95       	ror	r20
    1df6:	37 95       	ror	r19
    1df8:	27 95       	ror	r18
    1dfa:	82 2b       	or	r24, r18
    1dfc:	93 2b       	or	r25, r19
    1dfe:	a4 2b       	or	r26, r20
    1e00:	b5 2b       	or	r27, r21
    1e02:	8c 83       	std	Y+4, r24	; 0x04
    1e04:	9d 83       	std	Y+5, r25	; 0x05
    1e06:	ae 83       	std	Y+6, r26	; 0x06
    1e08:	bf 83       	std	Y+7, r27	; 0x07
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	9b 83       	std	Y+3, r25	; 0x03
    1e12:	8a 83       	std	Y+2, r24	; 0x02
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <_fpadd_parts+0x286>
    1e16:	e8 e4       	ldi	r30, 0x48	; 72
    1e18:	f2 e0       	ldi	r31, 0x02	; 2
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <_fpadd_parts+0x288>
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <_fpadd_parts+0x288>
    1e20:	fe 01       	movw	r30, r28
    1e22:	cf 01       	movw	r24, r30
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	ee e0       	ldi	r30, 0x0E	; 14
    1e2a:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__epilogue_restores__+0x8>

00001e2e <__addsf3>:
    1e2e:	a0 e2       	ldi	r26, 0x20	; 32
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	ed e1       	ldi	r30, 0x1D	; 29
    1e34:	ff e0       	ldi	r31, 0x0F	; 15
    1e36:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0x18>
    1e3a:	69 83       	std	Y+1, r22	; 0x01
    1e3c:	7a 83       	std	Y+2, r23	; 0x02
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	2d 83       	std	Y+5, r18	; 0x05
    1e44:	3e 83       	std	Y+6, r19	; 0x06
    1e46:	4f 83       	std	Y+7, r20	; 0x07
    1e48:	58 87       	std	Y+8, r21	; 0x08
    1e4a:	89 e0       	ldi	r24, 0x09	; 9
    1e4c:	e8 2e       	mov	r14, r24
    1e4e:	f1 2c       	mov	r15, r1
    1e50:	ec 0e       	add	r14, r28
    1e52:	fd 1e       	adc	r15, r29
    1e54:	ce 01       	movw	r24, r28
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	b7 01       	movw	r22, r14
    1e5a:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    1e5e:	8e 01       	movw	r16, r28
    1e60:	0f 5e       	subi	r16, 0xEF	; 239
    1e62:	1f 4f       	sbci	r17, 0xFF	; 255
    1e64:	ce 01       	movw	r24, r28
    1e66:	05 96       	adiw	r24, 0x05	; 5
    1e68:	b8 01       	movw	r22, r16
    1e6a:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    1e6e:	c7 01       	movw	r24, r14
    1e70:	b8 01       	movw	r22, r16
    1e72:	ae 01       	movw	r20, r28
    1e74:	47 5e       	subi	r20, 0xE7	; 231
    1e76:	5f 4f       	sbci	r21, 0xFF	; 255
    1e78:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_fpadd_parts>
    1e7c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__pack_f>
    1e80:	a0 96       	adiw	r28, 0x20	; 32
    1e82:	e6 e0       	ldi	r30, 0x06	; 6
    1e84:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0x18>

00001e88 <__subsf3>:
    1e88:	a0 e2       	ldi	r26, 0x20	; 32
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	ea e4       	ldi	r30, 0x4A	; 74
    1e8e:	ff e0       	ldi	r31, 0x0F	; 15
    1e90:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0x18>
    1e94:	69 83       	std	Y+1, r22	; 0x01
    1e96:	7a 83       	std	Y+2, r23	; 0x02
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	2d 83       	std	Y+5, r18	; 0x05
    1e9e:	3e 83       	std	Y+6, r19	; 0x06
    1ea0:	4f 83       	std	Y+7, r20	; 0x07
    1ea2:	58 87       	std	Y+8, r21	; 0x08
    1ea4:	8e 01       	movw	r16, r28
    1ea6:	07 5f       	subi	r16, 0xF7	; 247
    1ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eaa:	ce 01       	movw	r24, r28
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	b8 01       	movw	r22, r16
    1eb0:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    1eb4:	91 e1       	ldi	r25, 0x11	; 17
    1eb6:	e9 2e       	mov	r14, r25
    1eb8:	f1 2c       	mov	r15, r1
    1eba:	ec 0e       	add	r14, r28
    1ebc:	fd 1e       	adc	r15, r29
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	05 96       	adiw	r24, 0x05	; 5
    1ec2:	b7 01       	movw	r22, r14
    1ec4:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    1ec8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eca:	91 e0       	ldi	r25, 0x01	; 1
    1ecc:	89 27       	eor	r24, r25
    1ece:	8a 8b       	std	Y+18, r24	; 0x12
    1ed0:	c8 01       	movw	r24, r16
    1ed2:	b7 01       	movw	r22, r14
    1ed4:	ae 01       	movw	r20, r28
    1ed6:	47 5e       	subi	r20, 0xE7	; 231
    1ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eda:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_fpadd_parts>
    1ede:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__pack_f>
    1ee2:	a0 96       	adiw	r28, 0x20	; 32
    1ee4:	e6 e0       	ldi	r30, 0x06	; 6
    1ee6:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0x18>

00001eea <__mulsf3>:
    1eea:	a0 e2       	ldi	r26, 0x20	; 32
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e7       	ldi	r30, 0x7B	; 123
    1ef0:	ff e0       	ldi	r31, 0x0F	; 15
    1ef2:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__prologue_saves__>
    1ef6:	69 83       	std	Y+1, r22	; 0x01
    1ef8:	7a 83       	std	Y+2, r23	; 0x02
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	2d 83       	std	Y+5, r18	; 0x05
    1f00:	3e 83       	std	Y+6, r19	; 0x06
    1f02:	4f 83       	std	Y+7, r20	; 0x07
    1f04:	58 87       	std	Y+8, r21	; 0x08
    1f06:	ce 01       	movw	r24, r28
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	be 01       	movw	r22, r28
    1f0c:	67 5f       	subi	r22, 0xF7	; 247
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    1f14:	ce 01       	movw	r24, r28
    1f16:	05 96       	adiw	r24, 0x05	; 5
    1f18:	be 01       	movw	r22, r28
    1f1a:	6f 5e       	subi	r22, 0xEF	; 239
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    1f22:	99 85       	ldd	r25, Y+9	; 0x09
    1f24:	92 30       	cpi	r25, 0x02	; 2
    1f26:	78 f0       	brcs	.+30     	; 0x1f46 <__mulsf3+0x5c>
    1f28:	89 89       	ldd	r24, Y+17	; 0x11
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	c0 f0       	brcs	.+48     	; 0x1f5e <__mulsf3+0x74>
    1f2e:	94 30       	cpi	r25, 0x04	; 4
    1f30:	19 f4       	brne	.+6      	; 0x1f38 <__mulsf3+0x4e>
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	41 f4       	brne	.+16     	; 0x1f46 <__mulsf3+0x5c>
    1f36:	cb c0       	rjmp	.+406    	; 0x20ce <__mulsf3+0x1e4>
    1f38:	84 30       	cpi	r24, 0x04	; 4
    1f3a:	19 f4       	brne	.+6      	; 0x1f42 <__mulsf3+0x58>
    1f3c:	92 30       	cpi	r25, 0x02	; 2
    1f3e:	79 f4       	brne	.+30     	; 0x1f5e <__mulsf3+0x74>
    1f40:	c6 c0       	rjmp	.+396    	; 0x20ce <__mulsf3+0x1e4>
    1f42:	92 30       	cpi	r25, 0x02	; 2
    1f44:	51 f4       	brne	.+20     	; 0x1f5a <__mulsf3+0x70>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4c:	29 17       	cp	r18, r25
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <__mulsf3+0x68>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	8a 87       	std	Y+10, r24	; 0x0a
    1f54:	ce 01       	movw	r24, r28
    1f56:	09 96       	adiw	r24, 0x09	; 9
    1f58:	bc c0       	rjmp	.+376    	; 0x20d2 <__mulsf3+0x1e8>
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	51 f4       	brne	.+20     	; 0x1f72 <__mulsf3+0x88>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f62:	9a 89       	ldd	r25, Y+18	; 0x12
    1f64:	29 17       	cp	r18, r25
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <__mulsf3+0x80>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	8a 8b       	std	Y+18, r24	; 0x12
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	41 96       	adiw	r24, 0x11	; 17
    1f70:	b0 c0       	rjmp	.+352    	; 0x20d2 <__mulsf3+0x1e8>
    1f72:	6d 84       	ldd	r6, Y+13	; 0x0d
    1f74:	7e 84       	ldd	r7, Y+14	; 0x0e
    1f76:	8f 84       	ldd	r8, Y+15	; 0x0f
    1f78:	98 88       	ldd	r9, Y+16	; 0x10
    1f7a:	ed 88       	ldd	r14, Y+21	; 0x15
    1f7c:	fe 88       	ldd	r15, Y+22	; 0x16
    1f7e:	0f 89       	ldd	r16, Y+23	; 0x17
    1f80:	18 8d       	ldd	r17, Y+24	; 0x18
    1f82:	e0 e2       	ldi	r30, 0x20	; 32
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	aa 24       	eor	r10, r10
    1f8e:	bb 24       	eor	r11, r11
    1f90:	65 01       	movw	r12, r10
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	a9 01       	movw	r20, r18
    1f98:	b3 01       	movw	r22, r6
    1f9a:	61 70       	andi	r22, 0x01	; 1
    1f9c:	70 70       	andi	r23, 0x00	; 0
    1f9e:	61 15       	cp	r22, r1
    1fa0:	71 05       	cpc	r23, r1
    1fa2:	d1 f0       	breq	.+52     	; 0x1fd8 <__mulsf3+0xee>
    1fa4:	2e 0d       	add	r18, r14
    1fa6:	3f 1d       	adc	r19, r15
    1fa8:	40 1f       	adc	r20, r16
    1faa:	51 1f       	adc	r21, r17
    1fac:	15 01       	movw	r2, r10
    1fae:	26 01       	movw	r4, r12
    1fb0:	28 0e       	add	r2, r24
    1fb2:	39 1e       	adc	r3, r25
    1fb4:	4a 1e       	adc	r4, r26
    1fb6:	5b 1e       	adc	r5, r27
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e0       	ldi	r26, 0x00	; 0
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	2e 15       	cp	r18, r14
    1fc2:	3f 05       	cpc	r19, r15
    1fc4:	40 07       	cpc	r20, r16
    1fc6:	51 07       	cpc	r21, r17
    1fc8:	18 f0       	brcs	.+6      	; 0x1fd0 <__mulsf3+0xe6>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	dc 01       	movw	r26, r24
    1fd0:	82 0d       	add	r24, r2
    1fd2:	93 1d       	adc	r25, r3
    1fd4:	a4 1d       	adc	r26, r4
    1fd6:	b5 1d       	adc	r27, r5
    1fd8:	aa 0c       	add	r10, r10
    1fda:	bb 1c       	adc	r11, r11
    1fdc:	cc 1c       	adc	r12, r12
    1fde:	dd 1c       	adc	r13, r13
    1fe0:	17 ff       	sbrs	r17, 7
    1fe2:	09 c0       	rjmp	.+18     	; 0x1ff6 <__mulsf3+0x10c>
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	26 2e       	mov	r2, r22
    1fe8:	31 2c       	mov	r3, r1
    1fea:	41 2c       	mov	r4, r1
    1fec:	51 2c       	mov	r5, r1
    1fee:	a2 28       	or	r10, r2
    1ff0:	b3 28       	or	r11, r3
    1ff2:	c4 28       	or	r12, r4
    1ff4:	d5 28       	or	r13, r5
    1ff6:	31 97       	sbiw	r30, 0x01	; 1
    1ff8:	49 f0       	breq	.+18     	; 0x200c <__mulsf3+0x122>
    1ffa:	ee 0c       	add	r14, r14
    1ffc:	ff 1c       	adc	r15, r15
    1ffe:	00 1f       	adc	r16, r16
    2000:	11 1f       	adc	r17, r17
    2002:	96 94       	lsr	r9
    2004:	87 94       	ror	r8
    2006:	77 94       	ror	r7
    2008:	67 94       	ror	r6
    200a:	c6 cf       	rjmp	.-116    	; 0x1f98 <__mulsf3+0xae>
    200c:	6b 89       	ldd	r22, Y+19	; 0x13
    200e:	7c 89       	ldd	r23, Y+20	; 0x14
    2010:	eb 85       	ldd	r30, Y+11	; 0x0b
    2012:	fc 85       	ldd	r31, Y+12	; 0x0c
    2014:	6e 0f       	add	r22, r30
    2016:	7f 1f       	adc	r23, r31
    2018:	6e 5f       	subi	r22, 0xFE	; 254
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	7c 8f       	std	Y+28, r23	; 0x1c
    201e:	6b 8f       	std	Y+27, r22	; 0x1b
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	ea 85       	ldd	r30, Y+10	; 0x0a
    2024:	7a 89       	ldd	r23, Y+18	; 0x12
    2026:	e7 17       	cp	r30, r23
    2028:	09 f4       	brne	.+2      	; 0x202c <__mulsf3+0x142>
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	6a 8f       	std	Y+26, r22	; 0x1a
    202e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2030:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2032:	10 c0       	rjmp	.+32     	; 0x2054 <__mulsf3+0x16a>
    2034:	fc 01       	movw	r30, r24
    2036:	e1 70       	andi	r30, 0x01	; 1
    2038:	f0 70       	andi	r31, 0x00	; 0
    203a:	30 97       	sbiw	r30, 0x00	; 0
    203c:	29 f0       	breq	.+10     	; 0x2048 <__mulsf3+0x15e>
    203e:	56 95       	lsr	r21
    2040:	47 95       	ror	r20
    2042:	37 95       	ror	r19
    2044:	27 95       	ror	r18
    2046:	50 68       	ori	r21, 0x80	; 128
    2048:	b6 95       	lsr	r27
    204a:	a7 95       	ror	r26
    204c:	97 95       	ror	r25
    204e:	87 95       	ror	r24
    2050:	6f 5f       	subi	r22, 0xFF	; 255
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	b7 fd       	sbrc	r27, 7
    2056:	ee cf       	rjmp	.-36     	; 0x2034 <__mulsf3+0x14a>
    2058:	0c c0       	rjmp	.+24     	; 0x2072 <__mulsf3+0x188>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	aa 1f       	adc	r26, r26
    2060:	bb 1f       	adc	r27, r27
    2062:	57 fd       	sbrc	r21, 7
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	44 1f       	adc	r20, r20
    206c:	55 1f       	adc	r21, r21
    206e:	61 50       	subi	r22, 0x01	; 1
    2070:	70 40       	sbci	r23, 0x00	; 0
    2072:	80 30       	cpi	r24, 0x00	; 0
    2074:	e0 e0       	ldi	r30, 0x00	; 0
    2076:	9e 07       	cpc	r25, r30
    2078:	e0 e0       	ldi	r30, 0x00	; 0
    207a:	ae 07       	cpc	r26, r30
    207c:	e0 e4       	ldi	r30, 0x40	; 64
    207e:	be 07       	cpc	r27, r30
    2080:	60 f3       	brcs	.-40     	; 0x205a <__mulsf3+0x170>
    2082:	6b 8f       	std	Y+27, r22	; 0x1b
    2084:	7c 8f       	std	Y+28, r23	; 0x1c
    2086:	6f e7       	ldi	r22, 0x7F	; 127
    2088:	e6 2e       	mov	r14, r22
    208a:	f1 2c       	mov	r15, r1
    208c:	01 2d       	mov	r16, r1
    208e:	11 2d       	mov	r17, r1
    2090:	e8 22       	and	r14, r24
    2092:	f9 22       	and	r15, r25
    2094:	0a 23       	and	r16, r26
    2096:	1b 23       	and	r17, r27
    2098:	60 e4       	ldi	r22, 0x40	; 64
    209a:	e6 16       	cp	r14, r22
    209c:	f1 04       	cpc	r15, r1
    209e:	01 05       	cpc	r16, r1
    20a0:	11 05       	cpc	r17, r1
    20a2:	61 f4       	brne	.+24     	; 0x20bc <__mulsf3+0x1d2>
    20a4:	87 fd       	sbrc	r24, 7
    20a6:	0a c0       	rjmp	.+20     	; 0x20bc <__mulsf3+0x1d2>
    20a8:	21 15       	cp	r18, r1
    20aa:	31 05       	cpc	r19, r1
    20ac:	41 05       	cpc	r20, r1
    20ae:	51 05       	cpc	r21, r1
    20b0:	29 f0       	breq	.+10     	; 0x20bc <__mulsf3+0x1d2>
    20b2:	80 5c       	subi	r24, 0xC0	; 192
    20b4:	9f 4f       	sbci	r25, 0xFF	; 255
    20b6:	af 4f       	sbci	r26, 0xFF	; 255
    20b8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ba:	80 78       	andi	r24, 0x80	; 128
    20bc:	8d 8f       	std	Y+29, r24	; 0x1d
    20be:	9e 8f       	std	Y+30, r25	; 0x1e
    20c0:	af 8f       	std	Y+31, r26	; 0x1f
    20c2:	b8 a3       	std	Y+32, r27	; 0x20
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	89 8f       	std	Y+25, r24	; 0x19
    20c8:	ce 01       	movw	r24, r28
    20ca:	49 96       	adiw	r24, 0x19	; 25
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <__mulsf3+0x1e8>
    20ce:	88 e4       	ldi	r24, 0x48	; 72
    20d0:	92 e0       	ldi	r25, 0x02	; 2
    20d2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__pack_f>
    20d6:	a0 96       	adiw	r28, 0x20	; 32
    20d8:	e2 e1       	ldi	r30, 0x12	; 18
    20da:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__epilogue_restores__>

000020de <__divsf3>:
    20de:	a8 e1       	ldi	r26, 0x18	; 24
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e5 e7       	ldi	r30, 0x75	; 117
    20e4:	f0 e1       	ldi	r31, 0x10	; 16
    20e6:	0c 94 15 14 	jmp	0x282a	; 0x282a <__prologue_saves__+0x10>
    20ea:	69 83       	std	Y+1, r22	; 0x01
    20ec:	7a 83       	std	Y+2, r23	; 0x02
    20ee:	8b 83       	std	Y+3, r24	; 0x03
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	2d 83       	std	Y+5, r18	; 0x05
    20f4:	3e 83       	std	Y+6, r19	; 0x06
    20f6:	4f 83       	std	Y+7, r20	; 0x07
    20f8:	58 87       	std	Y+8, r21	; 0x08
    20fa:	8e 01       	movw	r16, r28
    20fc:	07 5f       	subi	r16, 0xF7	; 247
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	ce 01       	movw	r24, r28
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	b8 01       	movw	r22, r16
    2106:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    210a:	81 e1       	ldi	r24, 0x11	; 17
    210c:	e8 2e       	mov	r14, r24
    210e:	f1 2c       	mov	r15, r1
    2110:	ec 0e       	add	r14, r28
    2112:	fd 1e       	adc	r15, r29
    2114:	ce 01       	movw	r24, r28
    2116:	05 96       	adiw	r24, 0x05	; 5
    2118:	b7 01       	movw	r22, r14
    211a:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    211e:	99 85       	ldd	r25, Y+9	; 0x09
    2120:	92 30       	cpi	r25, 0x02	; 2
    2122:	08 f4       	brcc	.+2      	; 0x2126 <__divsf3+0x48>
    2124:	83 c0       	rjmp	.+262    	; 0x222c <__divsf3+0x14e>
    2126:	89 89       	ldd	r24, Y+17	; 0x11
    2128:	82 30       	cpi	r24, 0x02	; 2
    212a:	08 f4       	brcc	.+2      	; 0x212e <__divsf3+0x50>
    212c:	7b c0       	rjmp	.+246    	; 0x2224 <__divsf3+0x146>
    212e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2130:	3a 89       	ldd	r19, Y+18	; 0x12
    2132:	23 27       	eor	r18, r19
    2134:	2a 87       	std	Y+10, r18	; 0x0a
    2136:	94 30       	cpi	r25, 0x04	; 4
    2138:	11 f0       	breq	.+4      	; 0x213e <__divsf3+0x60>
    213a:	92 30       	cpi	r25, 0x02	; 2
    213c:	21 f4       	brne	.+8      	; 0x2146 <__divsf3+0x68>
    213e:	98 17       	cp	r25, r24
    2140:	09 f0       	breq	.+2      	; 0x2144 <__divsf3+0x66>
    2142:	6c c0       	rjmp	.+216    	; 0x221c <__divsf3+0x13e>
    2144:	71 c0       	rjmp	.+226    	; 0x2228 <__divsf3+0x14a>
    2146:	84 30       	cpi	r24, 0x04	; 4
    2148:	39 f4       	brne	.+14     	; 0x2158 <__divsf3+0x7a>
    214a:	1d 86       	std	Y+13, r1	; 0x0d
    214c:	1e 86       	std	Y+14, r1	; 0x0e
    214e:	1f 86       	std	Y+15, r1	; 0x0f
    2150:	18 8a       	std	Y+16, r1	; 0x10
    2152:	1c 86       	std	Y+12, r1	; 0x0c
    2154:	1b 86       	std	Y+11, r1	; 0x0b
    2156:	6a c0       	rjmp	.+212    	; 0x222c <__divsf3+0x14e>
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	19 f4       	brne	.+6      	; 0x2162 <__divsf3+0x84>
    215c:	84 e0       	ldi	r24, 0x04	; 4
    215e:	89 87       	std	Y+9, r24	; 0x09
    2160:	65 c0       	rjmp	.+202    	; 0x222c <__divsf3+0x14e>
    2162:	8b 85       	ldd	r24, Y+11	; 0x0b
    2164:	9c 85       	ldd	r25, Y+12	; 0x0c
    2166:	2b 89       	ldd	r18, Y+19	; 0x13
    2168:	3c 89       	ldd	r19, Y+20	; 0x14
    216a:	82 1b       	sub	r24, r18
    216c:	93 0b       	sbc	r25, r19
    216e:	9c 87       	std	Y+12, r25	; 0x0c
    2170:	8b 87       	std	Y+11, r24	; 0x0b
    2172:	2d 85       	ldd	r18, Y+13	; 0x0d
    2174:	3e 85       	ldd	r19, Y+14	; 0x0e
    2176:	4f 85       	ldd	r20, Y+15	; 0x0f
    2178:	58 89       	ldd	r21, Y+16	; 0x10
    217a:	ed 88       	ldd	r14, Y+21	; 0x15
    217c:	fe 88       	ldd	r15, Y+22	; 0x16
    217e:	0f 89       	ldd	r16, Y+23	; 0x17
    2180:	18 8d       	ldd	r17, Y+24	; 0x18
    2182:	2e 15       	cp	r18, r14
    2184:	3f 05       	cpc	r19, r15
    2186:	40 07       	cpc	r20, r16
    2188:	51 07       	cpc	r21, r17
    218a:	38 f4       	brcc	.+14     	; 0x219a <__divsf3+0xbc>
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	44 1f       	adc	r20, r20
    2192:	55 1f       	adc	r21, r21
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	8b 87       	std	Y+11, r24	; 0x0b
    219a:	6f e1       	ldi	r22, 0x1F	; 31
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	a1 2c       	mov	r10, r1
    21a0:	b1 2c       	mov	r11, r1
    21a2:	c1 2c       	mov	r12, r1
    21a4:	a0 e4       	ldi	r26, 0x40	; 64
    21a6:	da 2e       	mov	r13, r26
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	dc 01       	movw	r26, r24
    21ae:	2e 15       	cp	r18, r14
    21b0:	3f 05       	cpc	r19, r15
    21b2:	40 07       	cpc	r20, r16
    21b4:	51 07       	cpc	r21, r17
    21b6:	40 f0       	brcs	.+16     	; 0x21c8 <__divsf3+0xea>
    21b8:	8a 29       	or	r24, r10
    21ba:	9b 29       	or	r25, r11
    21bc:	ac 29       	or	r26, r12
    21be:	bd 29       	or	r27, r13
    21c0:	2e 19       	sub	r18, r14
    21c2:	3f 09       	sbc	r19, r15
    21c4:	40 0b       	sbc	r20, r16
    21c6:	51 0b       	sbc	r21, r17
    21c8:	d6 94       	lsr	r13
    21ca:	c7 94       	ror	r12
    21cc:	b7 94       	ror	r11
    21ce:	a7 94       	ror	r10
    21d0:	22 0f       	add	r18, r18
    21d2:	33 1f       	adc	r19, r19
    21d4:	44 1f       	adc	r20, r20
    21d6:	55 1f       	adc	r21, r21
    21d8:	61 50       	subi	r22, 0x01	; 1
    21da:	70 40       	sbci	r23, 0x00	; 0
    21dc:	41 f7       	brne	.-48     	; 0x21ae <__divsf3+0xd0>
    21de:	6f e7       	ldi	r22, 0x7F	; 127
    21e0:	e6 2e       	mov	r14, r22
    21e2:	f1 2c       	mov	r15, r1
    21e4:	01 2d       	mov	r16, r1
    21e6:	11 2d       	mov	r17, r1
    21e8:	e8 22       	and	r14, r24
    21ea:	f9 22       	and	r15, r25
    21ec:	0a 23       	and	r16, r26
    21ee:	1b 23       	and	r17, r27
    21f0:	60 e4       	ldi	r22, 0x40	; 64
    21f2:	e6 16       	cp	r14, r22
    21f4:	f1 04       	cpc	r15, r1
    21f6:	01 05       	cpc	r16, r1
    21f8:	11 05       	cpc	r17, r1
    21fa:	61 f4       	brne	.+24     	; 0x2214 <__divsf3+0x136>
    21fc:	87 fd       	sbrc	r24, 7
    21fe:	0a c0       	rjmp	.+20     	; 0x2214 <__divsf3+0x136>
    2200:	21 15       	cp	r18, r1
    2202:	31 05       	cpc	r19, r1
    2204:	41 05       	cpc	r20, r1
    2206:	51 05       	cpc	r21, r1
    2208:	29 f0       	breq	.+10     	; 0x2214 <__divsf3+0x136>
    220a:	80 5c       	subi	r24, 0xC0	; 192
    220c:	9f 4f       	sbci	r25, 0xFF	; 255
    220e:	af 4f       	sbci	r26, 0xFF	; 255
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	80 78       	andi	r24, 0x80	; 128
    2214:	8d 87       	std	Y+13, r24	; 0x0d
    2216:	9e 87       	std	Y+14, r25	; 0x0e
    2218:	af 87       	std	Y+15, r26	; 0x0f
    221a:	b8 8b       	std	Y+16, r27	; 0x10
    221c:	8e 01       	movw	r16, r28
    221e:	07 5f       	subi	r16, 0xF7	; 247
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	04 c0       	rjmp	.+8      	; 0x222c <__divsf3+0x14e>
    2224:	87 01       	movw	r16, r14
    2226:	02 c0       	rjmp	.+4      	; 0x222c <__divsf3+0x14e>
    2228:	08 e4       	ldi	r16, 0x48	; 72
    222a:	12 e0       	ldi	r17, 0x02	; 2
    222c:	c8 01       	movw	r24, r16
    222e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__pack_f>
    2232:	68 96       	adiw	r28, 0x18	; 24
    2234:	ea e0       	ldi	r30, 0x0A	; 10
    2236:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__epilogue_restores__+0x10>

0000223a <__gesf2>:
    223a:	a8 e1       	ldi	r26, 0x18	; 24
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e2       	ldi	r30, 0x23	; 35
    2240:	f1 e1       	ldi	r31, 0x11	; 17
    2242:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0x18>
    2246:	69 83       	std	Y+1, r22	; 0x01
    2248:	7a 83       	std	Y+2, r23	; 0x02
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	2d 83       	std	Y+5, r18	; 0x05
    2250:	3e 83       	std	Y+6, r19	; 0x06
    2252:	4f 83       	std	Y+7, r20	; 0x07
    2254:	58 87       	std	Y+8, r21	; 0x08
    2256:	8e 01       	movw	r16, r28
    2258:	07 5f       	subi	r16, 0xF7	; 247
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	b8 01       	movw	r22, r16
    2262:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    2266:	81 e1       	ldi	r24, 0x11	; 17
    2268:	e8 2e       	mov	r14, r24
    226a:	f1 2c       	mov	r15, r1
    226c:	ec 0e       	add	r14, r28
    226e:	fd 1e       	adc	r15, r29
    2270:	ce 01       	movw	r24, r28
    2272:	05 96       	adiw	r24, 0x05	; 5
    2274:	b7 01       	movw	r22, r14
    2276:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	40 f0       	brcs	.+16     	; 0x2290 <__gesf2+0x56>
    2280:	89 89       	ldd	r24, Y+17	; 0x11
    2282:	82 30       	cpi	r24, 0x02	; 2
    2284:	28 f0       	brcs	.+10     	; 0x2290 <__gesf2+0x56>
    2286:	c8 01       	movw	r24, r16
    2288:	b7 01       	movw	r22, r14
    228a:	0e 94 a8 13 	call	0x2750	; 0x2750 <__fpcmp_parts_f>
    228e:	01 c0       	rjmp	.+2      	; 0x2292 <__gesf2+0x58>
    2290:	8f ef       	ldi	r24, 0xFF	; 255
    2292:	68 96       	adiw	r28, 0x18	; 24
    2294:	e6 e0       	ldi	r30, 0x06	; 6
    2296:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0x18>

0000229a <__fixsfsi>:
    229a:	ac e0       	ldi	r26, 0x0C	; 12
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e3 e5       	ldi	r30, 0x53	; 83
    22a0:	f1 e1       	ldi	r31, 0x11	; 17
    22a2:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__+0x20>
    22a6:	69 83       	std	Y+1, r22	; 0x01
    22a8:	7a 83       	std	Y+2, r23	; 0x02
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	ce 01       	movw	r24, r28
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	be 01       	movw	r22, r28
    22b4:	6b 5f       	subi	r22, 0xFB	; 251
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	0e 94 3f 13 	call	0x267e	; 0x267e <__unpack_f>
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	82 30       	cpi	r24, 0x02	; 2
    22c0:	81 f1       	breq	.+96     	; 0x2322 <__fixsfsi+0x88>
    22c2:	82 30       	cpi	r24, 0x02	; 2
    22c4:	70 f1       	brcs	.+92     	; 0x2322 <__fixsfsi+0x88>
    22c6:	84 30       	cpi	r24, 0x04	; 4
    22c8:	21 f4       	brne	.+8      	; 0x22d2 <__fixsfsi+0x38>
    22ca:	8e 81       	ldd	r24, Y+6	; 0x06
    22cc:	88 23       	and	r24, r24
    22ce:	69 f1       	breq	.+90     	; 0x232a <__fixsfsi+0x90>
    22d0:	0a c0       	rjmp	.+20     	; 0x22e6 <__fixsfsi+0x4c>
    22d2:	2f 81       	ldd	r18, Y+7	; 0x07
    22d4:	38 85       	ldd	r19, Y+8	; 0x08
    22d6:	37 fd       	sbrc	r19, 7
    22d8:	24 c0       	rjmp	.+72     	; 0x2322 <__fixsfsi+0x88>
    22da:	6e 81       	ldd	r22, Y+6	; 0x06
    22dc:	2f 31       	cpi	r18, 0x1F	; 31
    22de:	31 05       	cpc	r19, r1
    22e0:	3c f0       	brlt	.+14     	; 0x22f0 <__fixsfsi+0x56>
    22e2:	66 23       	and	r22, r22
    22e4:	11 f1       	breq	.+68     	; 0x232a <__fixsfsi+0x90>
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	50 e8       	ldi	r21, 0x80	; 128
    22ee:	21 c0       	rjmp	.+66     	; 0x2332 <__fixsfsi+0x98>
    22f0:	8e e1       	ldi	r24, 0x1E	; 30
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	82 1b       	sub	r24, r18
    22f6:	93 0b       	sbc	r25, r19
    22f8:	29 85       	ldd	r18, Y+9	; 0x09
    22fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    22fc:	4b 85       	ldd	r20, Y+11	; 0x0b
    22fe:	5c 85       	ldd	r21, Y+12	; 0x0c
    2300:	04 c0       	rjmp	.+8      	; 0x230a <__fixsfsi+0x70>
    2302:	56 95       	lsr	r21
    2304:	47 95       	ror	r20
    2306:	37 95       	ror	r19
    2308:	27 95       	ror	r18
    230a:	8a 95       	dec	r24
    230c:	d2 f7       	brpl	.-12     	; 0x2302 <__fixsfsi+0x68>
    230e:	66 23       	and	r22, r22
    2310:	81 f0       	breq	.+32     	; 0x2332 <__fixsfsi+0x98>
    2312:	50 95       	com	r21
    2314:	40 95       	com	r20
    2316:	30 95       	com	r19
    2318:	21 95       	neg	r18
    231a:	3f 4f       	sbci	r19, 0xFF	; 255
    231c:	4f 4f       	sbci	r20, 0xFF	; 255
    231e:	5f 4f       	sbci	r21, 0xFF	; 255
    2320:	08 c0       	rjmp	.+16     	; 0x2332 <__fixsfsi+0x98>
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	a9 01       	movw	r20, r18
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <__fixsfsi+0x98>
    232a:	2f ef       	ldi	r18, 0xFF	; 255
    232c:	3f ef       	ldi	r19, 0xFF	; 255
    232e:	4f ef       	ldi	r20, 0xFF	; 255
    2330:	5f e7       	ldi	r21, 0x7F	; 127
    2332:	b9 01       	movw	r22, r18
    2334:	ca 01       	movw	r24, r20
    2336:	2c 96       	adiw	r28, 0x0c	; 12
    2338:	e2 e0       	ldi	r30, 0x02	; 2
    233a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__+0x20>

0000233e <__floatunsisf>:
    233e:	a8 e0       	ldi	r26, 0x08	; 8
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 ea       	ldi	r30, 0xA5	; 165
    2344:	f1 e1       	ldi	r31, 0x11	; 17
    2346:	0c 94 17 14 	jmp	0x282e	; 0x282e <__prologue_saves__+0x14>
    234a:	7b 01       	movw	r14, r22
    234c:	8c 01       	movw	r16, r24
    234e:	1a 82       	std	Y+2, r1	; 0x02
    2350:	61 15       	cp	r22, r1
    2352:	71 05       	cpc	r23, r1
    2354:	81 05       	cpc	r24, r1
    2356:	91 05       	cpc	r25, r1
    2358:	19 f4       	brne	.+6      	; 0x2360 <__floatunsisf+0x22>
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	5f c0       	rjmp	.+190    	; 0x241e <__floatunsisf+0xe0>
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	8e e1       	ldi	r24, 0x1E	; 30
    2366:	c8 2e       	mov	r12, r24
    2368:	d1 2c       	mov	r13, r1
    236a:	dc 82       	std	Y+4, r13	; 0x04
    236c:	cb 82       	std	Y+3, r12	; 0x03
    236e:	ed 82       	std	Y+5, r14	; 0x05
    2370:	fe 82       	std	Y+6, r15	; 0x06
    2372:	0f 83       	std	Y+7, r16	; 0x07
    2374:	18 87       	std	Y+8, r17	; 0x08
    2376:	c8 01       	movw	r24, r16
    2378:	b7 01       	movw	r22, r14
    237a:	0e 94 17 12 	call	0x242e	; 0x242e <__clzsi2>
    237e:	fc 01       	movw	r30, r24
    2380:	31 97       	sbiw	r30, 0x01	; 1
    2382:	f7 ff       	sbrs	r31, 7
    2384:	3a c0       	rjmp	.+116    	; 0x23fa <__floatunsisf+0xbc>
    2386:	aa 27       	eor	r26, r26
    2388:	bb 27       	eor	r27, r27
    238a:	ae 1b       	sub	r26, r30
    238c:	bf 0b       	sbc	r27, r31
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	0a 2e       	mov	r0, r26
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <__floatunsisf+0x64>
    239a:	22 0f       	add	r18, r18
    239c:	33 1f       	adc	r19, r19
    239e:	44 1f       	adc	r20, r20
    23a0:	55 1f       	adc	r21, r21
    23a2:	0a 94       	dec	r0
    23a4:	d2 f7       	brpl	.-12     	; 0x239a <__floatunsisf+0x5c>
    23a6:	21 50       	subi	r18, 0x01	; 1
    23a8:	30 40       	sbci	r19, 0x00	; 0
    23aa:	40 40       	sbci	r20, 0x00	; 0
    23ac:	50 40       	sbci	r21, 0x00	; 0
    23ae:	2e 21       	and	r18, r14
    23b0:	3f 21       	and	r19, r15
    23b2:	40 23       	and	r20, r16
    23b4:	51 23       	and	r21, r17
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	21 15       	cp	r18, r1
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 05       	cpc	r20, r1
    23c4:	51 05       	cpc	r21, r1
    23c6:	19 f4       	brne	.+6      	; 0x23ce <__floatunsisf+0x90>
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	cb 01       	movw	r24, r22
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <__floatunsisf+0x9a>
    23d0:	16 95       	lsr	r17
    23d2:	07 95       	ror	r16
    23d4:	f7 94       	ror	r15
    23d6:	e7 94       	ror	r14
    23d8:	aa 95       	dec	r26
    23da:	d2 f7       	brpl	.-12     	; 0x23d0 <__floatunsisf+0x92>
    23dc:	e6 2a       	or	r14, r22
    23de:	f7 2a       	or	r15, r23
    23e0:	08 2b       	or	r16, r24
    23e2:	19 2b       	or	r17, r25
    23e4:	ed 82       	std	Y+5, r14	; 0x05
    23e6:	fe 82       	std	Y+6, r15	; 0x06
    23e8:	0f 83       	std	Y+7, r16	; 0x07
    23ea:	18 87       	std	Y+8, r17	; 0x08
    23ec:	8e e1       	ldi	r24, 0x1E	; 30
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	8e 1b       	sub	r24, r30
    23f2:	9f 0b       	sbc	r25, r31
    23f4:	9c 83       	std	Y+4, r25	; 0x04
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	12 c0       	rjmp	.+36     	; 0x241e <__floatunsisf+0xe0>
    23fa:	30 97       	sbiw	r30, 0x00	; 0
    23fc:	81 f0       	breq	.+32     	; 0x241e <__floatunsisf+0xe0>
    23fe:	0e 2e       	mov	r0, r30
    2400:	04 c0       	rjmp	.+8      	; 0x240a <__floatunsisf+0xcc>
    2402:	ee 0c       	add	r14, r14
    2404:	ff 1c       	adc	r15, r15
    2406:	00 1f       	adc	r16, r16
    2408:	11 1f       	adc	r17, r17
    240a:	0a 94       	dec	r0
    240c:	d2 f7       	brpl	.-12     	; 0x2402 <__floatunsisf+0xc4>
    240e:	ed 82       	std	Y+5, r14	; 0x05
    2410:	fe 82       	std	Y+6, r15	; 0x06
    2412:	0f 83       	std	Y+7, r16	; 0x07
    2414:	18 87       	std	Y+8, r17	; 0x08
    2416:	ce 1a       	sub	r12, r30
    2418:	df 0a       	sbc	r13, r31
    241a:	dc 82       	std	Y+4, r13	; 0x04
    241c:	cb 82       	std	Y+3, r12	; 0x03
    241e:	ce 01       	movw	r24, r28
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__pack_f>
    2426:	28 96       	adiw	r28, 0x08	; 8
    2428:	e8 e0       	ldi	r30, 0x08	; 8
    242a:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__epilogue_restores__+0x14>

0000242e <__clzsi2>:
    242e:	af 92       	push	r10
    2430:	bf 92       	push	r11
    2432:	cf 92       	push	r12
    2434:	df 92       	push	r13
    2436:	ef 92       	push	r14
    2438:	ff 92       	push	r15
    243a:	0f 93       	push	r16
    243c:	1f 93       	push	r17
    243e:	7b 01       	movw	r14, r22
    2440:	8c 01       	movw	r16, r24
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	e8 16       	cp	r14, r24
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	f8 06       	cpc	r15, r24
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	08 07       	cpc	r16, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	18 07       	cpc	r17, r24
    2452:	58 f4       	brcc	.+22     	; 0x246a <__clzsi2+0x3c>
    2454:	ef ef       	ldi	r30, 0xFF	; 255
    2456:	ee 16       	cp	r14, r30
    2458:	f1 04       	cpc	r15, r1
    245a:	01 05       	cpc	r16, r1
    245c:	11 05       	cpc	r17, r1
    245e:	09 f0       	breq	.+2      	; 0x2462 <__clzsi2+0x34>
    2460:	90 f4       	brcc	.+36     	; 0x2486 <__clzsi2+0x58>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	dc 01       	movw	r26, r24
    2468:	17 c0       	rjmp	.+46     	; 0x2498 <__clzsi2+0x6a>
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	ef 16       	cp	r14, r31
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	ff 06       	cpc	r15, r31
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	0f 07       	cpc	r16, r31
    2476:	f1 e0       	ldi	r31, 0x01	; 1
    2478:	1f 07       	cpc	r17, r31
    247a:	50 f4       	brcc	.+20     	; 0x2490 <__clzsi2+0x62>
    247c:	80 e1       	ldi	r24, 0x10	; 16
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e0       	ldi	r26, 0x00	; 0
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	09 c0       	rjmp	.+18     	; 0x2498 <__clzsi2+0x6a>
    2486:	88 e0       	ldi	r24, 0x08	; 8
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	a0 e0       	ldi	r26, 0x00	; 0
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <__clzsi2+0x6a>
    2490:	88 e1       	ldi	r24, 0x18	; 24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	20 e2       	ldi	r18, 0x20	; 32
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	28 1b       	sub	r18, r24
    24a2:	39 0b       	sbc	r19, r25
    24a4:	4a 0b       	sbc	r20, r26
    24a6:	5b 0b       	sbc	r21, r27
    24a8:	57 01       	movw	r10, r14
    24aa:	68 01       	movw	r12, r16
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <__clzsi2+0x88>
    24ae:	d6 94       	lsr	r13
    24b0:	c7 94       	ror	r12
    24b2:	b7 94       	ror	r11
    24b4:	a7 94       	ror	r10
    24b6:	8a 95       	dec	r24
    24b8:	d2 f7       	brpl	.-12     	; 0x24ae <__clzsi2+0x80>
    24ba:	d6 01       	movw	r26, r12
    24bc:	c5 01       	movw	r24, r10
    24be:	80 5b       	subi	r24, 0xB0	; 176
    24c0:	9d 4f       	sbci	r25, 0xFD	; 253
    24c2:	fc 01       	movw	r30, r24
    24c4:	80 81       	ld	r24, Z
    24c6:	28 1b       	sub	r18, r24
    24c8:	31 09       	sbc	r19, r1
    24ca:	41 09       	sbc	r20, r1
    24cc:	51 09       	sbc	r21, r1
    24ce:	c9 01       	movw	r24, r18
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	cf 90       	pop	r12
    24dc:	bf 90       	pop	r11
    24de:	af 90       	pop	r10
    24e0:	08 95       	ret

000024e2 <__pack_f>:
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	fc 01       	movw	r30, r24
    24f0:	24 81       	ldd	r18, Z+4	; 0x04
    24f2:	35 81       	ldd	r19, Z+5	; 0x05
    24f4:	46 81       	ldd	r20, Z+6	; 0x06
    24f6:	57 81       	ldd	r21, Z+7	; 0x07
    24f8:	61 81       	ldd	r22, Z+1	; 0x01
    24fa:	80 81       	ld	r24, Z
    24fc:	82 30       	cpi	r24, 0x02	; 2
    24fe:	20 f4       	brcc	.+8      	; 0x2508 <__pack_f+0x26>
    2500:	40 61       	ori	r20, 0x10	; 16
    2502:	ef ef       	ldi	r30, 0xFF	; 255
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	a3 c0       	rjmp	.+326    	; 0x264e <__pack_f+0x16c>
    2508:	84 30       	cpi	r24, 0x04	; 4
    250a:	09 f4       	brne	.+2      	; 0x250e <__pack_f+0x2c>
    250c:	9b c0       	rjmp	.+310    	; 0x2644 <__pack_f+0x162>
    250e:	82 30       	cpi	r24, 0x02	; 2
    2510:	09 f4       	brne	.+2      	; 0x2514 <__pack_f+0x32>
    2512:	92 c0       	rjmp	.+292    	; 0x2638 <__pack_f+0x156>
    2514:	21 15       	cp	r18, r1
    2516:	31 05       	cpc	r19, r1
    2518:	41 05       	cpc	r20, r1
    251a:	51 05       	cpc	r21, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <__pack_f+0x3e>
    251e:	8f c0       	rjmp	.+286    	; 0x263e <__pack_f+0x15c>
    2520:	02 80       	ldd	r0, Z+2	; 0x02
    2522:	f3 81       	ldd	r31, Z+3	; 0x03
    2524:	e0 2d       	mov	r30, r0
    2526:	8f ef       	ldi	r24, 0xFF	; 255
    2528:	e2 38       	cpi	r30, 0x82	; 130
    252a:	f8 07       	cpc	r31, r24
    252c:	0c f0       	brlt	.+2      	; 0x2530 <__pack_f+0x4e>
    252e:	5a c0       	rjmp	.+180    	; 0x25e4 <__pack_f+0x102>
    2530:	c2 e8       	ldi	r28, 0x82	; 130
    2532:	df ef       	ldi	r29, 0xFF	; 255
    2534:	ce 1b       	sub	r28, r30
    2536:	df 0b       	sbc	r29, r31
    2538:	ca 31       	cpi	r28, 0x1A	; 26
    253a:	d1 05       	cpc	r29, r1
    253c:	6c f5       	brge	.+90     	; 0x2598 <__pack_f+0xb6>
    253e:	79 01       	movw	r14, r18
    2540:	8a 01       	movw	r16, r20
    2542:	0c 2e       	mov	r0, r28
    2544:	04 c0       	rjmp	.+8      	; 0x254e <__pack_f+0x6c>
    2546:	16 95       	lsr	r17
    2548:	07 95       	ror	r16
    254a:	f7 94       	ror	r15
    254c:	e7 94       	ror	r14
    254e:	0a 94       	dec	r0
    2550:	d2 f7       	brpl	.-12     	; 0x2546 <__pack_f+0x64>
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	0c 2e       	mov	r0, r28
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <__pack_f+0x84>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	aa 1f       	adc	r26, r26
    2564:	bb 1f       	adc	r27, r27
    2566:	0a 94       	dec	r0
    2568:	d2 f7       	brpl	.-12     	; 0x255e <__pack_f+0x7c>
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	a1 09       	sbc	r26, r1
    256e:	b1 09       	sbc	r27, r1
    2570:	82 23       	and	r24, r18
    2572:	93 23       	and	r25, r19
    2574:	a4 23       	and	r26, r20
    2576:	b5 23       	and	r27, r21
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	a1 05       	cpc	r26, r1
    2584:	b1 05       	cpc	r27, r1
    2586:	19 f4       	brne	.+6      	; 0x258e <__pack_f+0xac>
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	a9 01       	movw	r20, r18
    258e:	2e 29       	or	r18, r14
    2590:	3f 29       	or	r19, r15
    2592:	40 2b       	or	r20, r16
    2594:	51 2b       	or	r21, r17
    2596:	03 c0       	rjmp	.+6      	; 0x259e <__pack_f+0xbc>
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	a9 01       	movw	r20, r18
    259e:	da 01       	movw	r26, r20
    25a0:	c9 01       	movw	r24, r18
    25a2:	8f 77       	andi	r24, 0x7F	; 127
    25a4:	90 70       	andi	r25, 0x00	; 0
    25a6:	a0 70       	andi	r26, 0x00	; 0
    25a8:	b0 70       	andi	r27, 0x00	; 0
    25aa:	80 34       	cpi	r24, 0x40	; 64
    25ac:	91 05       	cpc	r25, r1
    25ae:	a1 05       	cpc	r26, r1
    25b0:	b1 05       	cpc	r27, r1
    25b2:	39 f4       	brne	.+14     	; 0x25c2 <__pack_f+0xe0>
    25b4:	27 ff       	sbrs	r18, 7
    25b6:	09 c0       	rjmp	.+18     	; 0x25ca <__pack_f+0xe8>
    25b8:	20 5c       	subi	r18, 0xC0	; 192
    25ba:	3f 4f       	sbci	r19, 0xFF	; 255
    25bc:	4f 4f       	sbci	r20, 0xFF	; 255
    25be:	5f 4f       	sbci	r21, 0xFF	; 255
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <__pack_f+0xe8>
    25c2:	21 5c       	subi	r18, 0xC1	; 193
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	4f 4f       	sbci	r20, 0xFF	; 255
    25c8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ca:	e1 e0       	ldi	r30, 0x01	; 1
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	20 30       	cpi	r18, 0x00	; 0
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	38 07       	cpc	r19, r24
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	48 07       	cpc	r20, r24
    25d8:	80 e4       	ldi	r24, 0x40	; 64
    25da:	58 07       	cpc	r21, r24
    25dc:	28 f5       	brcc	.+74     	; 0x2628 <__pack_f+0x146>
    25de:	e0 e0       	ldi	r30, 0x00	; 0
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	22 c0       	rjmp	.+68     	; 0x2628 <__pack_f+0x146>
    25e4:	e0 38       	cpi	r30, 0x80	; 128
    25e6:	f1 05       	cpc	r31, r1
    25e8:	6c f5       	brge	.+90     	; 0x2644 <__pack_f+0x162>
    25ea:	e1 58       	subi	r30, 0x81	; 129
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	da 01       	movw	r26, r20
    25f0:	c9 01       	movw	r24, r18
    25f2:	8f 77       	andi	r24, 0x7F	; 127
    25f4:	90 70       	andi	r25, 0x00	; 0
    25f6:	a0 70       	andi	r26, 0x00	; 0
    25f8:	b0 70       	andi	r27, 0x00	; 0
    25fa:	80 34       	cpi	r24, 0x40	; 64
    25fc:	91 05       	cpc	r25, r1
    25fe:	a1 05       	cpc	r26, r1
    2600:	b1 05       	cpc	r27, r1
    2602:	39 f4       	brne	.+14     	; 0x2612 <__pack_f+0x130>
    2604:	27 ff       	sbrs	r18, 7
    2606:	09 c0       	rjmp	.+18     	; 0x261a <__pack_f+0x138>
    2608:	20 5c       	subi	r18, 0xC0	; 192
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	4f 4f       	sbci	r20, 0xFF	; 255
    260e:	5f 4f       	sbci	r21, 0xFF	; 255
    2610:	04 c0       	rjmp	.+8      	; 0x261a <__pack_f+0x138>
    2612:	21 5c       	subi	r18, 0xC1	; 193
    2614:	3f 4f       	sbci	r19, 0xFF	; 255
    2616:	4f 4f       	sbci	r20, 0xFF	; 255
    2618:	5f 4f       	sbci	r21, 0xFF	; 255
    261a:	57 ff       	sbrs	r21, 7
    261c:	05 c0       	rjmp	.+10     	; 0x2628 <__pack_f+0x146>
    261e:	56 95       	lsr	r21
    2620:	47 95       	ror	r20
    2622:	37 95       	ror	r19
    2624:	27 95       	ror	r18
    2626:	31 96       	adiw	r30, 0x01	; 1
    2628:	87 e0       	ldi	r24, 0x07	; 7
    262a:	56 95       	lsr	r21
    262c:	47 95       	ror	r20
    262e:	37 95       	ror	r19
    2630:	27 95       	ror	r18
    2632:	8a 95       	dec	r24
    2634:	d1 f7       	brne	.-12     	; 0x262a <__pack_f+0x148>
    2636:	0b c0       	rjmp	.+22     	; 0x264e <__pack_f+0x16c>
    2638:	e0 e0       	ldi	r30, 0x00	; 0
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	05 c0       	rjmp	.+10     	; 0x2648 <__pack_f+0x166>
    263e:	e0 e0       	ldi	r30, 0x00	; 0
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	05 c0       	rjmp	.+10     	; 0x264e <__pack_f+0x16c>
    2644:	ef ef       	ldi	r30, 0xFF	; 255
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	a9 01       	movw	r20, r18
    264e:	8e 2f       	mov	r24, r30
    2650:	87 95       	ror	r24
    2652:	88 27       	eor	r24, r24
    2654:	87 95       	ror	r24
    2656:	94 2f       	mov	r25, r20
    2658:	9f 77       	andi	r25, 0x7F	; 127
    265a:	67 95       	ror	r22
    265c:	66 27       	eor	r22, r22
    265e:	67 95       	ror	r22
    2660:	e6 95       	lsr	r30
    2662:	e2 2e       	mov	r14, r18
    2664:	a9 2f       	mov	r26, r25
    2666:	a8 2b       	or	r26, r24
    2668:	fe 2f       	mov	r31, r30
    266a:	f6 2b       	or	r31, r22
    266c:	62 2f       	mov	r22, r18
    266e:	73 2f       	mov	r23, r19
    2670:	8a 2f       	mov	r24, r26
    2672:	9f 2f       	mov	r25, r31
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	e6 e0       	ldi	r30, 0x06	; 6
    267a:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0x18>

0000267e <__unpack_f>:
    267e:	dc 01       	movw	r26, r24
    2680:	fb 01       	movw	r30, r22
    2682:	2c 91       	ld	r18, X
    2684:	11 96       	adiw	r26, 0x01	; 1
    2686:	3c 91       	ld	r19, X
    2688:	11 97       	sbiw	r26, 0x01	; 1
    268a:	12 96       	adiw	r26, 0x02	; 2
    268c:	8c 91       	ld	r24, X
    268e:	12 97       	sbiw	r26, 0x02	; 2
    2690:	48 2f       	mov	r20, r24
    2692:	4f 77       	andi	r20, 0x7F	; 127
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	98 2f       	mov	r25, r24
    2698:	99 1f       	adc	r25, r25
    269a:	99 27       	eor	r25, r25
    269c:	99 1f       	adc	r25, r25
    269e:	13 96       	adiw	r26, 0x03	; 3
    26a0:	6c 91       	ld	r22, X
    26a2:	13 97       	sbiw	r26, 0x03	; 3
    26a4:	86 2f       	mov	r24, r22
    26a6:	88 0f       	add	r24, r24
    26a8:	89 2b       	or	r24, r25
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	66 1f       	adc	r22, r22
    26ae:	66 27       	eor	r22, r22
    26b0:	66 1f       	adc	r22, r22
    26b2:	61 83       	std	Z+1, r22	; 0x01
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	39 f5       	brne	.+78     	; 0x2706 <__unpack_f+0x88>
    26b8:	21 15       	cp	r18, r1
    26ba:	31 05       	cpc	r19, r1
    26bc:	41 05       	cpc	r20, r1
    26be:	51 05       	cpc	r21, r1
    26c0:	11 f4       	brne	.+4      	; 0x26c6 <__unpack_f+0x48>
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	29 c0       	rjmp	.+82     	; 0x2718 <__unpack_f+0x9a>
    26c6:	82 e8       	ldi	r24, 0x82	; 130
    26c8:	9f ef       	ldi	r25, 0xFF	; 255
    26ca:	93 83       	std	Z+3, r25	; 0x03
    26cc:	82 83       	std	Z+2, r24	; 0x02
    26ce:	67 e0       	ldi	r22, 0x07	; 7
    26d0:	22 0f       	add	r18, r18
    26d2:	33 1f       	adc	r19, r19
    26d4:	44 1f       	adc	r20, r20
    26d6:	55 1f       	adc	r21, r21
    26d8:	6a 95       	dec	r22
    26da:	d1 f7       	brne	.-12     	; 0x26d0 <__unpack_f+0x52>
    26dc:	83 e0       	ldi	r24, 0x03	; 3
    26de:	80 83       	st	Z, r24
    26e0:	09 c0       	rjmp	.+18     	; 0x26f4 <__unpack_f+0x76>
    26e2:	22 0f       	add	r18, r18
    26e4:	33 1f       	adc	r19, r19
    26e6:	44 1f       	adc	r20, r20
    26e8:	55 1f       	adc	r21, r21
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	93 83       	std	Z+3, r25	; 0x03
    26f2:	82 83       	std	Z+2, r24	; 0x02
    26f4:	20 30       	cpi	r18, 0x00	; 0
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	38 07       	cpc	r19, r24
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	48 07       	cpc	r20, r24
    26fe:	80 e4       	ldi	r24, 0x40	; 64
    2700:	58 07       	cpc	r21, r24
    2702:	78 f3       	brcs	.-34     	; 0x26e2 <__unpack_f+0x64>
    2704:	20 c0       	rjmp	.+64     	; 0x2746 <__unpack_f+0xc8>
    2706:	8f 3f       	cpi	r24, 0xFF	; 255
    2708:	91 05       	cpc	r25, r1
    270a:	79 f4       	brne	.+30     	; 0x272a <__unpack_f+0xac>
    270c:	21 15       	cp	r18, r1
    270e:	31 05       	cpc	r19, r1
    2710:	41 05       	cpc	r20, r1
    2712:	51 05       	cpc	r21, r1
    2714:	19 f4       	brne	.+6      	; 0x271c <__unpack_f+0x9e>
    2716:	84 e0       	ldi	r24, 0x04	; 4
    2718:	80 83       	st	Z, r24
    271a:	08 95       	ret
    271c:	44 ff       	sbrs	r20, 4
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <__unpack_f+0xa8>
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	80 83       	st	Z, r24
    2724:	10 c0       	rjmp	.+32     	; 0x2746 <__unpack_f+0xc8>
    2726:	10 82       	st	Z, r1
    2728:	0e c0       	rjmp	.+28     	; 0x2746 <__unpack_f+0xc8>
    272a:	8f 57       	subi	r24, 0x7F	; 127
    272c:	90 40       	sbci	r25, 0x00	; 0
    272e:	93 83       	std	Z+3, r25	; 0x03
    2730:	82 83       	std	Z+2, r24	; 0x02
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	80 83       	st	Z, r24
    2736:	87 e0       	ldi	r24, 0x07	; 7
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	44 1f       	adc	r20, r20
    273e:	55 1f       	adc	r21, r21
    2740:	8a 95       	dec	r24
    2742:	d1 f7       	brne	.-12     	; 0x2738 <__unpack_f+0xba>
    2744:	50 64       	ori	r21, 0x40	; 64
    2746:	24 83       	std	Z+4, r18	; 0x04
    2748:	35 83       	std	Z+5, r19	; 0x05
    274a:	46 83       	std	Z+6, r20	; 0x06
    274c:	57 83       	std	Z+7, r21	; 0x07
    274e:	08 95       	ret

00002750 <__fpcmp_parts_f>:
    2750:	fc 01       	movw	r30, r24
    2752:	db 01       	movw	r26, r22
    2754:	90 81       	ld	r25, Z
    2756:	92 30       	cpi	r25, 0x02	; 2
    2758:	08 f4       	brcc	.+2      	; 0x275c <__fpcmp_parts_f+0xc>
    275a:	49 c0       	rjmp	.+146    	; 0x27ee <__fpcmp_parts_f+0x9e>
    275c:	8c 91       	ld	r24, X
    275e:	82 30       	cpi	r24, 0x02	; 2
    2760:	08 f4       	brcc	.+2      	; 0x2764 <__fpcmp_parts_f+0x14>
    2762:	45 c0       	rjmp	.+138    	; 0x27ee <__fpcmp_parts_f+0x9e>
    2764:	94 30       	cpi	r25, 0x04	; 4
    2766:	51 f4       	brne	.+20     	; 0x277c <__fpcmp_parts_f+0x2c>
    2768:	61 81       	ldd	r22, Z+1	; 0x01
    276a:	84 30       	cpi	r24, 0x04	; 4
    276c:	b1 f5       	brne	.+108    	; 0x27da <__fpcmp_parts_f+0x8a>
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	2c 91       	ld	r18, X
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	26 1b       	sub	r18, r22
    2778:	31 09       	sbc	r19, r1
    277a:	41 c0       	rjmp	.+130    	; 0x27fe <__fpcmp_parts_f+0xae>
    277c:	84 30       	cpi	r24, 0x04	; 4
    277e:	21 f0       	breq	.+8      	; 0x2788 <__fpcmp_parts_f+0x38>
    2780:	92 30       	cpi	r25, 0x02	; 2
    2782:	41 f4       	brne	.+16     	; 0x2794 <__fpcmp_parts_f+0x44>
    2784:	82 30       	cpi	r24, 0x02	; 2
    2786:	b1 f1       	breq	.+108    	; 0x27f4 <__fpcmp_parts_f+0xa4>
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	8c 91       	ld	r24, X
    278c:	11 97       	sbiw	r26, 0x01	; 1
    278e:	88 23       	and	r24, r24
    2790:	a1 f1       	breq	.+104    	; 0x27fa <__fpcmp_parts_f+0xaa>
    2792:	2d c0       	rjmp	.+90     	; 0x27ee <__fpcmp_parts_f+0x9e>
    2794:	61 81       	ldd	r22, Z+1	; 0x01
    2796:	82 30       	cpi	r24, 0x02	; 2
    2798:	01 f1       	breq	.+64     	; 0x27da <__fpcmp_parts_f+0x8a>
    279a:	11 96       	adiw	r26, 0x01	; 1
    279c:	8c 91       	ld	r24, X
    279e:	11 97       	sbiw	r26, 0x01	; 1
    27a0:	68 17       	cp	r22, r24
    27a2:	d9 f4       	brne	.+54     	; 0x27da <__fpcmp_parts_f+0x8a>
    27a4:	22 81       	ldd	r18, Z+2	; 0x02
    27a6:	33 81       	ldd	r19, Z+3	; 0x03
    27a8:	12 96       	adiw	r26, 0x02	; 2
    27aa:	8d 91       	ld	r24, X+
    27ac:	9c 91       	ld	r25, X
    27ae:	13 97       	sbiw	r26, 0x03	; 3
    27b0:	82 17       	cp	r24, r18
    27b2:	93 07       	cpc	r25, r19
    27b4:	94 f0       	brlt	.+36     	; 0x27da <__fpcmp_parts_f+0x8a>
    27b6:	28 17       	cp	r18, r24
    27b8:	39 07       	cpc	r19, r25
    27ba:	bc f0       	brlt	.+46     	; 0x27ea <__fpcmp_parts_f+0x9a>
    27bc:	24 81       	ldd	r18, Z+4	; 0x04
    27be:	35 81       	ldd	r19, Z+5	; 0x05
    27c0:	46 81       	ldd	r20, Z+6	; 0x06
    27c2:	57 81       	ldd	r21, Z+7	; 0x07
    27c4:	14 96       	adiw	r26, 0x04	; 4
    27c6:	8d 91       	ld	r24, X+
    27c8:	9d 91       	ld	r25, X+
    27ca:	0d 90       	ld	r0, X+
    27cc:	bc 91       	ld	r27, X
    27ce:	a0 2d       	mov	r26, r0
    27d0:	82 17       	cp	r24, r18
    27d2:	93 07       	cpc	r25, r19
    27d4:	a4 07       	cpc	r26, r20
    27d6:	b5 07       	cpc	r27, r21
    27d8:	18 f4       	brcc	.+6      	; 0x27e0 <__fpcmp_parts_f+0x90>
    27da:	66 23       	and	r22, r22
    27dc:	41 f0       	breq	.+16     	; 0x27ee <__fpcmp_parts_f+0x9e>
    27de:	0d c0       	rjmp	.+26     	; 0x27fa <__fpcmp_parts_f+0xaa>
    27e0:	28 17       	cp	r18, r24
    27e2:	39 07       	cpc	r19, r25
    27e4:	4a 07       	cpc	r20, r26
    27e6:	5b 07       	cpc	r21, r27
    27e8:	28 f4       	brcc	.+10     	; 0x27f4 <__fpcmp_parts_f+0xa4>
    27ea:	66 23       	and	r22, r22
    27ec:	31 f0       	breq	.+12     	; 0x27fa <__fpcmp_parts_f+0xaa>
    27ee:	21 e0       	ldi	r18, 0x01	; 1
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	05 c0       	rjmp	.+10     	; 0x27fe <__fpcmp_parts_f+0xae>
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	02 c0       	rjmp	.+4      	; 0x27fe <__fpcmp_parts_f+0xae>
    27fa:	2f ef       	ldi	r18, 0xFF	; 255
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	c9 01       	movw	r24, r18
    2800:	08 95       	ret

00002802 <__udivmodqi4>:
    2802:	99 1b       	sub	r25, r25
    2804:	79 e0       	ldi	r23, 0x09	; 9
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <__udivmodqi4_ep>

00002808 <__udivmodqi4_loop>:
    2808:	99 1f       	adc	r25, r25
    280a:	96 17       	cp	r25, r22
    280c:	08 f0       	brcs	.+2      	; 0x2810 <__udivmodqi4_ep>
    280e:	96 1b       	sub	r25, r22

00002810 <__udivmodqi4_ep>:
    2810:	88 1f       	adc	r24, r24
    2812:	7a 95       	dec	r23
    2814:	c9 f7       	brne	.-14     	; 0x2808 <__udivmodqi4_loop>
    2816:	80 95       	com	r24
    2818:	08 95       	ret

0000281a <__prologue_saves__>:
    281a:	2f 92       	push	r2
    281c:	3f 92       	push	r3
    281e:	4f 92       	push	r4
    2820:	5f 92       	push	r5
    2822:	6f 92       	push	r6
    2824:	7f 92       	push	r7
    2826:	8f 92       	push	r8
    2828:	9f 92       	push	r9
    282a:	af 92       	push	r10
    282c:	bf 92       	push	r11
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	ca 1b       	sub	r28, r26
    2844:	db 0b       	sbc	r29, r27
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	09 94       	ijmp

00002852 <__epilogue_restores__>:
    2852:	2a 88       	ldd	r2, Y+18	; 0x12
    2854:	39 88       	ldd	r3, Y+17	; 0x11
    2856:	48 88       	ldd	r4, Y+16	; 0x10
    2858:	5f 84       	ldd	r5, Y+15	; 0x0f
    285a:	6e 84       	ldd	r6, Y+14	; 0x0e
    285c:	7d 84       	ldd	r7, Y+13	; 0x0d
    285e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2860:	9b 84       	ldd	r9, Y+11	; 0x0b
    2862:	aa 84       	ldd	r10, Y+10	; 0x0a
    2864:	b9 84       	ldd	r11, Y+9	; 0x09
    2866:	c8 84       	ldd	r12, Y+8	; 0x08
    2868:	df 80       	ldd	r13, Y+7	; 0x07
    286a:	ee 80       	ldd	r14, Y+6	; 0x06
    286c:	fd 80       	ldd	r15, Y+5	; 0x05
    286e:	0c 81       	ldd	r16, Y+4	; 0x04
    2870:	1b 81       	ldd	r17, Y+3	; 0x03
    2872:	aa 81       	ldd	r26, Y+2	; 0x02
    2874:	b9 81       	ldd	r27, Y+1	; 0x01
    2876:	ce 0f       	add	r28, r30
    2878:	d1 1d       	adc	r29, r1
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	ed 01       	movw	r28, r26
    2886:	08 95       	ret

00002888 <atoi>:
    2888:	fc 01       	movw	r30, r24
    288a:	88 27       	eor	r24, r24
    288c:	99 27       	eor	r25, r25
    288e:	e8 94       	clt
    2890:	21 91       	ld	r18, Z+
    2892:	20 32       	cpi	r18, 0x20	; 32
    2894:	e9 f3       	breq	.-6      	; 0x2890 <atoi+0x8>
    2896:	29 30       	cpi	r18, 0x09	; 9
    2898:	10 f0       	brcs	.+4      	; 0x289e <atoi+0x16>
    289a:	2e 30       	cpi	r18, 0x0E	; 14
    289c:	c8 f3       	brcs	.-14     	; 0x2890 <atoi+0x8>
    289e:	2b 32       	cpi	r18, 0x2B	; 43
    28a0:	41 f0       	breq	.+16     	; 0x28b2 <atoi+0x2a>
    28a2:	2d 32       	cpi	r18, 0x2D	; 45
    28a4:	39 f4       	brne	.+14     	; 0x28b4 <atoi+0x2c>
    28a6:	68 94       	set
    28a8:	04 c0       	rjmp	.+8      	; 0x28b2 <atoi+0x2a>
    28aa:	0e 94 8e 14 	call	0x291c	; 0x291c <__mulhi_const_10>
    28ae:	82 0f       	add	r24, r18
    28b0:	91 1d       	adc	r25, r1
    28b2:	21 91       	ld	r18, Z+
    28b4:	20 53       	subi	r18, 0x30	; 48
    28b6:	2a 30       	cpi	r18, 0x0A	; 10
    28b8:	c0 f3       	brcs	.-16     	; 0x28aa <atoi+0x22>
    28ba:	1e f4       	brtc	.+6      	; 0x28c2 <atoi+0x3a>
    28bc:	90 95       	com	r25
    28be:	81 95       	neg	r24
    28c0:	9f 4f       	sbci	r25, 0xFF	; 255
    28c2:	08 95       	ret

000028c4 <strtok>:
    28c4:	4b ee       	ldi	r20, 0xEB	; 235
    28c6:	53 e0       	ldi	r21, 0x03	; 3
    28c8:	0e 94 67 14 	call	0x28ce	; 0x28ce <strtok_r>
    28cc:	08 95       	ret

000028ce <strtok_r>:
    28ce:	fa 01       	movw	r30, r20
    28d0:	a1 91       	ld	r26, Z+
    28d2:	b0 81       	ld	r27, Z
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	19 f4       	brne	.+6      	; 0x28de <strtok_r+0x10>
    28d8:	10 97       	sbiw	r26, 0x00	; 0
    28da:	e1 f0       	breq	.+56     	; 0x2914 <strtok_r+0x46>
    28dc:	cd 01       	movw	r24, r26
    28de:	dc 01       	movw	r26, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0d 90       	ld	r0, X+
    28e4:	00 20       	and	r0, r0
    28e6:	11 f4       	brne	.+4      	; 0x28ec <strtok_r+0x1e>
    28e8:	c0 01       	movw	r24, r0
    28ea:	13 c0       	rjmp	.+38     	; 0x2912 <strtok_r+0x44>
    28ec:	fb 01       	movw	r30, r22
    28ee:	21 91       	ld	r18, Z+
    28f0:	22 23       	and	r18, r18
    28f2:	19 f0       	breq	.+6      	; 0x28fa <strtok_r+0x2c>
    28f4:	20 15       	cp	r18, r0
    28f6:	d9 f7       	brne	.-10     	; 0x28ee <strtok_r+0x20>
    28f8:	f3 cf       	rjmp	.-26     	; 0x28e0 <strtok_r+0x12>
    28fa:	fb 01       	movw	r30, r22
    28fc:	21 91       	ld	r18, Z+
    28fe:	20 15       	cp	r18, r0
    2900:	19 f4       	brne	.+6      	; 0x2908 <strtok_r+0x3a>
    2902:	1e 92       	st	-X, r1
    2904:	11 96       	adiw	r26, 0x01	; 1
    2906:	06 c0       	rjmp	.+12     	; 0x2914 <strtok_r+0x46>
    2908:	22 23       	and	r18, r18
    290a:	c1 f7       	brne	.-16     	; 0x28fc <strtok_r+0x2e>
    290c:	0d 90       	ld	r0, X+
    290e:	00 20       	and	r0, r0
    2910:	a1 f7       	brne	.-24     	; 0x28fa <strtok_r+0x2c>
    2912:	d0 01       	movw	r26, r0
    2914:	fa 01       	movw	r30, r20
    2916:	a1 93       	st	Z+, r26
    2918:	b0 83       	st	Z, r27
    291a:	08 95       	ret

0000291c <__mulhi_const_10>:
    291c:	7a e0       	ldi	r23, 0x0A	; 10
    291e:	97 9f       	mul	r25, r23
    2920:	90 2d       	mov	r25, r0
    2922:	87 9f       	mul	r24, r23
    2924:	80 2d       	mov	r24, r0
    2926:	91 0d       	add	r25, r1
    2928:	11 24       	eor	r1, r1
    292a:	08 95       	ret

0000292c <printf>:
    292c:	a0 e0       	ldi	r26, 0x00	; 0
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	ec e9       	ldi	r30, 0x9C	; 156
    2932:	f4 e1       	ldi	r31, 0x14	; 20
    2934:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__+0x20>
    2938:	fe 01       	movw	r30, r28
    293a:	35 96       	adiw	r30, 0x05	; 5
    293c:	61 91       	ld	r22, Z+
    293e:	71 91       	ld	r23, Z+
    2940:	80 91 5d 04 	lds	r24, 0x045D
    2944:	90 91 5e 04 	lds	r25, 0x045E
    2948:	af 01       	movw	r20, r30
    294a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vfprintf>
    294e:	20 96       	adiw	r28, 0x00	; 0
    2950:	e2 e0       	ldi	r30, 0x02	; 2
    2952:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__+0x20>

00002956 <puts>:
    2956:	ef 92       	push	r14
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	8c 01       	movw	r16, r24
    2964:	e0 91 5d 04 	lds	r30, 0x045D
    2968:	f0 91 5e 04 	lds	r31, 0x045E
    296c:	83 81       	ldd	r24, Z+3	; 0x03
    296e:	81 ff       	sbrs	r24, 1
    2970:	1f c0       	rjmp	.+62     	; 0x29b0 <puts+0x5a>
    2972:	c0 e0       	ldi	r28, 0x00	; 0
    2974:	d0 e0       	ldi	r29, 0x00	; 0
    2976:	0a c0       	rjmp	.+20     	; 0x298c <puts+0x36>
    2978:	db 01       	movw	r26, r22
    297a:	18 96       	adiw	r26, 0x08	; 8
    297c:	ed 91       	ld	r30, X+
    297e:	fc 91       	ld	r31, X
    2980:	19 97       	sbiw	r26, 0x09	; 9
    2982:	09 95       	icall
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	11 f0       	breq	.+4      	; 0x298c <puts+0x36>
    2988:	cf ef       	ldi	r28, 0xFF	; 255
    298a:	df ef       	ldi	r29, 0xFF	; 255
    298c:	f8 01       	movw	r30, r16
    298e:	81 91       	ld	r24, Z+
    2990:	8f 01       	movw	r16, r30
    2992:	60 91 5d 04 	lds	r22, 0x045D
    2996:	70 91 5e 04 	lds	r23, 0x045E
    299a:	88 23       	and	r24, r24
    299c:	69 f7       	brne	.-38     	; 0x2978 <puts+0x22>
    299e:	db 01       	movw	r26, r22
    29a0:	18 96       	adiw	r26, 0x08	; 8
    29a2:	ed 91       	ld	r30, X+
    29a4:	fc 91       	ld	r31, X
    29a6:	19 97       	sbiw	r26, 0x09	; 9
    29a8:	8a e0       	ldi	r24, 0x0A	; 10
    29aa:	09 95       	icall
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	11 f0       	breq	.+4      	; 0x29b4 <puts+0x5e>
    29b0:	cf ef       	ldi	r28, 0xFF	; 255
    29b2:	df ef       	ldi	r29, 0xFF	; 255
    29b4:	ce 01       	movw	r24, r28
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	e6 e0       	ldi	r30, 0x06	; 6
    29bc:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0x18>
    29c0:	11 f4       	brne	.+4      	; 0x29c6 <puts+0x70>
    29c2:	0e f4       	brtc	.+2      	; 0x29c6 <puts+0x70>
    29c4:	ee c2       	rjmp	.+1500   	; 0x2fa2 <__fp_nan>
    29c6:	df c2       	rjmp	.+1470   	; 0x2f86 <__fp_mpack>

000029c8 <sqrt>:
    29c8:	fe d2       	rcall	.+1532   	; 0x2fc6 <__fp_splitA>
    29ca:	d0 f3       	brcs	.-12     	; 0x29c0 <puts+0x6a>
    29cc:	99 23       	and	r25, r25
    29ce:	d9 f3       	breq	.-10     	; 0x29c6 <puts+0x70>
    29d0:	ce f3       	brts	.-14     	; 0x29c4 <puts+0x6e>
    29d2:	9f 57       	subi	r25, 0x7F	; 127
    29d4:	55 0b       	sbc	r21, r21
    29d6:	87 ff       	sbrs	r24, 7
    29d8:	e7 d2       	rcall	.+1486   	; 0x2fa8 <__fp_norm2>
    29da:	00 24       	eor	r0, r0
    29dc:	a0 e6       	ldi	r26, 0x60	; 96
    29de:	40 ea       	ldi	r20, 0xA0	; 160
    29e0:	90 01       	movw	r18, r0
    29e2:	80 58       	subi	r24, 0x80	; 128
    29e4:	56 95       	lsr	r21
    29e6:	97 95       	ror	r25
    29e8:	28 f4       	brcc	.+10     	; 0x29f4 <sqrt+0x2c>
    29ea:	80 5c       	subi	r24, 0xC0	; 192
    29ec:	66 0f       	add	r22, r22
    29ee:	77 1f       	adc	r23, r23
    29f0:	88 1f       	adc	r24, r24
    29f2:	20 f0       	brcs	.+8      	; 0x29fc <sqrt+0x34>
    29f4:	26 17       	cp	r18, r22
    29f6:	37 07       	cpc	r19, r23
    29f8:	48 07       	cpc	r20, r24
    29fa:	30 f4       	brcc	.+12     	; 0x2a08 <sqrt+0x40>
    29fc:	62 1b       	sub	r22, r18
    29fe:	73 0b       	sbc	r23, r19
    2a00:	84 0b       	sbc	r24, r20
    2a02:	20 29       	or	r18, r0
    2a04:	31 29       	or	r19, r1
    2a06:	4a 2b       	or	r20, r26
    2a08:	a6 95       	lsr	r26
    2a0a:	17 94       	ror	r1
    2a0c:	07 94       	ror	r0
    2a0e:	20 25       	eor	r18, r0
    2a10:	31 25       	eor	r19, r1
    2a12:	4a 27       	eor	r20, r26
    2a14:	58 f7       	brcc	.-42     	; 0x29ec <sqrt+0x24>
    2a16:	66 0f       	add	r22, r22
    2a18:	77 1f       	adc	r23, r23
    2a1a:	88 1f       	adc	r24, r24
    2a1c:	20 f0       	brcs	.+8      	; 0x2a26 <sqrt+0x5e>
    2a1e:	26 17       	cp	r18, r22
    2a20:	37 07       	cpc	r19, r23
    2a22:	48 07       	cpc	r20, r24
    2a24:	30 f4       	brcc	.+12     	; 0x2a32 <sqrt+0x6a>
    2a26:	62 0b       	sbc	r22, r18
    2a28:	73 0b       	sbc	r23, r19
    2a2a:	84 0b       	sbc	r24, r20
    2a2c:	20 0d       	add	r18, r0
    2a2e:	31 1d       	adc	r19, r1
    2a30:	41 1d       	adc	r20, r1
    2a32:	a0 95       	com	r26
    2a34:	81 f7       	brne	.-32     	; 0x2a16 <sqrt+0x4e>
    2a36:	b9 01       	movw	r22, r18
    2a38:	84 2f       	mov	r24, r20
    2a3a:	91 58       	subi	r25, 0x81	; 129
    2a3c:	88 0f       	add	r24, r24
    2a3e:	96 95       	lsr	r25
    2a40:	87 95       	ror	r24
    2a42:	08 95       	ret

00002a44 <vfprintf>:
    2a44:	ac e0       	ldi	r26, 0x0C	; 12
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e8 e2       	ldi	r30, 0x28	; 40
    2a4a:	f5 e1       	ldi	r31, 0x15	; 21
    2a4c:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__prologue_saves__>
    2a50:	6c 01       	movw	r12, r24
    2a52:	1b 01       	movw	r2, r22
    2a54:	8a 01       	movw	r16, r20
    2a56:	fc 01       	movw	r30, r24
    2a58:	17 82       	std	Z+7, r1	; 0x07
    2a5a:	16 82       	std	Z+6, r1	; 0x06
    2a5c:	83 81       	ldd	r24, Z+3	; 0x03
    2a5e:	81 ff       	sbrs	r24, 1
    2a60:	d1 c1       	rjmp	.+930    	; 0x2e04 <vfprintf+0x3c0>
    2a62:	2e 01       	movw	r4, r28
    2a64:	08 94       	sec
    2a66:	41 1c       	adc	r4, r1
    2a68:	51 1c       	adc	r5, r1
    2a6a:	f6 01       	movw	r30, r12
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	f1 01       	movw	r30, r2
    2a70:	93 fd       	sbrc	r25, 3
    2a72:	85 91       	lpm	r24, Z+
    2a74:	93 ff       	sbrs	r25, 3
    2a76:	81 91       	ld	r24, Z+
    2a78:	1f 01       	movw	r2, r30
    2a7a:	88 23       	and	r24, r24
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <vfprintf+0x3c>
    2a7e:	be c1       	rjmp	.+892    	; 0x2dfc <vfprintf+0x3b8>
    2a80:	85 32       	cpi	r24, 0x25	; 37
    2a82:	39 f4       	brne	.+14     	; 0x2a92 <vfprintf+0x4e>
    2a84:	93 fd       	sbrc	r25, 3
    2a86:	85 91       	lpm	r24, Z+
    2a88:	93 ff       	sbrs	r25, 3
    2a8a:	81 91       	ld	r24, Z+
    2a8c:	1f 01       	movw	r2, r30
    2a8e:	85 32       	cpi	r24, 0x25	; 37
    2a90:	29 f4       	brne	.+10     	; 0x2a9c <vfprintf+0x58>
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	b6 01       	movw	r22, r12
    2a96:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2a9a:	e7 cf       	rjmp	.-50     	; 0x2a6a <vfprintf+0x26>
    2a9c:	ee 24       	eor	r14, r14
    2a9e:	ff 24       	eor	r15, r15
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	20 32       	cpi	r18, 0x20	; 32
    2aa4:	b0 f4       	brcc	.+44     	; 0x2ad2 <vfprintf+0x8e>
    2aa6:	8b 32       	cpi	r24, 0x2B	; 43
    2aa8:	69 f0       	breq	.+26     	; 0x2ac4 <vfprintf+0x80>
    2aaa:	8c 32       	cpi	r24, 0x2C	; 44
    2aac:	28 f4       	brcc	.+10     	; 0x2ab8 <vfprintf+0x74>
    2aae:	80 32       	cpi	r24, 0x20	; 32
    2ab0:	51 f0       	breq	.+20     	; 0x2ac6 <vfprintf+0x82>
    2ab2:	83 32       	cpi	r24, 0x23	; 35
    2ab4:	71 f4       	brne	.+28     	; 0x2ad2 <vfprintf+0x8e>
    2ab6:	0b c0       	rjmp	.+22     	; 0x2ace <vfprintf+0x8a>
    2ab8:	8d 32       	cpi	r24, 0x2D	; 45
    2aba:	39 f0       	breq	.+14     	; 0x2aca <vfprintf+0x86>
    2abc:	80 33       	cpi	r24, 0x30	; 48
    2abe:	49 f4       	brne	.+18     	; 0x2ad2 <vfprintf+0x8e>
    2ac0:	21 60       	ori	r18, 0x01	; 1
    2ac2:	2c c0       	rjmp	.+88     	; 0x2b1c <vfprintf+0xd8>
    2ac4:	22 60       	ori	r18, 0x02	; 2
    2ac6:	24 60       	ori	r18, 0x04	; 4
    2ac8:	29 c0       	rjmp	.+82     	; 0x2b1c <vfprintf+0xd8>
    2aca:	28 60       	ori	r18, 0x08	; 8
    2acc:	27 c0       	rjmp	.+78     	; 0x2b1c <vfprintf+0xd8>
    2ace:	20 61       	ori	r18, 0x10	; 16
    2ad0:	25 c0       	rjmp	.+74     	; 0x2b1c <vfprintf+0xd8>
    2ad2:	27 fd       	sbrc	r18, 7
    2ad4:	2c c0       	rjmp	.+88     	; 0x2b2e <vfprintf+0xea>
    2ad6:	38 2f       	mov	r19, r24
    2ad8:	30 53       	subi	r19, 0x30	; 48
    2ada:	3a 30       	cpi	r19, 0x0A	; 10
    2adc:	98 f4       	brcc	.+38     	; 0x2b04 <vfprintf+0xc0>
    2ade:	26 ff       	sbrs	r18, 6
    2ae0:	08 c0       	rjmp	.+16     	; 0x2af2 <vfprintf+0xae>
    2ae2:	8e 2d       	mov	r24, r14
    2ae4:	88 0f       	add	r24, r24
    2ae6:	e8 2e       	mov	r14, r24
    2ae8:	ee 0c       	add	r14, r14
    2aea:	ee 0c       	add	r14, r14
    2aec:	e8 0e       	add	r14, r24
    2aee:	e3 0e       	add	r14, r19
    2af0:	15 c0       	rjmp	.+42     	; 0x2b1c <vfprintf+0xd8>
    2af2:	8f 2d       	mov	r24, r15
    2af4:	88 0f       	add	r24, r24
    2af6:	f8 2e       	mov	r15, r24
    2af8:	ff 0c       	add	r15, r15
    2afa:	ff 0c       	add	r15, r15
    2afc:	f8 0e       	add	r15, r24
    2afe:	f3 0e       	add	r15, r19
    2b00:	20 62       	ori	r18, 0x20	; 32
    2b02:	0c c0       	rjmp	.+24     	; 0x2b1c <vfprintf+0xd8>
    2b04:	8e 32       	cpi	r24, 0x2E	; 46
    2b06:	21 f4       	brne	.+8      	; 0x2b10 <vfprintf+0xcc>
    2b08:	26 fd       	sbrc	r18, 6
    2b0a:	78 c1       	rjmp	.+752    	; 0x2dfc <vfprintf+0x3b8>
    2b0c:	20 64       	ori	r18, 0x40	; 64
    2b0e:	06 c0       	rjmp	.+12     	; 0x2b1c <vfprintf+0xd8>
    2b10:	8c 36       	cpi	r24, 0x6C	; 108
    2b12:	11 f4       	brne	.+4      	; 0x2b18 <vfprintf+0xd4>
    2b14:	20 68       	ori	r18, 0x80	; 128
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <vfprintf+0xd8>
    2b18:	88 36       	cpi	r24, 0x68	; 104
    2b1a:	49 f4       	brne	.+18     	; 0x2b2e <vfprintf+0xea>
    2b1c:	f1 01       	movw	r30, r2
    2b1e:	93 fd       	sbrc	r25, 3
    2b20:	85 91       	lpm	r24, Z+
    2b22:	93 ff       	sbrs	r25, 3
    2b24:	81 91       	ld	r24, Z+
    2b26:	1f 01       	movw	r2, r30
    2b28:	88 23       	and	r24, r24
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <vfprintf+0xea>
    2b2c:	ba cf       	rjmp	.-140    	; 0x2aa2 <vfprintf+0x5e>
    2b2e:	98 2f       	mov	r25, r24
    2b30:	95 54       	subi	r25, 0x45	; 69
    2b32:	93 30       	cpi	r25, 0x03	; 3
    2b34:	18 f0       	brcs	.+6      	; 0x2b3c <vfprintf+0xf8>
    2b36:	90 52       	subi	r25, 0x20	; 32
    2b38:	93 30       	cpi	r25, 0x03	; 3
    2b3a:	28 f4       	brcc	.+10     	; 0x2b46 <vfprintf+0x102>
    2b3c:	0c 5f       	subi	r16, 0xFC	; 252
    2b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b40:	ff e3       	ldi	r31, 0x3F	; 63
    2b42:	f9 83       	std	Y+1, r31	; 0x01
    2b44:	0d c0       	rjmp	.+26     	; 0x2b60 <vfprintf+0x11c>
    2b46:	83 36       	cpi	r24, 0x63	; 99
    2b48:	31 f0       	breq	.+12     	; 0x2b56 <vfprintf+0x112>
    2b4a:	83 37       	cpi	r24, 0x73	; 115
    2b4c:	71 f0       	breq	.+28     	; 0x2b6a <vfprintf+0x126>
    2b4e:	83 35       	cpi	r24, 0x53	; 83
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <vfprintf+0x110>
    2b52:	60 c0       	rjmp	.+192    	; 0x2c14 <vfprintf+0x1d0>
    2b54:	22 c0       	rjmp	.+68     	; 0x2b9a <vfprintf+0x156>
    2b56:	f8 01       	movw	r30, r16
    2b58:	80 81       	ld	r24, Z
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	0e 5f       	subi	r16, 0xFE	; 254
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	42 01       	movw	r8, r4
    2b62:	71 e0       	ldi	r23, 0x01	; 1
    2b64:	a7 2e       	mov	r10, r23
    2b66:	b1 2c       	mov	r11, r1
    2b68:	16 c0       	rjmp	.+44     	; 0x2b96 <vfprintf+0x152>
    2b6a:	62 e0       	ldi	r22, 0x02	; 2
    2b6c:	66 2e       	mov	r6, r22
    2b6e:	71 2c       	mov	r7, r1
    2b70:	60 0e       	add	r6, r16
    2b72:	71 1e       	adc	r7, r17
    2b74:	f8 01       	movw	r30, r16
    2b76:	80 80       	ld	r8, Z
    2b78:	91 80       	ldd	r9, Z+1	; 0x01
    2b7a:	26 ff       	sbrs	r18, 6
    2b7c:	03 c0       	rjmp	.+6      	; 0x2b84 <vfprintf+0x140>
    2b7e:	6e 2d       	mov	r22, r14
    2b80:	70 e0       	ldi	r23, 0x00	; 0
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <vfprintf+0x144>
    2b84:	6f ef       	ldi	r22, 0xFF	; 255
    2b86:	7f ef       	ldi	r23, 0xFF	; 255
    2b88:	c4 01       	movw	r24, r8
    2b8a:	2c 87       	std	Y+12, r18	; 0x0c
    2b8c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <strnlen>
    2b90:	5c 01       	movw	r10, r24
    2b92:	83 01       	movw	r16, r6
    2b94:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b96:	2f 77       	andi	r18, 0x7F	; 127
    2b98:	17 c0       	rjmp	.+46     	; 0x2bc8 <vfprintf+0x184>
    2b9a:	52 e0       	ldi	r21, 0x02	; 2
    2b9c:	65 2e       	mov	r6, r21
    2b9e:	71 2c       	mov	r7, r1
    2ba0:	60 0e       	add	r6, r16
    2ba2:	71 1e       	adc	r7, r17
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	80 80       	ld	r8, Z
    2ba8:	91 80       	ldd	r9, Z+1	; 0x01
    2baa:	26 ff       	sbrs	r18, 6
    2bac:	03 c0       	rjmp	.+6      	; 0x2bb4 <vfprintf+0x170>
    2bae:	6e 2d       	mov	r22, r14
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <vfprintf+0x174>
    2bb4:	6f ef       	ldi	r22, 0xFF	; 255
    2bb6:	7f ef       	ldi	r23, 0xFF	; 255
    2bb8:	c4 01       	movw	r24, r8
    2bba:	2c 87       	std	Y+12, r18	; 0x0c
    2bbc:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strnlen_P>
    2bc0:	5c 01       	movw	r10, r24
    2bc2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bc4:	20 68       	ori	r18, 0x80	; 128
    2bc6:	83 01       	movw	r16, r6
    2bc8:	23 fd       	sbrc	r18, 3
    2bca:	20 c0       	rjmp	.+64     	; 0x2c0c <vfprintf+0x1c8>
    2bcc:	08 c0       	rjmp	.+16     	; 0x2bde <vfprintf+0x19a>
    2bce:	80 e2       	ldi	r24, 0x20	; 32
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	b6 01       	movw	r22, r12
    2bd4:	2c 87       	std	Y+12, r18	; 0x0c
    2bd6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2bda:	fa 94       	dec	r15
    2bdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bde:	8f 2d       	mov	r24, r15
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a8 16       	cp	r10, r24
    2be4:	b9 06       	cpc	r11, r25
    2be6:	98 f3       	brcs	.-26     	; 0x2bce <vfprintf+0x18a>
    2be8:	11 c0       	rjmp	.+34     	; 0x2c0c <vfprintf+0x1c8>
    2bea:	f4 01       	movw	r30, r8
    2bec:	27 fd       	sbrc	r18, 7
    2bee:	85 91       	lpm	r24, Z+
    2bf0:	27 ff       	sbrs	r18, 7
    2bf2:	81 91       	ld	r24, Z+
    2bf4:	4f 01       	movw	r8, r30
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	b6 01       	movw	r22, r12
    2bfa:	2c 87       	std	Y+12, r18	; 0x0c
    2bfc:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2c00:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c02:	f1 10       	cpse	r15, r1
    2c04:	fa 94       	dec	r15
    2c06:	08 94       	sec
    2c08:	a1 08       	sbc	r10, r1
    2c0a:	b1 08       	sbc	r11, r1
    2c0c:	a1 14       	cp	r10, r1
    2c0e:	b1 04       	cpc	r11, r1
    2c10:	61 f7       	brne	.-40     	; 0x2bea <vfprintf+0x1a6>
    2c12:	f1 c0       	rjmp	.+482    	; 0x2df6 <vfprintf+0x3b2>
    2c14:	84 36       	cpi	r24, 0x64	; 100
    2c16:	11 f0       	breq	.+4      	; 0x2c1c <vfprintf+0x1d8>
    2c18:	89 36       	cpi	r24, 0x69	; 105
    2c1a:	49 f5       	brne	.+82     	; 0x2c6e <vfprintf+0x22a>
    2c1c:	27 ff       	sbrs	r18, 7
    2c1e:	08 c0       	rjmp	.+16     	; 0x2c30 <vfprintf+0x1ec>
    2c20:	f8 01       	movw	r30, r16
    2c22:	60 81       	ld	r22, Z
    2c24:	71 81       	ldd	r23, Z+1	; 0x01
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	0c 5f       	subi	r16, 0xFC	; 252
    2c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2e:	09 c0       	rjmp	.+18     	; 0x2c42 <vfprintf+0x1fe>
    2c30:	f8 01       	movw	r30, r16
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	88 27       	eor	r24, r24
    2c38:	77 fd       	sbrc	r23, 7
    2c3a:	80 95       	com	r24
    2c3c:	98 2f       	mov	r25, r24
    2c3e:	0e 5f       	subi	r16, 0xFE	; 254
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	4f e6       	ldi	r20, 0x6F	; 111
    2c44:	b4 2e       	mov	r11, r20
    2c46:	b2 22       	and	r11, r18
    2c48:	97 ff       	sbrs	r25, 7
    2c4a:	09 c0       	rjmp	.+18     	; 0x2c5e <vfprintf+0x21a>
    2c4c:	90 95       	com	r25
    2c4e:	80 95       	com	r24
    2c50:	70 95       	com	r23
    2c52:	61 95       	neg	r22
    2c54:	7f 4f       	sbci	r23, 0xFF	; 255
    2c56:	8f 4f       	sbci	r24, 0xFF	; 255
    2c58:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5a:	f0 e8       	ldi	r31, 0x80	; 128
    2c5c:	bf 2a       	or	r11, r31
    2c5e:	a2 01       	movw	r20, r4
    2c60:	2a e0       	ldi	r18, 0x0A	; 10
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	0e 94 65 17 	call	0x2eca	; 0x2eca <__ultoa_invert>
    2c68:	78 2e       	mov	r7, r24
    2c6a:	74 18       	sub	r7, r4
    2c6c:	45 c0       	rjmp	.+138    	; 0x2cf8 <vfprintf+0x2b4>
    2c6e:	85 37       	cpi	r24, 0x75	; 117
    2c70:	31 f4       	brne	.+12     	; 0x2c7e <vfprintf+0x23a>
    2c72:	3f ee       	ldi	r19, 0xEF	; 239
    2c74:	b3 2e       	mov	r11, r19
    2c76:	b2 22       	and	r11, r18
    2c78:	2a e0       	ldi	r18, 0x0A	; 10
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	25 c0       	rjmp	.+74     	; 0x2cc8 <vfprintf+0x284>
    2c7e:	99 ef       	ldi	r25, 0xF9	; 249
    2c80:	b9 2e       	mov	r11, r25
    2c82:	b2 22       	and	r11, r18
    2c84:	8f 36       	cpi	r24, 0x6F	; 111
    2c86:	c1 f0       	breq	.+48     	; 0x2cb8 <vfprintf+0x274>
    2c88:	80 37       	cpi	r24, 0x70	; 112
    2c8a:	20 f4       	brcc	.+8      	; 0x2c94 <vfprintf+0x250>
    2c8c:	88 35       	cpi	r24, 0x58	; 88
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <vfprintf+0x24e>
    2c90:	b5 c0       	rjmp	.+362    	; 0x2dfc <vfprintf+0x3b8>
    2c92:	0d c0       	rjmp	.+26     	; 0x2cae <vfprintf+0x26a>
    2c94:	80 37       	cpi	r24, 0x70	; 112
    2c96:	21 f0       	breq	.+8      	; 0x2ca0 <vfprintf+0x25c>
    2c98:	88 37       	cpi	r24, 0x78	; 120
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <vfprintf+0x25a>
    2c9c:	af c0       	rjmp	.+350    	; 0x2dfc <vfprintf+0x3b8>
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <vfprintf+0x260>
    2ca0:	20 e1       	ldi	r18, 0x10	; 16
    2ca2:	b2 2a       	or	r11, r18
    2ca4:	b4 fe       	sbrs	r11, 4
    2ca6:	0b c0       	rjmp	.+22     	; 0x2cbe <vfprintf+0x27a>
    2ca8:	84 e0       	ldi	r24, 0x04	; 4
    2caa:	b8 2a       	or	r11, r24
    2cac:	08 c0       	rjmp	.+16     	; 0x2cbe <vfprintf+0x27a>
    2cae:	b4 fe       	sbrs	r11, 4
    2cb0:	09 c0       	rjmp	.+18     	; 0x2cc4 <vfprintf+0x280>
    2cb2:	e6 e0       	ldi	r30, 0x06	; 6
    2cb4:	be 2a       	or	r11, r30
    2cb6:	06 c0       	rjmp	.+12     	; 0x2cc4 <vfprintf+0x280>
    2cb8:	28 e0       	ldi	r18, 0x08	; 8
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	05 c0       	rjmp	.+10     	; 0x2cc8 <vfprintf+0x284>
    2cbe:	20 e1       	ldi	r18, 0x10	; 16
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	02 c0       	rjmp	.+4      	; 0x2cc8 <vfprintf+0x284>
    2cc4:	20 e1       	ldi	r18, 0x10	; 16
    2cc6:	32 e0       	ldi	r19, 0x02	; 2
    2cc8:	b7 fe       	sbrs	r11, 7
    2cca:	08 c0       	rjmp	.+16     	; 0x2cdc <vfprintf+0x298>
    2ccc:	f8 01       	movw	r30, r16
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	0c 5f       	subi	r16, 0xFC	; 252
    2cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cda:	07 c0       	rjmp	.+14     	; 0x2cea <vfprintf+0x2a6>
    2cdc:	f8 01       	movw	r30, r16
    2cde:	60 81       	ld	r22, Z
    2ce0:	71 81       	ldd	r23, Z+1	; 0x01
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 5f       	subi	r16, 0xFE	; 254
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	a2 01       	movw	r20, r4
    2cec:	0e 94 65 17 	call	0x2eca	; 0x2eca <__ultoa_invert>
    2cf0:	78 2e       	mov	r7, r24
    2cf2:	74 18       	sub	r7, r4
    2cf4:	ff e7       	ldi	r31, 0x7F	; 127
    2cf6:	bf 22       	and	r11, r31
    2cf8:	b6 fe       	sbrs	r11, 6
    2cfa:	0b c0       	rjmp	.+22     	; 0x2d12 <vfprintf+0x2ce>
    2cfc:	2e ef       	ldi	r18, 0xFE	; 254
    2cfe:	b2 22       	and	r11, r18
    2d00:	7e 14       	cp	r7, r14
    2d02:	38 f4       	brcc	.+14     	; 0x2d12 <vfprintf+0x2ce>
    2d04:	b4 fe       	sbrs	r11, 4
    2d06:	07 c0       	rjmp	.+14     	; 0x2d16 <vfprintf+0x2d2>
    2d08:	b2 fc       	sbrc	r11, 2
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <vfprintf+0x2d2>
    2d0c:	8f ee       	ldi	r24, 0xEF	; 239
    2d0e:	b8 22       	and	r11, r24
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <vfprintf+0x2d2>
    2d12:	a7 2c       	mov	r10, r7
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <vfprintf+0x2d4>
    2d16:	ae 2c       	mov	r10, r14
    2d18:	8b 2d       	mov	r24, r11
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	b4 fe       	sbrs	r11, 4
    2d1e:	0d c0       	rjmp	.+26     	; 0x2d3a <vfprintf+0x2f6>
    2d20:	fe 01       	movw	r30, r28
    2d22:	e7 0d       	add	r30, r7
    2d24:	f1 1d       	adc	r31, r1
    2d26:	20 81       	ld	r18, Z
    2d28:	20 33       	cpi	r18, 0x30	; 48
    2d2a:	19 f4       	brne	.+6      	; 0x2d32 <vfprintf+0x2ee>
    2d2c:	e9 ee       	ldi	r30, 0xE9	; 233
    2d2e:	be 22       	and	r11, r30
    2d30:	09 c0       	rjmp	.+18     	; 0x2d44 <vfprintf+0x300>
    2d32:	a3 94       	inc	r10
    2d34:	b2 fe       	sbrs	r11, 2
    2d36:	06 c0       	rjmp	.+12     	; 0x2d44 <vfprintf+0x300>
    2d38:	04 c0       	rjmp	.+8      	; 0x2d42 <vfprintf+0x2fe>
    2d3a:	86 78       	andi	r24, 0x86	; 134
    2d3c:	90 70       	andi	r25, 0x00	; 0
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <vfprintf+0x300>
    2d42:	a3 94       	inc	r10
    2d44:	8b 2c       	mov	r8, r11
    2d46:	99 24       	eor	r9, r9
    2d48:	b3 fc       	sbrc	r11, 3
    2d4a:	14 c0       	rjmp	.+40     	; 0x2d74 <vfprintf+0x330>
    2d4c:	b0 fe       	sbrs	r11, 0
    2d4e:	0f c0       	rjmp	.+30     	; 0x2d6e <vfprintf+0x32a>
    2d50:	af 14       	cp	r10, r15
    2d52:	28 f4       	brcc	.+10     	; 0x2d5e <vfprintf+0x31a>
    2d54:	e7 2c       	mov	r14, r7
    2d56:	ef 0c       	add	r14, r15
    2d58:	ea 18       	sub	r14, r10
    2d5a:	af 2c       	mov	r10, r15
    2d5c:	08 c0       	rjmp	.+16     	; 0x2d6e <vfprintf+0x32a>
    2d5e:	e7 2c       	mov	r14, r7
    2d60:	06 c0       	rjmp	.+12     	; 0x2d6e <vfprintf+0x32a>
    2d62:	80 e2       	ldi	r24, 0x20	; 32
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	b6 01       	movw	r22, r12
    2d68:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2d6c:	a3 94       	inc	r10
    2d6e:	af 14       	cp	r10, r15
    2d70:	c0 f3       	brcs	.-16     	; 0x2d62 <vfprintf+0x31e>
    2d72:	04 c0       	rjmp	.+8      	; 0x2d7c <vfprintf+0x338>
    2d74:	af 14       	cp	r10, r15
    2d76:	10 f4       	brcc	.+4      	; 0x2d7c <vfprintf+0x338>
    2d78:	fa 18       	sub	r15, r10
    2d7a:	01 c0       	rjmp	.+2      	; 0x2d7e <vfprintf+0x33a>
    2d7c:	ff 24       	eor	r15, r15
    2d7e:	84 fe       	sbrs	r8, 4
    2d80:	0f c0       	rjmp	.+30     	; 0x2da0 <vfprintf+0x35c>
    2d82:	80 e3       	ldi	r24, 0x30	; 48
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	b6 01       	movw	r22, r12
    2d88:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2d8c:	82 fe       	sbrs	r8, 2
    2d8e:	1f c0       	rjmp	.+62     	; 0x2dce <vfprintf+0x38a>
    2d90:	81 fe       	sbrs	r8, 1
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <vfprintf+0x356>
    2d94:	88 e5       	ldi	r24, 0x58	; 88
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	10 c0       	rjmp	.+32     	; 0x2dba <vfprintf+0x376>
    2d9a:	88 e7       	ldi	r24, 0x78	; 120
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0d c0       	rjmp	.+26     	; 0x2dba <vfprintf+0x376>
    2da0:	c4 01       	movw	r24, r8
    2da2:	86 78       	andi	r24, 0x86	; 134
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	91 f0       	breq	.+36     	; 0x2dce <vfprintf+0x38a>
    2daa:	81 fc       	sbrc	r8, 1
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <vfprintf+0x36e>
    2dae:	80 e2       	ldi	r24, 0x20	; 32
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <vfprintf+0x370>
    2db2:	8b e2       	ldi	r24, 0x2B	; 43
    2db4:	b7 fc       	sbrc	r11, 7
    2db6:	8d e2       	ldi	r24, 0x2D	; 45
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	b6 01       	movw	r22, r12
    2dbc:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2dc0:	06 c0       	rjmp	.+12     	; 0x2dce <vfprintf+0x38a>
    2dc2:	80 e3       	ldi	r24, 0x30	; 48
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	b6 01       	movw	r22, r12
    2dc8:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2dcc:	ea 94       	dec	r14
    2dce:	7e 14       	cp	r7, r14
    2dd0:	c0 f3       	brcs	.-16     	; 0x2dc2 <vfprintf+0x37e>
    2dd2:	7a 94       	dec	r7
    2dd4:	f2 01       	movw	r30, r4
    2dd6:	e7 0d       	add	r30, r7
    2dd8:	f1 1d       	adc	r31, r1
    2dda:	80 81       	ld	r24, Z
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	b6 01       	movw	r22, r12
    2de0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2de4:	77 20       	and	r7, r7
    2de6:	a9 f7       	brne	.-22     	; 0x2dd2 <vfprintf+0x38e>
    2de8:	06 c0       	rjmp	.+12     	; 0x2df6 <vfprintf+0x3b2>
    2dea:	80 e2       	ldi	r24, 0x20	; 32
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	b6 01       	movw	r22, r12
    2df0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <fputc>
    2df4:	fa 94       	dec	r15
    2df6:	ff 20       	and	r15, r15
    2df8:	c1 f7       	brne	.-16     	; 0x2dea <vfprintf+0x3a6>
    2dfa:	37 ce       	rjmp	.-914    	; 0x2a6a <vfprintf+0x26>
    2dfc:	f6 01       	movw	r30, r12
    2dfe:	26 81       	ldd	r18, Z+6	; 0x06
    2e00:	37 81       	ldd	r19, Z+7	; 0x07
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <vfprintf+0x3c4>
    2e04:	2f ef       	ldi	r18, 0xFF	; 255
    2e06:	3f ef       	ldi	r19, 0xFF	; 255
    2e08:	c9 01       	movw	r24, r18
    2e0a:	2c 96       	adiw	r28, 0x0c	; 12
    2e0c:	e2 e1       	ldi	r30, 0x12	; 18
    2e0e:	0c 94 29 14 	jmp	0x2852	; 0x2852 <__epilogue_restores__>

00002e12 <__eerd_byte_m328p>:
    2e12:	f9 99       	sbic	0x1f, 1	; 31
    2e14:	fe cf       	rjmp	.-4      	; 0x2e12 <__eerd_byte_m328p>
    2e16:	92 bd       	out	0x22, r25	; 34
    2e18:	81 bd       	out	0x21, r24	; 33
    2e1a:	f8 9a       	sbi	0x1f, 0	; 31
    2e1c:	99 27       	eor	r25, r25
    2e1e:	80 b5       	in	r24, 0x20	; 32
    2e20:	08 95       	ret

00002e22 <__eeupd_byte_m328p>:
    2e22:	26 2f       	mov	r18, r22

00002e24 <__eeupd_r18_m328p>:
    2e24:	f9 99       	sbic	0x1f, 1	; 31
    2e26:	fe cf       	rjmp	.-4      	; 0x2e24 <__eeupd_r18_m328p>
    2e28:	92 bd       	out	0x22, r25	; 34
    2e2a:	81 bd       	out	0x21, r24	; 33
    2e2c:	f8 9a       	sbi	0x1f, 0	; 31
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	00 b4       	in	r0, 0x20	; 32
    2e32:	02 16       	cp	r0, r18
    2e34:	39 f0       	breq	.+14     	; 0x2e44 <__eeupd_r18_m328p+0x20>
    2e36:	1f ba       	out	0x1f, r1	; 31
    2e38:	20 bd       	out	0x20, r18	; 32
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	fa 9a       	sbi	0x1f, 2	; 31
    2e40:	f9 9a       	sbi	0x1f, 1	; 31
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	08 95       	ret

00002e46 <strnlen_P>:
    2e46:	fc 01       	movw	r30, r24
    2e48:	05 90       	lpm	r0, Z+
    2e4a:	61 50       	subi	r22, 0x01	; 1
    2e4c:	70 40       	sbci	r23, 0x00	; 0
    2e4e:	01 10       	cpse	r0, r1
    2e50:	d8 f7       	brcc	.-10     	; 0x2e48 <strnlen_P+0x2>
    2e52:	80 95       	com	r24
    2e54:	90 95       	com	r25
    2e56:	8e 0f       	add	r24, r30
    2e58:	9f 1f       	adc	r25, r31
    2e5a:	08 95       	ret

00002e5c <strnlen>:
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	61 50       	subi	r22, 0x01	; 1
    2e60:	70 40       	sbci	r23, 0x00	; 0
    2e62:	01 90       	ld	r0, Z+
    2e64:	01 10       	cpse	r0, r1
    2e66:	d8 f7       	brcc	.-10     	; 0x2e5e <strnlen+0x2>
    2e68:	80 95       	com	r24
    2e6a:	90 95       	com	r25
    2e6c:	8e 0f       	add	r24, r30
    2e6e:	9f 1f       	adc	r25, r31
    2e70:	08 95       	ret

00002e72 <fputc>:
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	8c 01       	movw	r16, r24
    2e7c:	eb 01       	movw	r28, r22
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	81 ff       	sbrs	r24, 1
    2e82:	1b c0       	rjmp	.+54     	; 0x2eba <fputc+0x48>
    2e84:	82 ff       	sbrs	r24, 2
    2e86:	0d c0       	rjmp	.+26     	; 0x2ea2 <fputc+0x30>
    2e88:	2e 81       	ldd	r18, Y+6	; 0x06
    2e8a:	3f 81       	ldd	r19, Y+7	; 0x07
    2e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e90:	28 17       	cp	r18, r24
    2e92:	39 07       	cpc	r19, r25
    2e94:	64 f4       	brge	.+24     	; 0x2eae <fputc+0x3c>
    2e96:	e8 81       	ld	r30, Y
    2e98:	f9 81       	ldd	r31, Y+1	; 0x01
    2e9a:	01 93       	st	Z+, r16
    2e9c:	f9 83       	std	Y+1, r31	; 0x01
    2e9e:	e8 83       	st	Y, r30
    2ea0:	06 c0       	rjmp	.+12     	; 0x2eae <fputc+0x3c>
    2ea2:	e8 85       	ldd	r30, Y+8	; 0x08
    2ea4:	f9 85       	ldd	r31, Y+9	; 0x09
    2ea6:	80 2f       	mov	r24, r16
    2ea8:	09 95       	icall
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	31 f4       	brne	.+12     	; 0x2eba <fputc+0x48>
    2eae:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb2:	01 96       	adiw	r24, 0x01	; 1
    2eb4:	9f 83       	std	Y+7, r25	; 0x07
    2eb6:	8e 83       	std	Y+6, r24	; 0x06
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <fputc+0x4c>
    2eba:	0f ef       	ldi	r16, 0xFF	; 255
    2ebc:	1f ef       	ldi	r17, 0xFF	; 255
    2ebe:	c8 01       	movw	r24, r16
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <__ultoa_invert>:
    2eca:	fa 01       	movw	r30, r20
    2ecc:	aa 27       	eor	r26, r26
    2ece:	28 30       	cpi	r18, 0x08	; 8
    2ed0:	51 f1       	breq	.+84     	; 0x2f26 <__ultoa_invert+0x5c>
    2ed2:	20 31       	cpi	r18, 0x10	; 16
    2ed4:	81 f1       	breq	.+96     	; 0x2f36 <__ultoa_invert+0x6c>
    2ed6:	e8 94       	clt
    2ed8:	6f 93       	push	r22
    2eda:	6e 7f       	andi	r22, 0xFE	; 254
    2edc:	6e 5f       	subi	r22, 0xFE	; 254
    2ede:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee4:	af 4f       	sbci	r26, 0xFF	; 255
    2ee6:	b1 e0       	ldi	r27, 0x01	; 1
    2ee8:	3e d0       	rcall	.+124    	; 0x2f66 <__ultoa_invert+0x9c>
    2eea:	b4 e0       	ldi	r27, 0x04	; 4
    2eec:	3c d0       	rcall	.+120    	; 0x2f66 <__ultoa_invert+0x9c>
    2eee:	67 0f       	add	r22, r23
    2ef0:	78 1f       	adc	r23, r24
    2ef2:	89 1f       	adc	r24, r25
    2ef4:	9a 1f       	adc	r25, r26
    2ef6:	a1 1d       	adc	r26, r1
    2ef8:	68 0f       	add	r22, r24
    2efa:	79 1f       	adc	r23, r25
    2efc:	8a 1f       	adc	r24, r26
    2efe:	91 1d       	adc	r25, r1
    2f00:	a1 1d       	adc	r26, r1
    2f02:	6a 0f       	add	r22, r26
    2f04:	71 1d       	adc	r23, r1
    2f06:	81 1d       	adc	r24, r1
    2f08:	91 1d       	adc	r25, r1
    2f0a:	a1 1d       	adc	r26, r1
    2f0c:	20 d0       	rcall	.+64     	; 0x2f4e <__ultoa_invert+0x84>
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <__ultoa_invert+0x48>
    2f10:	68 94       	set
    2f12:	3f 91       	pop	r19
    2f14:	2a e0       	ldi	r18, 0x0A	; 10
    2f16:	26 9f       	mul	r18, r22
    2f18:	11 24       	eor	r1, r1
    2f1a:	30 19       	sub	r19, r0
    2f1c:	30 5d       	subi	r19, 0xD0	; 208
    2f1e:	31 93       	st	Z+, r19
    2f20:	de f6       	brtc	.-74     	; 0x2ed8 <__ultoa_invert+0xe>
    2f22:	cf 01       	movw	r24, r30
    2f24:	08 95       	ret
    2f26:	46 2f       	mov	r20, r22
    2f28:	47 70       	andi	r20, 0x07	; 7
    2f2a:	40 5d       	subi	r20, 0xD0	; 208
    2f2c:	41 93       	st	Z+, r20
    2f2e:	b3 e0       	ldi	r27, 0x03	; 3
    2f30:	0f d0       	rcall	.+30     	; 0x2f50 <__ultoa_invert+0x86>
    2f32:	c9 f7       	brne	.-14     	; 0x2f26 <__ultoa_invert+0x5c>
    2f34:	f6 cf       	rjmp	.-20     	; 0x2f22 <__ultoa_invert+0x58>
    2f36:	46 2f       	mov	r20, r22
    2f38:	4f 70       	andi	r20, 0x0F	; 15
    2f3a:	40 5d       	subi	r20, 0xD0	; 208
    2f3c:	4a 33       	cpi	r20, 0x3A	; 58
    2f3e:	18 f0       	brcs	.+6      	; 0x2f46 <__ultoa_invert+0x7c>
    2f40:	49 5d       	subi	r20, 0xD9	; 217
    2f42:	31 fd       	sbrc	r19, 1
    2f44:	40 52       	subi	r20, 0x20	; 32
    2f46:	41 93       	st	Z+, r20
    2f48:	02 d0       	rcall	.+4      	; 0x2f4e <__ultoa_invert+0x84>
    2f4a:	a9 f7       	brne	.-22     	; 0x2f36 <__ultoa_invert+0x6c>
    2f4c:	ea cf       	rjmp	.-44     	; 0x2f22 <__ultoa_invert+0x58>
    2f4e:	b4 e0       	ldi	r27, 0x04	; 4
    2f50:	a6 95       	lsr	r26
    2f52:	97 95       	ror	r25
    2f54:	87 95       	ror	r24
    2f56:	77 95       	ror	r23
    2f58:	67 95       	ror	r22
    2f5a:	ba 95       	dec	r27
    2f5c:	c9 f7       	brne	.-14     	; 0x2f50 <__ultoa_invert+0x86>
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	61 05       	cpc	r22, r1
    2f62:	71 05       	cpc	r23, r1
    2f64:	08 95       	ret
    2f66:	9b 01       	movw	r18, r22
    2f68:	ac 01       	movw	r20, r24
    2f6a:	0a 2e       	mov	r0, r26
    2f6c:	06 94       	lsr	r0
    2f6e:	57 95       	ror	r21
    2f70:	47 95       	ror	r20
    2f72:	37 95       	ror	r19
    2f74:	27 95       	ror	r18
    2f76:	ba 95       	dec	r27
    2f78:	c9 f7       	brne	.-14     	; 0x2f6c <__ultoa_invert+0xa2>
    2f7a:	62 0f       	add	r22, r18
    2f7c:	73 1f       	adc	r23, r19
    2f7e:	84 1f       	adc	r24, r20
    2f80:	95 1f       	adc	r25, r21
    2f82:	a0 1d       	adc	r26, r0
    2f84:	08 95       	ret

00002f86 <__fp_mpack>:
    2f86:	9f 3f       	cpi	r25, 0xFF	; 255
    2f88:	31 f0       	breq	.+12     	; 0x2f96 <__fp_mpack_finite+0xc>

00002f8a <__fp_mpack_finite>:
    2f8a:	91 50       	subi	r25, 0x01	; 1
    2f8c:	20 f4       	brcc	.+8      	; 0x2f96 <__fp_mpack_finite+0xc>
    2f8e:	87 95       	ror	r24
    2f90:	77 95       	ror	r23
    2f92:	67 95       	ror	r22
    2f94:	b7 95       	ror	r27
    2f96:	88 0f       	add	r24, r24
    2f98:	91 1d       	adc	r25, r1
    2f9a:	96 95       	lsr	r25
    2f9c:	87 95       	ror	r24
    2f9e:	97 f9       	bld	r25, 7
    2fa0:	08 95       	ret

00002fa2 <__fp_nan>:
    2fa2:	9f ef       	ldi	r25, 0xFF	; 255
    2fa4:	80 ec       	ldi	r24, 0xC0	; 192
    2fa6:	08 95       	ret

00002fa8 <__fp_norm2>:
    2fa8:	91 50       	subi	r25, 0x01	; 1
    2faa:	50 40       	sbci	r21, 0x00	; 0
    2fac:	66 0f       	add	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	88 1f       	adc	r24, r24
    2fb2:	d2 f7       	brpl	.-12     	; 0x2fa8 <__fp_norm2>
    2fb4:	08 95       	ret

00002fb6 <__fp_split3>:
    2fb6:	57 fd       	sbrc	r21, 7
    2fb8:	90 58       	subi	r25, 0x80	; 128
    2fba:	44 0f       	add	r20, r20
    2fbc:	55 1f       	adc	r21, r21
    2fbe:	59 f0       	breq	.+22     	; 0x2fd6 <__fp_splitA+0x10>
    2fc0:	5f 3f       	cpi	r21, 0xFF	; 255
    2fc2:	71 f0       	breq	.+28     	; 0x2fe0 <__fp_splitA+0x1a>
    2fc4:	47 95       	ror	r20

00002fc6 <__fp_splitA>:
    2fc6:	88 0f       	add	r24, r24
    2fc8:	97 fb       	bst	r25, 7
    2fca:	99 1f       	adc	r25, r25
    2fcc:	61 f0       	breq	.+24     	; 0x2fe6 <__fp_splitA+0x20>
    2fce:	9f 3f       	cpi	r25, 0xFF	; 255
    2fd0:	79 f0       	breq	.+30     	; 0x2ff0 <__fp_splitA+0x2a>
    2fd2:	87 95       	ror	r24
    2fd4:	08 95       	ret
    2fd6:	12 16       	cp	r1, r18
    2fd8:	13 06       	cpc	r1, r19
    2fda:	14 06       	cpc	r1, r20
    2fdc:	55 1f       	adc	r21, r21
    2fde:	f2 cf       	rjmp	.-28     	; 0x2fc4 <__fp_split3+0xe>
    2fe0:	46 95       	lsr	r20
    2fe2:	f1 df       	rcall	.-30     	; 0x2fc6 <__fp_splitA>
    2fe4:	08 c0       	rjmp	.+16     	; 0x2ff6 <__fp_splitA+0x30>
    2fe6:	16 16       	cp	r1, r22
    2fe8:	17 06       	cpc	r1, r23
    2fea:	18 06       	cpc	r1, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	f1 cf       	rjmp	.-30     	; 0x2fd2 <__fp_splitA+0xc>
    2ff0:	86 95       	lsr	r24
    2ff2:	71 05       	cpc	r23, r1
    2ff4:	61 05       	cpc	r22, r1
    2ff6:	08 94       	sec
    2ff8:	08 95       	ret

00002ffa <_exit>:
    2ffa:	f8 94       	cli

00002ffc <__stop_program>:
    2ffc:	ff cf       	rjmp	.-2      	; 0x2ffc <__stop_program>
